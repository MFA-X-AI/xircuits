{"version":3,"file":"lib_index_js.26dcae8a8ee9d7d24d36.js","mappings":";;;;;;;;;;;;;;;;AAAoE;AACP;AACtD,gCAAgC,mEAAM;AAC7C;AACA;AACA,kBAAkB,+EAAkB;AACpC;AACA;AACA;AACA;AACA;AACA,yCAAyC,0EAAe;AACxD;AACA,yCAAyC,0EAAe;AACxD;AACA,yCAAyC,iFAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gFAAqB;AAC9D;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC3B6D;AACjC;AACoC;AACN;AACM;AAC6B;AAC7F;AACA;AACA;AACO;AACP;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0EAAe;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,cAAc,+DAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,0EAAe;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,cAAc,+DAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,6EAAkB;AAC1C;AACA;AACA,cAAc,8DAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,8EAAmB;AAC3C;AACA;AACA,cAAc,+DAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,+EAAoB;AAC5C;AACA;AACA,cAAc,gEAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,8EAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAS;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,wBAAwB,gFAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,6EAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,wBAAwB,iFAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0EAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAS;AACrB;AACA,oBAAoB,gEAAU;AAC9B;AACA,kCAAkC,mEAAiB,GAAG,aAAa;AACnE,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wEAAe,GAAG,sDAAsD,mCAAmC;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0EAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAS;AACrB;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAU;AACtC;AACA;AACA,0CAA0C,mEAAiB,GAAG,aAAa;AAC3E,6BAA6B;AAC7B;AACA;AACA;AACA,wBAAwB,gEAAU;AAClC;AACA;AACA,sCAAsC,mEAAiB,GAAG,aAAa;AACvE,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjV4G;AACtD;AACe;AACjB;AAC7C,iCAAiC,kEAAK;AAC7C;AACA;AACA;AACA,SAAS;AACT,gCAAgC,2EAAc;AAC9C,8BAA8B,4EAAe;AAC7C,+BAA+B,+DAAgB,GAAG,wBAAwB;AAC1E,6BAA6B,+EAAqB;AAClD;AACA,gCAAgC,mEAAM;AACtC,kBAAkB,iFAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClC+B;AACqB;AACmB;AACjB;AAC/C,gCAAgC,iFAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA,mBAAmB,6DAAe;AAClC;AACA;AACA,eAAe,gDAAmB,CAAC,+DAAgB,IAAI,uDAAuD;AAC9G;AACA;AACA;;;;;;;;;;;;;;;;;AChBgE;AACZ;AAC7C,8BAA8B,0EAAgB;AACrD,4BAA4B;AAC5B,4CAA4C,cAAc,qBAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB,yDAAyD;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAAe,GAAG,6CAA6C;AAC5F,gBAAgB,6DAAe,GAAG,qCAAqC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAAe,GAAG,4CAA4C;AAC3F,gBAAgB,6DAAe,GAAG,oCAAoC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrC+B;AACH;AACoC;AAC3B;AACqB;AACX;AACJ;AACC;AACT;AACD;AACe;AACjD;AACA;AACA,aAAa,4DAAU;AACvB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,cAAc,4DAAU;AACxB;AACA;AACA;AACA;AACA;AACA,kBAAkB,4DAAU;AAC5B;AACA;AACA;AACA,cAAc,4DAAU;AACxB;AACA;AACA;AACA,uBAAuB,4DAAU;AACjC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,4DAAU;AACxC;AACA;AACA;AACA,CAAC,cAAc;AACf;AACA;AACA;AACA;AACO,+BAA+B,4CAAe;AACrD;AACA;AACA;AACA,mBAAmB,gDAAmB,CAAC,0EAAgB,IAAI,0DAA0D;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oEAAmB;AAC3D;AACA;AACA;AACA,oBAAoB,gDAAmB,WAAW,0GAA0G,yBAAyB,wNAAwN;AAC7Y,gBAAgB,gDAAmB,CAAC,6DAAO,IAAI,4FAA4F;AAC3I,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,CAAC,qDAAM,IAAI,wHAAwH;AAC9K,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB,yBAAyB,uCAAK;AACrE,oBAAoB,gDAAmB,yBAAyB,uCAAK;AACrE;AACA;AACA,oBAAoB,gDAAmB,WAAW,0GAA0G,yBAAyB,wNAAwN;AAC7Y,gBAAgB,gDAAmB,CAAC,6DAAO,IAAI,4FAA4F;AAC3I,oBAAoB,gDAAmB,aAAa,0HAA0H;AAC9K,wBAAwB,gDAAmB,WAAW,uBAAuB;AAC7E,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,CAAC,4DAAY,IAAI,qCAAqC;AACjG,oBAAoB,gDAAmB,CAAC,sDAAU,IAAI,uFAAuF;AAC7I,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB,yBAAyB,uCAAK;AACrE,oBAAoB,gDAAmB,yBAAyB,uCAAK;AACrE;AACA;AACA,oBAAoB,gDAAmB,WAAW,wQAAwQ;AAC1T,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,CAAC,qDAAM,IAAI,wHAAwH;AAC9K,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB,yBAAyB,uCAAK;AACrE,oBAAoB,gDAAmB,yBAAyB,uCAAK;AACrE;AACA,gBAAgB,gDAAmB,WAAW,sNAAsN;AACpQ,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB;AACnC,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB,yBAAyB,uCAAK;AACjE,gBAAgB,gDAAmB,yBAAyB,uCAAK;AACjE;AACA;AACA;;;;;;;;;;;;;;;;ACtKgE;AAChE;AACA;AACA;AACA;AACA;AACO,8BAA8B,0EAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAwC;AACxgCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0EAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1P+F;AAC3C;AAC7C,+BAA+B,sFAAyB;AAC/D,4BAA4B;AAC5B,gBAAgB,uBAAuB;AACvC;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA,sCAAsC,yDAAyD;AAC/F,gCAAgC,mEAAM;AACtC,kBAAkB,iFAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,mEAAM;AACtC,kBAAkB,+EAAkB;AACpC;AACA;AACA;AACA,qCAAqC,6DAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1E8D;AACP;AAC7B;AAC1B;AACA;AACA;AACO,0BAA0B,6DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,2DAAS,IAAI,2CAA2C;AAC5F;AACA;AACA,wBAAwB,0DAAmB,CAAC,iEAAU,IAAI,qGAAqG;AAC/J,oBAAoB,0DAAmB,aAAa,cAAc;AAClE,oBAAoB,0DAAmB,aAAa,2BAA2B;AAC/E,oBAAoB,0DAAmB,aAAa,uBAAuB;AAC3E;AACA;AACA,oBAAoB,0DAAmB,CAAC,iEAAU,IAAI,mGAAmG;AACzJ,gBAAgB,0DAAmB,aAAa,cAAc;AAC9D,gBAAgB,0DAAmB,aAAa,2BAA2B;AAC3E,gBAAgB,0DAAmB,aAAa,uBAAuB;AACvE,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxCoD;AACI;AACJ;AACe;AACD;AACR;AACnD;AACP;AACA,6BAA6B,mEAAW,GAAG,iFAAiF;AAC5H,+BAA+B,sEAAgB;AAC/C,kEAAkE,iEAAiB;AACnF,kEAAkE,6EAAgB,GAAG,mBAAmB;AACxG,kEAAkE,0EAAiB,GAAG,KAAK;AAC3F,2DAA2D,mEAAkB;AAC7E,4BAA4B,6DAAe,GAAG,oDAAoD,mBAAmB;AACrH;AACA;AACA,+BAA+B,6DAAe,GAAG,qDAAqD,oBAAoB;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BwE;AACT;AACA;AACe;AACF;AACvC;AACe;AACb;AACe;AACQ;AACR;AACN;AACR;AACO;AACe;AACgB;AACV;AAC7D,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,4DAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gBAAgB,4DAAU;AACjC;AACA;AACA;AACO,cAAc,4DAAU;AAC/B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAQ,KAAK;AAC3C,+CAA+C;AAC/C;AACO,sBAAsB,4ZAA4Z;AACzb,qCAAqC,+CAAQ;AAC7C,wBAAwB,kDAAW;AACnC,8BAA8B,+CAAQ;AACtC,oCAAoC,+CAAQ;AAC5C,wCAAwC,+CAAQ;AAChD,wCAAwC,+CAAQ;AAChD,kEAAkE,+CAAQ;AAC1E,4CAA4C,+CAAQ;AACpD,8DAA8D,+CAAQ;AACtE,qDAAqD,+CAAQ;AAC7D,0CAA0C,+CAAQ;AAClD,oCAAoC,+CAAQ;AAC5C,wCAAwC,+CAAQ;AAChD,sCAAsC,+CAAQ;AAC9C,oDAAoD,+CAAQ;AAC5D,8CAA8C,+CAAQ;AACtD,kDAAkD,+CAAQ;AAC1D,gDAAgD,+CAAQ;AACxD,8CAA8C,+CAAQ;AACtD,kCAAkC,+CAAQ;AAC1C,kDAAkD,+CAAQ;AAC1D,kDAAkD,+CAAQ;AAC1D,sCAAsC,+CAAQ;AAC9C,0CAA0C,+CAAQ;AAClD,4CAA4C,+CAAQ;AACpD,kCAAkC,+CAAQ;AAC1C,0DAA0D,+CAAQ;AAClE,8BAA8B,+CAAG;AACjC,uBAAuB,6CAAM;AAC7B,6BAA6B,6CAAM;AACnC,qBAAqB,kDAAW;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAe;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0EAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gBAAgB,sEAAgB,UAAU,0DAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6BAA6B;AAC3E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH,wBAAwB;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,0DAA0D;AACnH;AACA;AACA;AACA,yDAAyD,+CAA+C;AACxG;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA;AACA;AACA,yDAAyD,oDAAoD;AAC7G;AACA;AACA;AACA;AACA,yDAAyD,0DAA0D;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C,4BAA4B,mCAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wBAAwB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAAU;AACjD;AACA;AACA;AACA,oBAAoB,qEAAmB;AACvC,oBAAoB,iEAAe,GAAG,uBAAuB;AAC7D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,wBAAwB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,yCAAyC;AAC7G;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC,2DAAU;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iEAAiE,WAAW,KAAK,OAAO;AACxF;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC,2DAAU;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sDAAsD,WAAW,KAAK,OAAO;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAe,GAAG,2DAA2D,qBAAqB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,0EAAgB,CAAC,0DAAmB,CAAC,yDAAS,IAAI,wMAAwM;AAC5Q,sBAAsB,qEAAmB,IAAI,iEAAe,GAAG,kBAAkB;AACjF;AACA;AACA;AACA,mCAAmC,mEAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAA6C,GAAG,gDAAgD,GAAG,0CAA0C,EAAE,0CAA0C,GAAG,4CAA4C,GAAG,4CAA4C;AACzT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iBAAiB;AACjB;AACA;AACA,QAAQ,gDAAS;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,+CAAQ;AACtE,oDAAoD,+CAAQ;AAC5D,gEAAgE,+CAAQ,GAAG,YAAY;AACvF,0DAA0D,+CAAQ,GAAG,YAAY;AACjF,8CAA8C,+CAAQ;AACtD,kDAAkD,+CAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2FAAuB,GAAG,gEAAgE;AAC7H;AACA;AACA,uCAAuC,6DAAe,GAAG,yDAAyD,qBAAqB;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,KAAK,gBAAgB,KAAK,GAAG,KAAK;AACpG;AACA;AACA,iFAAiF,KAAK,GAAG,KAAK;AAC9F;AACA;AACA,sFAAsF,KAAK,GAAG,KAAK;AACnG;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB,0DAAmB,CAAC,wEAAgB;AACpD,oBAAoB,0DAAmB,CAAC,yEAAY,IAAI,wCAAwC;AAChG,sCAAsC,0DAAmB,UAAU,SAAS,+DAA+D,oCAAoC;AAC/K,gBAAgB,0DAAmB,CAAC,sEAAe,IAAI,oKAAoK;AAC3N,iCAAiC,0DAAmB,UAAU,SAAS,yDAAyD,yCAAyC;AACzK,gBAAgB,0DAAmB,CAAC,6EAAgB,IAAI,+CAA+C;AACvG;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC35CsD;AACH;AACd;AACgG;AAC7F;AACQ;AACzC,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gBAAgB,4DAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;AACe;AACf,8CAA8C,qDAAc;AAC5D,oCAAoC,qDAAc;AAClD,wCAAwC,+CAAQ;AAChD,kCAAkC,+CAAQ;AAC1C,0DAA0D,+CAAQ;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,CAAC,iDAAS;AACzC,gBAAgB,0DAAmB,UAAU,oBAAoB;AACjE,oBAAoB,0DAAmB,QAAQ,0BAA0B;AACzE,oBAAoB,0DAAmB,UAAU,iCAAiC;AAClF,wBAAwB,0DAAmB,YAAY,qLAAqL;AAC5O;AACA;AACA;AACA;AACA,qBAAqB;AACrB,gCAAgC,0DAAmB,UAAU,gBAAgB,EAAE,6BAA6B;AAC5G,4BAA4B,0DAAmB,CAAC,yDAAa,IAAI,8IAA8I;AAC/M,qBAAqB;AACrB,gBAAgB,0DAAmB,CAAC,iEAAS,IAAI,yBAAyB;AAC1E;AACA;AACA;AACA,iBAAiB;AACjB,4BAA4B,0DAAmB,CAAC,qEAAa,IAAI,gBAAgB,uBAAuB,uCAAuC;AAC/I,wBAAwB,0DAAmB,CAAC,4EAAoB;AAChE,4BAA4B,0DAAmB,CAAC,2EAAmB,IAAI,sCAAsC;AAC7G,wBAAwB,0DAAmB,CAAC,0EAAkB;AAC9D;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wCAAwC,0DAAmB,UAAU,gBAAgB,GAAG,GAAG;AAC3F,oCAAoC,0DAAmB,CAAC,yDAAa,IAAI,uJAAuJ;AAChO;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClK+B;AACM;AACwB;AACtD,oBAAoB,4DAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,+BAA+B,4CAAe;AACrD;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,gBAAgB,gDAAmB,gBAAgB,8CAA8C;AACjG,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,6EAAkB;AACtE,mBAAmB;AACnB,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,8EAAmB;AACvE,mBAAmB;AACnB,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,+EAAoB;AACxE,mBAAmB;AACnB,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,8EAAmB;AACvE,mBAAmB;AACnB,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,gFAAqB;AACzE,mBAAmB;AACnB,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,0EAAe;AACnE,mBAAmB;AACnB,YAAY,gDAAmB,UAAU;AACzC,oDAAoD,0EAAe;AACnE,mBAAmB;AACnB;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC1C+B;AACM;AAC2B;AACc;AACjB;AACtD,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACO,4BAA4B,4CAAe;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,0FAAuB,GAAG,sFAAsF;AACvI;AACA;AACA,2BAA2B,wEAAe,GAAG,oEAAoE,gCAAgC;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK,gBAAgB,KAAK,GAAG,KAAK;AACxF;AACA;AACA,qEAAqE,KAAK,GAAG,KAAK;AAClF;AACA;AACA,0EAA0E,KAAK,GAAG,KAAK;AACvF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6EAAkB,IAAI,oBAAoB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iFAAsB,IAAI,yCAAyC;AAC3G;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,gBAAgB,gDAAmB,SAAS;AAC5C;AACA,4BAA4B,WAAW;AACvC;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzF+B;AACM;AAC9B,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,4CAAe;AAC9C;AACA,eAAe,gDAAmB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;AChB8D;AACH;AAC3D;AACA;AACA;AACA;AACA;AACA,6BAA6B,6BAA6B;AAC1D,8BAA8B,+CAAQ;AACtC,0BAA0B,+CAAQ;AAClC,8BAA8B,+CAAQ;AACtC,qCAAqC,+CAAQ;AAC7C,uCAAuC,+CAAQ;AAC/C,6BAA6B,6CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uCAAuC;AACvE;AACA;AACA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAA0D;AAC1F;AACA;AACA;AACA;AACA,gCAAgC,2DAA2D;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU;AACzC;AACA,WAAW;AACX,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB;AAC/B;AACA;AACA,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB;AAC/B;AACA;AACA,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB;AAC/B;AACA;AACA,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB;AAC/B;AACA,6CAA6C,0DAAmB,QAAQ,YAAY,6CAA6C,0DAAmB,QAAQ,aAAa;AACzK,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB;AAC/B;AACA,8CAA8C,0DAAmB,QAAQ,QAAQ;AACjF;AACA;AACA;AACA;AACO,6BAA6B,6DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,2DAAS,IAAI,gDAAgD;AACjG,oBAAoB,0DAAmB,sBAAsB,yDAAyD;AACtH,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HyD;AACT;AACyB;AACZ;AACX;AACmB;AACH;AAC3D;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sCAAsC,kDAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mEAAc;AAC/D;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAU;AACnC;AACA;AACA;AACA,4BAA4B,2DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uEAAuE,sEAAoB;AAC3F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mEAAmE,sEAAoB;AACvF;AACA,gBAAgB,8EAAmB;AACnC,SAAS;AACT;AACA;AACA;AACA,wEAAwE,sEAAoB;AAC5F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yEAAyE,sEAAoB;AAC7F;AACA,gBAAgB,uFAA4B;AAC5C,SAAS;AACT;AACA;AACA;AACA,wEAAwE,sEAAoB;AAC5F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sEAAsE,sEAAoB;AAC1F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uEAAuE,sEAAoB;AAC3F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4EAA4E,sEAAoB;AAChG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,6EAA2B;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,8EAAmB;AACnD;AACA,kBAAkB,0DAAQ;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,6EAA2B;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,uFAA4B;AAC5D;AACA,kBAAkB,gEAAc;AAChC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,8EAA4B;AAC9C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA,mCAAmC,mEAAc;AACjD;AACA,0BAA0B,mDAAM,GAAG,oCAAoC;AACvE;AACA,2BAA2B,wDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,mDAAM;AAC3C;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA,2BAA2B,yDAAO;AAClC;AACA,2BAA2B,wDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;;;;;;;;;;;;;;;;;;;;AC/R8C;AACL;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,uBAAuB,wDAAM;AAC7B;AACA;AACA;AACA;AACA,kCAAkC,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxFoD;AACG;AACf;AACN;AAC3B,qBAAqB,mHAAmH;AAC/I,kCAAkC,+CAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB,SAAS,SAAS,iCAAiC;AAC9E,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,gBAAgB,0DAAmB;AACnC,oBAAoB,0DAAmB,SAAS,SAAS,iCAAiC;AAC1F,gBAAgB,0DAAmB;AACnC;AACA,oBAAoB,0DAAmB;AACvC,wBAAwB,0DAAmB,CAAC,gEAAgB,IAAI,sGAAsG,0BAA0B,mBAAmB;AACnN;AACA,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,SAAS,SAAS,iCAAiC;AAClF,gDAAgD,0DAAmB,UAAU,cAAc,EAAE,GAAG;AAChG;AACA,YAAY,0DAAmB;AAC/B,gBAAgB,0DAAmB,YAAY,gCAAgC;AAC/E,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB,SAAS,SAAS,iCAAiC;AACtF,4CAA4C,0DAAmB,UAAU,cAAc,EAAE,GAAG;AAC5F;AACA,YAAY,0DAAmB;AAC/B,gBAAgB,0DAAmB,CAAC,qDAAM,IAAI,+HAA+H;AAC7K,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB,SAAS,SAAS,iCAAiC;AACtF,0CAA0C,0DAAmB,UAAU,cAAc,EAAE,GAAG;AAC1F;AACA,YAAY,0DAAmB;AAC/B,gBAAgB,0DAAmB,CAAC,gDAAY,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB,SAAS,SAAS,iCAAiC;AACtF,8CAA8C,0DAAmB,UAAU,qCAAqC,EAAE,GAAG;AACrH;AACA,YAAY,0DAAmB;AAC/B,gBAAgB,0DAAmB,CAAC,gDAAY,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;;;;;;;;;;;;;;;;;;;ACjHmD;AACH;AACP;AAClC;AACP,mBAAmB,oEAAkB;AACrC;AACA;AACA,IAAI,sEAAuB,SAAS,qEAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1B+B;AACM;AACrC;AACO,kBAAkB,4DAAU;AACnC;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gBAAgB;AACtB,MAAM,gBAAgB;AACtB;AACA;AACA,MAAM,gBAAgB;AACtB,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gBAAgB;AACtB,MAAM,gBAAgB;AACtB;AACA;AACA,MAAM,gBAAgB;AACtB,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACO,+BAA+B,4CAAe;AACrD;AACA,gBAAgB,gDAAmB,cAAc,8GAA8G;AAC/J;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7C0B;AACgC;AACI;AACF;AACM;AACjB;AACC;AACL;AACa;AACI;AACR;AACL;AACH;AACD;AACgB;AACC;AACQ;AAC5B;AAC+E;AAClE;AACvD;AACA;AACO,gCAAgC,oDAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAS;AACjB,QAAQ,wEAAmB;AAC3B,QAAQ,oEAAe;AACvB,QAAQ,uEAAmB;AAC3B,QAAQ,oEAAgB;AACxB,QAAQ,gEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4DAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,+DAAY;AAC9B,SAAS;AACT;AACA;AACA,4BAA4B,+DAAa;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,qBAAqB,qFAAyB;AAC9C;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,uEAAoB;AACpC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAa,CAAC,sEAAmB;AACzC;AACA,8BAA8B,oEAAkB,CAAC,0DAAmB,CAAC,8DAAO,IAAI,UAAU;AAC1F;AACA,mCAAmC,mEAAgB;AACnD;AACA;AACA;AACA;AACA,oCAAoC,gFAAwB,GAAG,gCAAgC;AAC/F;AACA,qCAAqC,+DAAY;AACjD;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA,QAAQ,oFAAqB;AAC7B;AACA,gCAAgC,mFAAuB;AACvD;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,gCAAgC,uFAA2B;AAC3D;AACA,kBAAkB,+DAAY;AAC9B;AACA;AACA;AACA,6BAA6B,oFAAwB;AACrD;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iEAAiE,qFAAyB;AAC1F;AACA;AACA,qBAAqB;AACrB;AACA,6CAA6C,kFAAsB;AACnE;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,iCAAiC;AACjC;AACA,2CAA2C,4DAAU;AACrD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,uEAAuE,WAAW,KAAK,OAAO;AAC9F;AACA;AACA;AACA,gCAAgC,0FAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA,+CAA+C,qFAAyB;AACxE;AACA,qBAAqB;AACrB;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAW;AACzC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC;AACjC;AACA,2CAA2C,4DAAU;AACrD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sEAAsE,WAAW,KAAK,OAAO;AAC7F;AACA;AACA;AACA;AACA,gCAAgC,2FAA+B;AAC/D;AACA,2CAA2C,gDAAG;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD,wCAAwC,WAAW;AACnD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,gCAAgC,kFAAsB;AACtD;AACA,kBAAkB,+DAAQ;AAC1B;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,qFAAyB;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,iFAAqB;AACrD;AACA,kBAAkB,8DAAO;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,mFAAuB;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,kFAAsB;AACtD;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,kFAAsB;AACtD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yBAAyB,uFAA2B;AACpD;AACA,wBAAwB,kBAAkB;AAC1C;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sDAAS;AACb;AACA,iEAAe,OAAO,EAAC;AACvB;;;;;;;;;;;;;;ACvTO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjB8E;AACC;AACrB;AACX;AACO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,yDAAY;AAC7C;AACA;AACA,yCAAyC,mEAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAY;AACtC,mCAAmC,gEAAc;AACjD;AACA;AACA;AACA,SAAS;AACT,oCAAoC,mEAAe;AACnD,+BAA+B,wEAAoB;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,oFAAkC;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kFAAkF,OAAO;AACzF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAA4B;AACpC;AACA;AACA,oCAAoC,gDAAgD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sCAAsC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AChGmD;AACI;AACd;AACf;AAC1B;AACA;AACA;AACe,+BAA+B,6DAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAU,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,uDAAc;AAClD,YAAY,0DAAmB,YAAY;AAC3C;AACA,iCAAiC;AACjC,YAAY,0DAAmB,CAAC,iEAAU,IAAI;AAC9C;AACA,0FAA0F,mCAAmC,IAAI;AACjI;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpE0D;AACe;AACvB;AACoB;AACT;AACgB;AACH;AACb;AAC7D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,iEAAe;AACvB,QAAQ,oEAAe;AACvB,QAAQ,uEAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAAa;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6BAA6B,QAAQ,8JAA8J;AACnM,kBAAkB,8DAAO;AACzB;AACA;AACA,SAAS;AACT;AACA,6BAA6B,QAAQ,yJAAyJ;AAC9L,kBAAkB,gEAAS;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iDAAiD,WAAW;AAC5D,SAAS;AACT;AACA,kCAAkC,mEAAe,KAAK,kEAAc;AACpE;AACA;AACA,aAAa;AACb;AACA,mCAAmC,gEAAc;AACjD;AACA,aAAa;AACb;AACA;AACA,0CAA0C,+DAAQ;AAClD,+DAA+D,sEAAoB;AACnF;AACA;AACA,aAAa;AACb,0DAA0D,sEAAoB;AAC9E;AACA;AACA,aAAa;AACb,0DAA0D,yDAAgB;AAC1E;AACA;AACA;AACA;AACA,aAAa;AACb,sDAAsD,sBAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+DAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,+EAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+EAAoB;AAC1D;AACA;AACA,aAAa;AACb;AACA;AACA,sCAAsC,+EAAoB;AAC1D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvM+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3B+C;AAC/C;AACA,6BAA6B,2DAAU;AACvC;AACA;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;ACTgE;AACzD;AACP;AACA;AACA;AACA,wCAAwC,gDAAgD,sBAAsB;AAC9G;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wCAAwC,gDAAgD,sBAAsB;AAC9G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,+EAA+E,sBAAsB;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,4EAA4E,sBAAsB;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,8EAA8E,sBAAsB;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gFAAgF,sBAAsB;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,6EAA6E,sBAAsB;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,8EAA8E,sBAAsB;AAC7I;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E,uBAAuB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC/G;AACA;AACA;AACA;AACA,uBAAuB,wEAAe,GAAG,6EAA6E,sBAAsB;AAC5I;AACA;AACA,aAAa;AACb,4CAA4C,gDAAgD,sBAAsB;AAClH;AACA;AACA;AACA,aAAa;AACb,4CAA4C,gDAAgD,sBAAsB;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wEAAe,GAAG,gDAAgD,sBAAsB;AAC3G;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HwC;AACW;AACd;AACa;AACR;AAC2F;AACtF;AACxC,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gBAAgB,4DAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,iCAAiC;AACvC,MAAM,iCAAiC;AACvC,MAAM,gCAAgC;AACtC,MAAM,iCAAiC;AACvC,MAAM,gCAAgC;AACtC,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,kCAAkC;AACxC,MAAM,kCAAkC;AACxC,MAAM,gCAAgC;AACtC,MAAM,iCAAiC;AACvC,MAAM,iCAAiC;AACvC,MAAM,kCAAkC;AACxC,MAAM,gCAAgC;AACtC,MAAM,+BAA+B;AACrC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACe;AACf,8CAA8C,qDAAc;AAC5D,oCAAoC,qDAAc;AAClD,wCAAwC,+CAAQ;AAChD,kCAAkC,+CAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC,2DAAU;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sDAAsD,WAAW,KAAK,OAAO;AAC7E;AACA;AACA;AACA;AACA;AACA,iCAAiC,sDAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA,SAAS,WAAW;AACpB;AACA,KAAK;AACL,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,CAAC,mDAAU;AAC1C,gBAAgB,0DAAmB;AACnC,oBAAoB,0DAAmB,UAAU,2BAA2B;AAC5E,wBAAwB,0DAAmB,YAAY,kHAAkH,cAAc,4BAA4B;AACnN,wBAAwB,0DAAmB,QAAQ,iEAAiE;AACpH,4BAA4B,0DAAmB,QAAQ,4BAA4B;AACnF,wBAAwB,0DAAmB,QAAQ,kEAAkE;AACrH,4BAA4B,0DAAmB,QAAQ,6BAA6B;AACpF,oBAAoB,0DAAmB,CAAC,iEAAS,IAAI,yBAAyB;AAC9E;AACA;AACA;AACA,qBAAqB;AACrB,gCAAgC,0DAAmB,CAAC,qEAAa,IAAI,gBAAgB,uBAAuB,GAAG;AAC/G,4BAA4B,0DAAmB,CAAC,4EAAoB;AACpE,gCAAgC,0DAAmB,CAAC,2EAAmB;AACvE,4BAA4B,0DAAmB,CAAC,0EAAkB;AAClE;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4CAA4C,0DAAmB,UAAU,gBAAgB,GAAG,GAAG;AAC/F,wCAAwC,0DAAmB,CAAC,2DAAc,IAAI;AAC9E;AACA;AACA,6CAA6C,oGAAoG;AACjJ;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,gCAAgC,0DAAmB,UAAU,gBAAgB,EAAE,GAAG;AAClF,4BAA4B,0DAAmB,CAAC,2DAAc,IAAI,SAAS,gCAAgC,yEAAyE;AACpL,qBAAqB;AACrB;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9K+B;AACM;AAC9B,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACO,6BAA6B,4CAAe;AACnD;AACA,gBAAgB,gDAAmB,SAAS;AAC5C;AACA;AACA,aAAa;AACb;AACA,4BAA4B,WAAW;AACvC;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,4BAA4B,WAAW;AACvC;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrC+B;AACM;AAC9B,aAAa,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,4CAAe;AAC/C;AACA,eAAe,gDAAmB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBoD;AACQ;AACH;AACR;AACY;AACZ;AACI;AACiB;AAC/D;AACA,yBAAyB,8DAAO,GAAG,mCAAmC,oEAAW,EAAE;AACnF,yBAAyB,8DAAO,GAAG,uCAAuC,iEAAW,EAAE;AACvF,qBAAqB,8DAAO,GAAG,mCAAmC,6DAAO,EAAE;AAC3E,2BAA2B,8DAAO,GAAG,yCAAyC,mEAAa,EAAE;AAC7F,qBAAqB,8DAAO,GAAG,mCAAmC,6DAAO,EAAE;AAC3E,uBAAuB,8DAAO,GAAG,qCAAqC,+DAAS,EAAE;AACjF,6BAA6B,8DAAO,GAAG,2CAA2C,0EAAe,EAAE;AACnG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5B2E;AAChC;AACE;AACsE;AAC9D;AACO;AACf;AACU;AACoB;AAC3E;AACO,6BAA6B,qEAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qDAAM;AAC3C,wCAAwC,qDAAM;AAC9C,oCAAoC,qDAAM;AAC1C,wCAAwC,qDAAM;AAC9C,sCAAsC,qDAAM;AAC5C,kCAAkC,qDAAM;AACxC,2CAA2C,qDAAM;AACjD,qCAAqC,qDAAM;AAC3C,qCAAqC,qDAAM;AAC3C,uCAAuC,qDAAM;AAC7C,uCAAuC,qDAAM;AAC7C,uCAAuC,qDAAM;AAC7C,wCAAwC,qDAAM;AAC9C,qCAAqC,qDAAM;AAC3C,sCAAsC,qDAAM;AAC5C,uCAAuC,qDAAM;AAC7C,mCAAmC,qDAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sDAAU;AACtC,2BAA2B,mEAAc,GAAG,kBAAkB;AAC9D;AACA,4BAA4B,8DAAY;AACxC;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C,kBAAkB,+DAAQ;AAC1B;AACA;AACA,sCAAsC,iFAAsB;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,+DAAa;AAC5C,kBAAkB,kEAAW;AAC7B;AACA;AACA,sCAAsC,sFAA2B;AACjE;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,+DAAa;AAC5C,kBAAkB,4DAAU;AAC5B;AACA;AACA,sCAAsC,sFAA2B;AACjE;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,+DAAa;AAC7C,kBAAkB,gEAAS;AAC3B;AACA;AACA,sCAAsC,oFAAyB;AAC/D;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,+DAAa;AACzC,kBAAkB,8DAAO;AACzB;AACA;AACA,sCAAsC,gFAAqB;AAC3D;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,+DAAa;AAC3C,kBAAkB,8DAAO;AACzB;AACA;AACA,sCAAsC,kFAAuB;AAC7D;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,+DAAa;AACzC,kBAAkB,+DAAQ;AAC1B;AACA;AACA,sCAAsC,8DAAkB;AACxD;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C,kBAAkB,0DAAQ;AAC1B;AACA;AACA,sCAAsC,iFAAsB;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C,kBAAkB,+DAAQ;AAC1B;AACA;AACA,sCAAsC,iFAAsB;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gEAAW;AACzE;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxKmD;AACS;AAClC;AACqC;AAC/D;AACA;AACA;AACO,yBAAyB,6DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wEAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,qEAAU,IAAI,g+BAAg+B;AAClhC;AACA;AACA;;;;;;;;;;;;;;ACrEA,iEAAe,qiBAAqiB;;;;;;;;;;;;;;ACApjB,iEAAe,ibAAib;;;;;;;;;;;;;;ACAhc,iEAAe,48EAA48E;;;;;;;;;;;;;;ACA39E,iEAAe,4uBAA4uB;;;;;;;;;;;;;;ACA3vB,iEAAe,8ZAA8Z;;;;;;;;;;;;;;ACA7a,iEAAe,unBAAunB;;;;;;;;;;;;;;ACAtoB,iEAAe,6VAA6V,8DAA8D,cAAc,SAAS,cAAc,yoJAAyoJ","sources":["webpack://xircuits/./lib/commands/CustomActionEvent.js","webpack://xircuits/./lib/commands/NodeActionCommands.js","webpack://xircuits/./lib/components/CustomDiagramState.js","webpack://xircuits/./lib/components/CustomNodeFactory.js","webpack://xircuits/./lib/components/CustomNodeModel.js","webpack://xircuits/./lib/components/CustomNodeWidget.js","webpack://xircuits/./lib/components/CustomPortModel.js","webpack://xircuits/./lib/components/DragNewLinkState.js","webpack://xircuits/./lib/components/RunSwitcher.js","webpack://xircuits/./lib/components/XircuitsApp.js","webpack://xircuits/./lib/components/xircuitBodyWidget.js","webpack://xircuits/./lib/context-menu/ComponentsPanel.js","webpack://xircuits/./lib/context-menu/NodeActionsPanel.js","webpack://xircuits/./lib/context-menu/TrayItemPanel.js","webpack://xircuits/./lib/context-menu/TrayPanel.js","webpack://xircuits/./lib/debugger/DebuggerWidget.js","webpack://xircuits/./lib/debugger/SidebarDebugger.js","webpack://xircuits/./lib/dialog/FormDialog.js","webpack://xircuits/./lib/dialog/RunDialog.js","webpack://xircuits/./lib/dialog/formDialogwidget.js","webpack://xircuits/./lib/helpers/DemoCanvasWidget.js","webpack://xircuits/./lib/index.js","webpack://xircuits/./lib/kernel/RunOutput.js","webpack://xircuits/./lib/kernel/panel.js","webpack://xircuits/./lib/log/LogLevelSwitcher.js","webpack://xircuits/./lib/log/LogPlugin.js","webpack://xircuits/./lib/server/handler.js","webpack://xircuits/./lib/tray_library/Component.js","webpack://xircuits/./lib/tray_library/GeneralComponentLib.js","webpack://xircuits/./lib/tray_library/Sidebar.js","webpack://xircuits/./lib/tray_library/TrayItemWidget.js","webpack://xircuits/./lib/tray_library/TrayWidget.js","webpack://xircuits/./lib/ui-components/icons.js","webpack://xircuits/./lib/xircuitFactory.js","webpack://xircuits/./lib/xircuitWidget.js","webpack://xircuits/./style/icons/breakpoint.svg","webpack://xircuits/./style/icons/component-library.svg","webpack://xircuits/./style/icons/debugger.svg","webpack://xircuits/./style/icons/lock.svg","webpack://xircuits/./style/icons/next.svg","webpack://xircuits/./style/icons/revert.svg","webpack://xircuits/./style/icons/xpress-logo.svg"],"sourcesContent":["import { Action, InputType } from '@projectstorm/react-canvas-core';\nimport { commandIDs } from '../components/xircuitBodyWidget';\nexport class CustomActionEvent extends Action {\n    constructor(options) {\n        super({\n            type: InputType.KEY_DOWN,\n            fire: (event) => {\n                const app = options.app;\n                const keyCode = event.event.key;\n                const ctrlKey = event.event.ctrlKey;\n                if (ctrlKey && keyCode === 'z')\n                    app.commands.execute(commandIDs.undo);\n                if (ctrlKey && keyCode === 'y')\n                    app.commands.execute(commandIDs.redo);\n                if (ctrlKey && keyCode === 's')\n                    app.commands.execute(commandIDs.saveXircuit);\n                // Comment this first until the TODO below is fix\n                // if (ctrlKey && keyCode === 'x') app.commands.execute(commandIDs.cutNode);\n                // if (ctrlKey && keyCode === 'c') app.commands.execute(commandIDs.copyNode);\n                // TODO: Fix this paste issue where it paste multiple times.\n                // if (ctrlKey && keyCode === 'v') app.commands.execute(commandIDs.pasteNode);\n                if (keyCode == 'Delete' || keyCode == 'Backspace')\n                    app.commands.execute(commandIDs.deleteNode);\n            }\n        });\n    }\n}\n//# sourceMappingURL=CustomActionEvent.js.map","import { commandIDs } from '../components/xircuitBodyWidget';\nimport * as _ from 'lodash';\nimport { CustomNodeModel } from '../components/CustomNodeModel';\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { copyIcon, cutIcon, pasteIcon, redoIcon, undoIcon } from '@jupyterlab/ui-components';\n/**\n * Add the commands for node actions.\n */\nexport function addNodeActionCommands(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    /**\n     * Whether there is an active xircuits.\n     */\n    function isEnabled() {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    //Add command to undo\n    commands.addCommand(commandIDs.undo, {\n        execute: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const model = widget.context.model.sharedModel;\n            model.undo();\n        },\n        label: trans.__('Undo'),\n        icon: undoIcon,\n        isEnabled: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const canUndo = widget.context.model.sharedModel.canUndo();\n            return canUndo !== null && canUndo !== void 0 ? canUndo : false;\n        }\n    });\n    //Add command to redo\n    commands.addCommand(commandIDs.redo, {\n        execute: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const model = widget.context.model.sharedModel;\n            model.redo();\n        },\n        label: trans.__('Redo'),\n        icon: redoIcon,\n        isEnabled: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const canRedo = widget.context.model.sharedModel.canRedo();\n            return canRedo !== null && canRedo !== void 0 ? canRedo : false;\n        }\n    });\n    //Add command to cut node\n    commands.addCommand(commandIDs.cutNode, {\n        execute: cutNode,\n        label: trans.__('Cut'),\n        icon: cutIcon,\n        isEnabled: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const selectedEntities = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            let isNodeSelected;\n            if (selectedEntities.length > 0) {\n                isNodeSelected = true;\n            }\n            return isNodeSelected !== null && isNodeSelected !== void 0 ? isNodeSelected : false;\n        }\n    });\n    //Add command to copy node\n    commands.addCommand(commandIDs.copyNode, {\n        execute: copyNode,\n        label: trans.__('Copy'),\n        icon: copyIcon,\n        isEnabled: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const selectedEntities = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            let isNodeSelected;\n            if (selectedEntities.length > 0) {\n                isNodeSelected = true;\n            }\n            return isNodeSelected !== null && isNodeSelected !== void 0 ? isNodeSelected : false;\n        }\n    });\n    //Add command to paste node\n    commands.addCommand(commandIDs.pasteNode, {\n        execute: pasteNode,\n        label: trans.__('Paste'),\n        icon: pasteIcon,\n        isEnabled: () => {\n            const clipboard = JSON.parse(localStorage.getItem('clipboard'));\n            let isClipboardFilled;\n            if (clipboard) {\n                isClipboardFilled = true;\n            }\n            return isClipboardFilled !== null && isClipboardFilled !== void 0 ? isClipboardFilled : false;\n        }\n    });\n    //Add command to edit literal component\n    commands.addCommand(commandIDs.editNode, {\n        execute: editLiteral,\n        label: trans.__('Edit'),\n        isEnabled: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const selectedEntities = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            let isNodeSelected;\n            _.forEach(selectedEntities, (model) => {\n                if (model.getOptions()[\"name\"].startsWith(\"Literal\")) {\n                    isNodeSelected = true;\n                }\n            });\n            return isNodeSelected !== null && isNodeSelected !== void 0 ? isNodeSelected : false;\n        }\n    });\n    //Add command to delete node\n    commands.addCommand(commandIDs.deleteNode, {\n        execute: deleteNode,\n        label: \"Delete\",\n        isEnabled: () => {\n            var _a;\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            const selectedEntities = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            let isNodeSelected;\n            if (selectedEntities.length > 0) {\n                isNodeSelected = true;\n            }\n            return isNodeSelected !== null && isNodeSelected !== void 0 ? isNodeSelected : false;\n        }\n    });\n    //Add command to add node\n    commands.addCommand(commandIDs.addNode, {\n        execute: (args) => {\n            var _a;\n            const node = args['node'];\n            const nodePosition = args['nodePosition'];\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            node.setPosition(nodePosition);\n            widget.xircuitsApp.getDiagramEngine().getModel().addNode(node);\n        },\n        label: trans.__('Add node')\n    });\n    //Add command to connect node given link\n    commands.addCommand(commandIDs.connectNode, {\n        execute: (args) => {\n            var _a;\n            const targetNode = args['targetNode'];\n            const sourceLink = args['sourceLink'];\n            const isParameterLink = args['isParameterLink'];\n            const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            // Create new link to connect to new node automatically\n            let newLink = new DefaultLinkModel();\n            let sourcePort;\n            let targetPort;\n            // Get source link node port\n            const linkPort = sourceLink.getSourcePort();\n            // When '▶' of sourcePort from inPort, connect to '▶' outPort of target node\n            if (linkPort.getOptions()['name'] == \"in-0\") {\n                sourcePort = targetNode.getPorts()[\"out-0\"];\n                targetPort = linkPort;\n            }\n            else if (isParameterLink) {\n                // When looseLink is connected to parameter node\n                const parameterNodeName = targetNode.getOutPorts()[0].getOptions()['name'];\n                sourcePort = targetNode.getPorts()[parameterNodeName];\n                targetPort = linkPort;\n            }\n            else {\n                // '▶' of sourcePort to '▶' of targetPort\n                sourcePort = linkPort;\n                targetPort = targetNode.getPorts()[\"in-0\"];\n            }\n            newLink.setSourcePort(sourcePort);\n            newLink.setTargetPort(targetPort);\n            widget.xircuitsApp.getDiagramEngine().getModel().addLink(newLink);\n        },\n        label: trans.__('Link node')\n    });\n    function cutNode() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            const engine = widget.xircuitsApp.getDiagramEngine();\n            const selected = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            const copies = selected.map(entity => entity.clone().serialize());\n            // TODO: Need to make this event working to be on the command manager, so the user can undo\n            // and redo it.\n            // engine.fireEvent(\n            //     {\n            //         nodes: selected,\n            //         links: selected.reduce(\n            //             (arr, node) => [...arr, ...node.getAllLinks()],\n            //             [],\n            //         ),\n            //     },\n            //     'entitiesRemoved',\n            // );\n            selected.forEach(node => node.remove());\n            engine.repaintCanvas();\n            localStorage.setItem('clipboard', JSON.stringify(copies));\n        }\n    }\n    function copyNode() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            const copies = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities().map(entity => entity.clone().serialize());\n            localStorage.setItem('clipboard', JSON.stringify(copies));\n        }\n    }\n    function pasteNode() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            const engine = widget.xircuitsApp.getDiagramEngine();\n            const model = widget.xircuitsApp.getDiagramEngine().getModel();\n            const clipboard = JSON.parse(localStorage.getItem('clipboard'));\n            if (!clipboard)\n                return;\n            model.clearSelection();\n            const models = clipboard.map(serialized => {\n                const modelInstance = model\n                    .getActiveNodeLayer()\n                    .getChildModelFactoryBank(engine)\n                    .getFactory(serialized.type)\n                    .generateModel({ initialConfig: serialized });\n                modelInstance.deserialize({\n                    engine: engine,\n                    data: serialized,\n                    registerModel: () => { },\n                    getModel: function (id) {\n                        throw new Error('Function not implemented.');\n                    }\n                });\n                return modelInstance;\n            });\n            models.forEach(modelInstance => {\n                const oldX = modelInstance.getX();\n                const oldY = modelInstance.getY();\n                modelInstance.setPosition(oldX + 10, oldY + 10);\n                model.addNode(modelInstance);\n                // Remove any empty/default node\n                if (modelInstance.getOptions()['type'] == 'default')\n                    model.removeNode(modelInstance);\n                modelInstance.setSelected(true);\n            });\n            localStorage.setItem('clipboard', JSON.stringify(models.map(modelInstance => modelInstance.clone().serialize())));\n            // TODO: Need to make this event working to be on the command manager, so the user can undo\n            // and redo it.\n            // engine.fireEvent({ nodes: models }, 'componentsAdded');\n            widget.xircuitsApp.getDiagramEngine().repaintCanvas();\n        }\n    }\n    function editLiteral() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            const selectedEntities = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            _.forEach(selectedEntities, (model) => {\n                if (!model.getOptions()[\"name\"].startsWith(\"Literal\")) {\n                    showDialog({\n                        title: 'Only Literal Node can be edited',\n                        buttons: [Dialog.warnButton({ label: 'OK' })]\n                    });\n                    return;\n                }\n                let node = null;\n                let links = widget.xircuitsApp.getDiagramEngine().getModel()[\"layers\"][0][\"models\"];\n                let oldValue = model.getPorts()[\"out-0\"].getOptions()[\"label\"];\n                // Prompt the user to enter new value\n                let theResponse = window.prompt('Enter New Value (Without Quotes):', oldValue);\n                if (theResponse == null || theResponse == \"\" || theResponse == oldValue) {\n                    // When Cancel is clicked or no input provided, just return\n                    return;\n                }\n                node = new CustomNodeModel({ name: model[\"name\"], color: model[\"color\"], extras: { \"type\": model[\"extras\"][\"type\"] } });\n                node.addOutPortEnhance(theResponse, 'out-0');\n                // Set new node to old node position\n                let position = model.getPosition();\n                node.setPosition(position);\n                widget.xircuitsApp.getDiagramEngine().getModel().addNode(node);\n                // Update the links\n                for (let linkID in links) {\n                    let link = links[linkID];\n                    if (link[\"sourcePort\"] && link[\"targetPort\"]) {\n                        let newLink = new DefaultLinkModel();\n                        let sourcePort = node.getPorts()[\"out-0\"];\n                        newLink.setSourcePort(sourcePort);\n                        // This to make sure the new link came from the same literal node as previous link\n                        let sourceLinkNodeId = link[\"sourcePort\"].getParent().getID();\n                        let sourceNodeId = model.getOptions()[\"id\"];\n                        if (sourceLinkNodeId == sourceNodeId) {\n                            newLink.setTargetPort(link[\"targetPort\"]);\n                        }\n                        widget.xircuitsApp.getDiagramEngine().getModel().addLink(newLink);\n                    }\n                }\n                // Remove old node\n                model.remove();\n            });\n        }\n    }\n    function deleteNode() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            const selectedEntities = widget.xircuitsApp.getDiagramEngine().getModel().getSelectedEntities();\n            _.forEach(selectedEntities, (model) => {\n                if (model.getOptions()[\"name\"] !== \"undefined\") {\n                    let modelName = model.getOptions()[\"name\"];\n                    const errorMsg = `${modelName} node cannot be deleted!`;\n                    if (modelName !== 'Start' && modelName !== 'Finish') {\n                        if (!model.isLocked()) {\n                            model.remove();\n                        }\n                        else {\n                            showDialog({\n                                title: 'Locked Node',\n                                body: errorMsg,\n                                buttons: [Dialog.warnButton({ label: 'OK' })]\n                            });\n                        }\n                    }\n                    else {\n                        showDialog({\n                            title: 'Undeletable Node',\n                            body: errorMsg,\n                            buttons: [Dialog.warnButton({ label: 'OK' })]\n                        });\n                    }\n                }\n            });\n            widget.xircuitsApp.getDiagramEngine().repaintCanvas();\n        }\n    }\n}\n//# sourceMappingURL=NodeActionCommands.js.map","import { SelectingState, State, Action, InputType, DragCanvasState } from '@projectstorm/react-canvas-core';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DragDiagramItemsState } from '@projectstorm/react-diagrams';\nimport { CustomPortModel } from './CustomPortModel';\nexport class CustomDiagramState extends State {\n    constructor() {\n        super({\n            name: 'default-diagrams'\n        });\n        this.childStates = [new SelectingState()];\n        this.dragCanvas = new DragCanvasState();\n        this.dragNewLink = new DragNewLinkState({ allowLooseLinks: false });\n        this.dragItems = new DragDiagramItemsState();\n        // determine what was clicked on\n        this.registerAction(new Action({\n            type: InputType.MOUSE_DOWN,\n            fire: (event) => {\n                const element = this.engine.getActionEventBus().getModelForEvent(event);\n                // the canvas was clicked on, transition to the dragging canvas state\n                if (!element) {\n                    this.transitionWithEvent(this.dragCanvas, event);\n                }\n                // initiate dragging a new link\n                else if (element instanceof CustomPortModel) {\n                    this.transitionWithEvent(this.dragNewLink, event);\n                }\n                // move the items (and potentially link points)\n                else {\n                    this.transitionWithEvent(this.dragItems, event);\n                }\n            }\n        }));\n    }\n}\n//# sourceMappingURL=CustomDiagramState.js.map","import * as React from 'react';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { CustomNodeWidget } from \"./CustomNodeWidget\";\nexport class CustomNodeFactory extends AbstractReactFactory {\n    constructor(app) {\n        super('custom-node');\n        this.app = app;\n    }\n    generateModel(initialConfig) {\n        return new CustomNodeModel();\n    }\n    generateReactWidget(event) {\n        return React.createElement(CustomNodeWidget, { engine: this.engine, node: event.model, app: this.app });\n    }\n}\n//# sourceMappingURL=CustomNodeFactory.js.map","import { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CustomPortModel } from \"./CustomPortModel\";\nexport class CustomNodeModel extends DefaultNodeModel {\n    constructor(options = {}) {\n        super(Object.assign(Object.assign({}, options), { type: 'custom-node' }));\n        this.color = options.color || 'red';\n        this.name = options.name || '';\n        this.extras = options.extras || {};\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { color: this.color, name: this.name, extras: this.extras });\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.color = event.data.color;\n        this.name = event.data.name;\n        this.extras = event.data.extras;\n    }\n    addOutPortEnhance(label, name, after = true, id) {\n        //check if portID is passed, if not SR will generate a new port ID\n        const p = (id) ? new CustomPortModel({ in: false, name: name, label: label, id: id }) :\n            new CustomPortModel({ in: false, name: name, label: label });\n        if (!after) {\n            this.portsOut.splice(0, 0, p);\n        }\n        return this.addPort(p);\n    }\n    addInPortEnhance(label, name, after = true, id) {\n        //check if portID is passed, if not SR will generate a new port ID\n        const p = (id) ? new CustomPortModel({ in: true, name: name, label: label, id: id }) :\n            new CustomPortModel({ in: true, name: name, label: label });\n        if (!after) {\n            this.portsOut.splice(0, 0, p);\n        }\n        return this.addPort(p);\n    }\n}\n//# sourceMappingURL=CustomNodeModel.js.map","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DefaultPortLabel } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\nimport \"react-image-gallery/styles/css/image-gallery.css\";\nimport ImageGallery from 'react-image-gallery';\nimport ToolTip from 'react-portal-tooltip';\nimport { Pagination } from \"krc-pagination\";\nimport 'krc-pagination/styles.css';\nimport Toggle from 'react-toggle';\nimport { commandIDs } from './xircuitBodyWidget';\nvar S;\n(function (S) {\n    S.Node = styled.div `\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? (p.borderColor == undefined ? 'rgb(0,192,255)' : p.borderColor) : 'black')};\n\t`;\n    S.Title = styled.div `\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n    S.TitleName = styled.div `\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n    S.Ports = styled.div `\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n    S.PortsContainer = styled.div `\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n    S.ImageGalleryContainer = styled.div `\n\t\twidth: 600px;\n\t\theight: 440px;\n\t`;\n})(S || (S = {}));\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nexport class CustomNodeWidget extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.generatePort = (port) => {\n            return React.createElement(DefaultPortLabel, { engine: this.props.engine, port: port, key: port.getID() });\n        };\n        this.state = {\n            isTooltipActive: false,\n            nodeDeletable: false,\n            imageGalleryItems: [\n                {\n                    original: 'https://picsum.photos/id/1018/1000/600/',\n                    thumbnail: 'https://picsum.photos/id/1018/250/150/'\n                },\n                {\n                    original: 'https://picsum.photos/id/1015/1000/600/',\n                    thumbnail: 'https://picsum.photos/id/1015/250/150/'\n                },\n                {\n                    original: 'https://picsum.photos/id/1019/1000/600/',\n                    thumbnail: 'https://picsum.photos/id/1019/250/150/'\n                },\n            ]\n        };\n        /**\n         * load more data from server when page changed\n         * @param e\n         */\n        this.onPageChanged = e => {\n            console.log(e.currentPage);\n            let imageGalleryItems = this.props.node.getOptions().extras[\"imageGalleryItems\"];\n            //update imageGalleryItems after data loaded from server\n        };\n    }\n    showTooltip() {\n        this.setState({ isTooltipActive: true });\n    }\n    hideTooltip() {\n        this.setState({ isTooltipActive: false });\n    }\n    handleClose() {\n        let allNodes = this.props.engine.getModel().getNodes();\n        delete allNodes[1].getOptions().extras[\"imageGalleryItems\"];\n        this.hideTooltip();\n    }\n    ;\n    handleDeletableNode(key, event) {\n        this.setState({\n            [key]: event.target.checked\n                ? this.props.node.setLocked(true)\n                : this.props.node.setLocked(false),\n        });\n    }\n    /**\n     * Allow to edit Literal Component\n     */\n    handleEditLiteral() {\n        if (!this.props.node.getOptions()[\"name\"].startsWith(\"Literal\")) {\n            return;\n        }\n        this.props.app.commands.execute(commandIDs.editNode);\n    }\n    render() {\n        if (this.props.node.getOptions().extras[\"tip\"] != undefined && this.props.node.getOptions().extras[\"tip\"] != \"\") {\n            return (React.createElement(S.Node, { onMouseEnter: this.showTooltip.bind(this), onMouseLeave: this.hideTooltip.bind(this), ref: (element) => { this.element = element; }, borderColor: this.props.node.getOptions().extras[\"borderColor\"], \"data-default-node-name\": this.props.node.getOptions().name, selected: this.props.node.isSelected(), background: this.props.node.getOptions().color },\n                React.createElement(ToolTip, { active: this.state.isTooltipActive, position: \"top\", arrow: \"center\", parent: this.element },\n                    React.createElement(\"p\", null, this.props.node.getOptions().extras[\"tip\"])),\n                React.createElement(S.Title, null,\n                    React.createElement(S.TitleName, null, this.props.node.getOptions().name),\n                    React.createElement(\"label\", null,\n                        React.createElement(Toggle, { className: 'lock', checked: this.props.node.isLocked(), onChange: this.handleDeletableNode.bind(this, 'nodeDeletable') }))),\n                React.createElement(S.Ports, null,\n                    React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)),\n                    React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort)))));\n        }\n        else if (this.props.node.getOptions().extras[\"imageGalleryItems\"] != undefined) {\n            return (React.createElement(S.Node, { onMouseEnter: this.showTooltip.bind(this), onMouseLeave: this.hideTooltip.bind(this), ref: (element) => { this.element = element; }, borderColor: this.props.node.getOptions().extras[\"borderColor\"], \"data-default-node-name\": this.props.node.getOptions().name, selected: this.props.node.isSelected(), background: this.props.node.getOptions().color },\n                React.createElement(ToolTip, { active: this.state.isTooltipActive, position: \"top\", arrow: \"center\", parent: this.element },\n                    React.createElement(\"button\", { type: \"button\", className: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"Close\", onClick: this.handleClose.bind(this) },\n                        React.createElement(\"span\", { \"aria-hidden\": \"true\" }, \"\\u00D7\")),\n                    React.createElement(S.ImageGalleryContainer, null,\n                        React.createElement(ImageGallery, { items: this.state.imageGalleryItems })),\n                    React.createElement(Pagination, { totalRecords: 100, pageLimit: 5, pageNeighbours: 1, onPageChanged: this.onPageChanged })),\n                React.createElement(S.Title, null,\n                    React.createElement(S.TitleName, null, this.props.node.getOptions().name)),\n                React.createElement(S.Ports, null,\n                    React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)),\n                    React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort)))));\n        }\n        else if (this.props.node.getOptions()[\"name\"] !== 'Start' && this.props.node.getOptions()[\"name\"] !== 'Finish') {\n            return (React.createElement(S.Node, { borderColor: this.props.node.getOptions().extras[\"borderColor\"], \"data-default-node-name\": this.props.node.getOptions().name, selected: this.props.node.isSelected(), background: this.props.node.getOptions().color, onDoubleClick: this.handleEditLiteral.bind(this) },\n                React.createElement(S.Title, null,\n                    React.createElement(S.TitleName, null, this.props.node.getOptions().name),\n                    React.createElement(\"label\", null,\n                        React.createElement(Toggle, { className: 'lock', checked: this.props.node.isLocked(), onChange: this.handleDeletableNode.bind(this, 'nodeDeletable') }))),\n                React.createElement(S.Ports, null,\n                    React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)),\n                    React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort)))));\n        }\n        return (React.createElement(S.Node, { borderColor: this.props.node.getOptions().extras[\"borderColor\"], \"data-default-node-name\": this.props.node.getOptions().name, selected: this.props.node.isSelected(), background: this.props.node.getOptions().color },\n            React.createElement(S.Title, null,\n                React.createElement(S.TitleName, null, this.props.node.getOptions().name)),\n            React.createElement(S.Ports, null,\n                React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)),\n                React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort)))));\n    }\n}\n//# sourceMappingURL=CustomNodeWidget.js.map","import { DefaultPortModel } from \"@projectstorm/react-diagrams\";\n/**\n * @author wenfeng xu\n * custom port model enable it can execute some rule\n * before it can link to another\n */\nexport class CustomPortModel extends DefaultPortModel {\n    constructor() {\n        super(...arguments);\n        /**\n         * the qty of ports of parameter node link to the same port in other node can\n         * not be more than one\n         * @param thisPort\n         * @param port\n         */\n        this.canParameterLinkToPort = (thisPort, port) => {\n            let thisNode = this.getNode();\n            let thisNodeModelType = thisNode.getOptions()[\"extras\"][\"type\"];\n            let thisName = port.getName();\n            if (this.isParameterNode(thisNodeModelType) == true) {\n                // if the port you are trying to link ready has other links\n                console.log(\"port name: \", thisName);\n                console.log(\"parameter port: \", port.getNode().getInPorts());\n                if (Object.keys(port.getLinks()).length > 0) {\n                    port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n                    port.getNode().getOptions().extras[\"tip\"] = \"Port has other link\";\n                    port.getNode().setSelected(true);\n                    return false;\n                }\n                if (!thisName.startsWith(\"parameter\")) {\n                    port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n                    port.getNode().getOptions().extras[\"tip\"] = \"Port linked is not parameter, please link a non parameter node to it\";\n                    port.getNode().setSelected(true);\n                    return false;\n                }\n                for (let i = 0; i < port.getNode().getInPorts().length; i++) {\n                    let thisLinkedID = port.getNode().getInPorts()[i].getOptions()[\"id\"];\n                    if (port.getID() == thisLinkedID)\n                        var index = i;\n                }\n                let thisLinkedName = port.getNode().getInPorts()[index].getOptions()[\"name\"];\n                let regEx = /\\-([^-]+)\\-/;\n                let result = thisLinkedName.match(regEx);\n                if (thisNodeModelType != result[1]) {\n                    port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n                    port.getNode().getOptions().extras[\"tip\"] = \"Port linked not correct data type (\" + result[1] + \")\";\n                    port.getNode().setSelected(true);\n                    //tested - add stuff\n                    return false;\n                }\n            }\n            else {\n                if (thisName.startsWith(\"parameter\")) {\n                    // Skip 'any' type check\n                    if (thisName.includes('any')) {\n                        return;\n                    }\n                    port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n                    port.getNode().getOptions().extras[\"tip\"] = \"Node link to this port must be a hyperparameter/literal\";\n                    port.getNode().setSelected(true);\n                    return false;\n                }\n                else if (Object.keys(port.getLinks()).length > 0) {\n                    port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n                    port.getNode().getOptions().extras[\"tip\"] = \"Port has link, please delete the current link to proceed\";\n                    port.getNode().setSelected(true);\n                    return false;\n                }\n                //return(!(thisName.startsWith(\"parameter\")) && !(Object.keys(port.getLinks()).length > 0));\n            }\n            port.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n            delete port.getNode().getOptions().extras[\"tip\"];\n            thisPort.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n            delete thisPort.getNode().getOptions().extras[\"tip\"];\n            return true;\n        };\n        this.isParameterNode = (nodeModelType) => {\n            return (nodeModelType === 'boolean' ||\n                nodeModelType === 'int' ||\n                nodeModelType === 'float' ||\n                nodeModelType === 'string' ||\n                nodeModelType === 'list' ||\n                nodeModelType === 'tuple' ||\n                nodeModelType === 'dict');\n        };\n        this.canTriangleLinkToTriangle = (thisPort, port) => {\n            let portLabel = port.getOptions()[\"label\"];\n            let thisPortLabel = this.options[\"label\"];\n            let thisNode = this.getNode();\n            let node = port.getNode();\n            let thisNodeModelType = thisNode.getOptions()[\"extras\"][\"type\"];\n            if (this.isParameterNode(thisNodeModelType)) {\n                port.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n                delete port.getNode().getOptions().extras[\"tip\"];\n                thisPort.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n                delete thisPort.getNode().getOptions().extras[\"tip\"];\n                return true;\n            }\n            if (!(thisPortLabel.endsWith('▶')) && portLabel != '▶') {\n                port.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n                delete port.getNode().getOptions().extras[\"tip\"];\n                thisPort.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n                delete thisPort.getNode().getOptions().extras[\"tip\"];\n                return true;\n            }\n            else {\n                return (portLabel === '▶' && thisPortLabel.endsWith('▶') && !(Object.keys(thisPort.getLinks()).length > 1));\n            }\n        };\n        this.getCircularReplacer = () => {\n            var seen = [];\n            return (key, value) => {\n                if (typeof value === \"object\" && value !== null) {\n                    if (seen.indexOf(value) >= 0) {\n                        return;\n                    }\n                    seen.push(value);\n                }\n                return value;\n            };\n        };\n        this.checkLinkDirection = (thisPort, port) => {\n            // currently only checking if it is an in or out port from its alignment\n            return ((thisPort.getOptions()[\"alignment\"] === \"right\") &&\n                (port.getOptions()[\"alignment\"] === \"left\"));\n        };\n        this.checkExecutionLoop = (thisPort, port) => {\n            let nodeIDList = [];\n            let sourceNode = thisPort.getParent();\n            let targetNode = port.getParent();\n            let nodeType = sourceNode.getOptions()[\"extras\"][\"type\"];\n            nodeIDList.push(sourceNode.getID(), targetNode.getID());\n            //console.log(\"sourceNode is:\", sourceNode.getOptions()[\"name\"], \"\\ntargetNode is:\", targetNode.getOptions()[\"name\"]);\n            while ((sourceNode != null) &&\n                nodeType != 'Start' &&\n                nodeType != 'boolean' &&\n                nodeType != 'int' &&\n                nodeType != 'float' &&\n                nodeType != 'string' &&\n                nodeType != 'list' &&\n                nodeType != 'tuple' &&\n                nodeType != 'dict') {\n                //console.log(\"Curent sourceNode:\", sourceNode.getOptions()[\"name\"]);\n                let inPorts = sourceNode.getInPorts();\n                // a node may have multiple ports. Iterate and find \"▶\"\n                for (let i = 0; i <= inPorts.length; i++) {\n                    let portLabel = inPorts[i].getOptions()[\"label\"];\n                    if (portLabel === \"▶\") {\n                        let portLink = inPorts[i].getLinks();\n                        //check if port has any links\n                        if (Object.keys(portLink).length !== 1) {\n                            if (Object.keys(portLink).length > 1) {\n                                console.log(\"zombie link detected\");\n                            }\n                            //console.log(\"sourceNode:\", sourceNode.getOptions()[\"name\"], \"has no in-links!\");\n                            sourceNode = null;\n                            break;\n                        }\n                        else {\n                            let portLinkKey = Object.keys(portLink).toString();\n                            sourceNode = portLink[portLinkKey].getSourcePort().getParent();\n                            nodeType = sourceNode.getOptions()[\"extras\"][\"type\"];\n                            if (nodeIDList.includes(sourceNode.getID())) {\n                                console.log(\"Loop detected at\", sourceNode.getOptions()[\"name\"]);\n                                return false;\n                            }\n                            nodeIDList.push(sourceNode.getID());\n                            break;\n                        }\n                    }\n                }\n            }\n            while ((targetNode != null) && targetNode.getOptions()[\"name\"] != \"Finish\") {\n                //console.log(\"Curent targetNode:\", targetNode.getOptions()[\"name\"]);\n                let outPorts = targetNode.getOutPorts();\n                // a node may have multiple ports. Iterate and find \"▶\"\n                for (let i = 0; i <= outPorts.length; i++) {\n                    let portLabel = outPorts[i].getOptions()[\"label\"];\n                    if (portLabel === \"▶\") {\n                        let portLink = outPorts[i].getLinks();\n                        //check if port has any links\n                        if (Object.keys(portLink).length !== 1) {\n                            if (Object.keys(portLink).length > 1) {\n                                console.log(\"zombie link detected\");\n                            }\n                            //console.log(\"targetNode:\", targetNode.getOptions()[\"name\"], \"has no out-links!\");\n                            targetNode = null;\n                            break;\n                        }\n                        else {\n                            let portLinkKey = Object.keys(portLink).toString();\n                            targetNode = portLink[portLinkKey].getTargetPort().getParent();\n                            if (nodeIDList.includes(targetNode.getID())) {\n                                console.log(\"Loop detected at\", targetNode.getOptions()[\"name\"]);\n                                return false;\n                            }\n                            nodeIDList.push(targetNode.getID());\n                            break;\n                        }\n                    }\n                }\n            }\n            return true;\n        };\n    }\n    canLinkToPort(port) {\n        if (port instanceof DefaultPortModel) {\n            if (this.options.in === port.getOptions().in) {\n                port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n                port.getNode().getOptions().extras[\"tip\"] = \"in not connected to in\";\n                port.getNode().setSelected(true);\n                console.log(\"in not connected to in\");\n                // tested\n                return false;\n            }\n        }\n        let canParameterLinkToPort = this.canParameterLinkToPort(this, port);\n        if (canParameterLinkToPort == false) {\n            console.log(\"Parameter Link To Port failed.\");\n            return false;\n        }\n        let canTriangleLinkToTriangle = this.canTriangleLinkToTriangle(this, port);\n        if (canTriangleLinkToTriangle == false) {\n            port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n            port.getNode().getOptions().extras[\"tip\"] = \"Triangle must be linked to triangle\";\n            port.getNode().setSelected(true);\n            console.log(\"triangle to triangle failed.\");\n            //tested\n            return false;\n        }\n        let checkLinkDirection = this.checkLinkDirection(this, port);\n        if (checkLinkDirection == false) {\n            port.getNode().getOptions().extras[\"borderColor\"] = \"red\";\n            port.getNode().getOptions().extras[\"tip\"] = \"Port should be created from outPort [right] to inPort [left]\";\n            port.getNode().setSelected(true);\n            console.log(\"Port should be created from outPort [right] to inPort [left]\");\n            return false;\n        }\n        let checkExecutionLoop = this.checkExecutionLoop(this, port);\n        if (checkExecutionLoop == false) {\n            //console.log(\"Loop detected.\");\n            return false;\n        }\n        port.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n        delete port.getNode().getOptions().extras[\"tip\"];\n        this.getNode().getOptions().extras[\"borderColor\"] = \"rgb(0,192,255)\";\n        delete this.getNode().getOptions().extras[\"tip\"];\n        return true;\n    }\n}\n//# sourceMappingURL=CustomPortModel.js.map","import { AbstractDisplacementState, Action, InputType } from '@projectstorm/react-canvas-core';\nimport { CustomPortModel } from './CustomPortModel';\nexport class DragNewLinkState extends AbstractDisplacementState {\n    constructor(options = {}) {\n        super({ name: 'drag-new-link' });\n        this.fireEvent = () => {\n            //@ts-ignore\n            this.engine.fireEvent({ link: this.link }, 'droppedLink');\n        };\n        this.config = Object.assign({ allowLooseLinks: true, allowLinksFromLockedPorts: false }, options);\n        this.registerAction(new Action({\n            type: InputType.MOUSE_DOWN,\n            fire: (event) => {\n                this.port = this.engine.getMouseElement(event.event);\n                if (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n                    this.eject();\n                    return;\n                }\n                this.link = this.port.createLinkModel();\n                // if no link is given, just eject the state\n                if (!this.link) {\n                    this.eject();\n                    return;\n                }\n                this.link.setSelected(true);\n                this.link.setSourcePort(this.port);\n                this.engine.getModel().addLink(this.link);\n                this.port.reportPosition();\n            }\n        }));\n        this.registerAction(new Action({\n            type: InputType.MOUSE_UP,\n            fire: (event) => {\n                const model = this.engine.getMouseElement(event.event);\n                // check to see if we connected to a new port\n                if (model instanceof CustomPortModel) {\n                    if (this.port.canLinkToPort(model)) {\n                        this.link.setTargetPort(model);\n                        model.reportPosition();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                    else {\n                        this.link.remove();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                }\n                if (!this.config.allowLooseLinks) {\n                    this.fireEvent();\n                    this.link.remove();\n                    this.engine.repaintCanvas();\n                }\n            }\n        }));\n    }\n    /**\n     * Calculates the link's far-end point position on mouse move.\n     * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n     * as the possible engine offset\n     */\n    fireMouseMoved(event) {\n        const portPos = this.port.getPosition();\n        const zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n        const engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n        const engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n        const initialXRelative = this.initialXRelative / zoomLevelPercentage;\n        const initialYRelative = this.initialYRelative / zoomLevelPercentage;\n        const linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n        const linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n        this.link.getLastPoint().setPosition(linkNextX, linkNextY);\n        this.engine.repaintCanvas();\n    }\n}\n//# sourceMappingURL=DragNewLinkState.js.map","import { ReactWidget, UseSignal } from '@jupyterlab/apputils';\nimport { HTMLSelect } from '@jupyterlab/ui-components';\nimport React from 'react';\n/**\n * A toolbar widget that switches output types.\n */\nexport class RunSwitcher extends ReactWidget {\n    /**\n     * Construct a new output type switcher.\n     */\n    constructor(widget) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         */\n        this.handleChange = (event) => {\n            let runType = event.target.value;\n            this._output.runTypeXircuitSignal.emit({ runType });\n            this.update();\n        };\n        this._output = widget;\n    }\n    render() {\n        let value;\n        return (React.createElement(UseSignal, { signal: this._output.runTypeXircuitSignal }, (_, args) => {\n            if (args !== undefined) {\n                let runType = args[\"runType\"];\n                return (React.createElement(HTMLSelect, { onChange: this.handleChange, value: runType, \"aria-label\": 'Run type', title: 'Select the run type' },\n                    React.createElement(\"option\", { value: \"run\" }, \"Run\"),\n                    React.createElement(\"option\", { value: \"run-dont-compile\" }, \"Run w/o Compile\"),\n                    React.createElement(\"option\", { value: \"spark-submit\" }, \"Spark Submit\")));\n            }\n            // Only for rendering the first time\n            return (React.createElement(HTMLSelect, { onChange: this.handleChange, value: value, \"aria-label\": 'Run type', title: 'Select the run type' },\n                React.createElement(\"option\", { value: \"run\" }, \"Run\"),\n                React.createElement(\"option\", { value: \"run-dont-compile\" }, \"Run w/o Compile\"),\n                React.createElement(\"option\", { value: \"spark-submit\" }, \"Spark Submit\")));\n        }));\n    }\n}\n//# sourceMappingURL=RunSwitcher.js.map","import * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from \"./CustomNodeFactory\";\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { ZoomCanvasAction } from '@projectstorm/react-canvas-core';\nimport { CustomActionEvent } from '../commands/CustomActionEvent';\nimport { CustomDiagramState } from './CustomDiagramState';\nexport class XircuitsApplication {\n    constructor(app) {\n        this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false, registerDefaultDeleteItemsAction: false });\n        this.activeModel = new SRD.DiagramModel();\n        this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory(app));\n        this.diagramEngine.getActionEventBus().registerAction(new ZoomCanvasAction({ inverseZoom: true }));\n        this.diagramEngine.getActionEventBus().registerAction(new CustomActionEvent({ app }));\n        this.diagramEngine.getStateMachine().pushState(new CustomDiagramState());\n        let startNode = new CustomNodeModel({ name: 'Start', color: 'rgb(255,102,102)', extras: { \"type\": \"Start\" } });\n        startNode.addOutPortEnhance('▶', 'out-0');\n        startNode.setPosition(100, 100);\n        let finishedNode = new CustomNodeModel({ name: 'Finish', color: 'rgb(255,102,102)', extras: { \"type\": \"Finish\" } });\n        finishedNode.addInPortEnhance('▶', 'in-0');\n        finishedNode.setPosition(700, 100);\n        this.activeModel.addAll(startNode, finishedNode);\n        this.diagramEngine.setModel(this.activeModel);\n    }\n    getActiveDiagram() {\n        return this.activeModel;\n    }\n    getDiagramEngine() {\n        return this.diagramEngine;\n    }\n}\n//# sourceMappingURL=XircuitsApp.js.map","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../helpers/DemoCanvasWidget';\nimport { DiagramModel, DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport styled from '@emotion/styled';\nimport { CustomNodeModel } from \"./CustomNodeModel\";\nimport { Log } from '../log/LogPlugin';\nimport ComponentList from '../tray_library/Component';\nimport { formDialogWidget } from '../dialog/formDialogwidget';\nimport { showFormDialog } from '../dialog/FormDialog';\nimport { RunDialog } from '../dialog/RunDialog';\nimport 'rc-dialog/assets/bootstrap.css';\nimport { requestAPI } from '../server/handler';\nimport ComponentsPanel from '../context-menu/ComponentsPanel';\nimport { GeneralComponentLibrary } from '../tray_library/GeneralComponentLib';\nimport { NodeActionsPanel } from '../context-menu/NodeActionsPanel';\nexport const Body = styled.div `\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t\theight: 800px;\n\t`;\nexport const Header = styled.div `\n\t\tdisplay: flex;\n\t\tbackground: rgb(30, 30, 30);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 10px;\n\t\talign-items: center;\n\t`;\nexport const Content = styled.div `\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\nexport const Layer = styled.div `\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\nexport const commandIDs = {\n    openXircuitEditor: 'Xircuit-editor:open',\n    openDocManager: 'docmanager:open',\n    newDocManager: 'docmanager:new-untitled',\n    saveDocManager: 'docmanager:save',\n    reloadDocManager: 'docmanager:reload',\n    revertDocManager: 'docmanager:restore-checkpoint',\n    createNewXircuit: 'Xircuit-editor:create-new',\n    saveXircuit: 'Xircuit-editor:save-node',\n    compileXircuit: 'Xircuit-editor:compile-node',\n    runXircuit: 'Xircuit-editor:run-node',\n    debugXircuit: 'Xircuit-editor:debug-node',\n    lockXircuit: 'Xircuit-editor:lock-node',\n    undo: 'Xircuit-editor:undo',\n    redo: 'Xircuit-editor:redo',\n    cutNode: 'Xircuit-editor:cut-node',\n    copyNode: 'Xircuit-editor:copy-node',\n    pasteNode: 'Xircuit-editor:paste-node',\n    editNode: 'Xircuit-editor:edit-node',\n    deleteNode: 'Xircuit-editor:delete-node',\n    addNode: 'Xircuit-editor:add-node',\n    connectNode: 'Xircuit-editor:connect-node',\n    createArbitraryFile: 'Xircuit-editor:create-arbitrary-file',\n    openDebugger: 'Xircuit-debugger:open',\n    breakpointXircuit: 'Xircuit-editor:breakpoint-node',\n    nextNode: 'Xircuit-editor:next-node',\n    testXircuit: 'Xircuit-editor:test-node',\n    outputMsg: 'Xircuit-log:logOutputMessage',\n    executeToOutputPanel: 'Xircuit-output-panel:execute'\n};\n//create your forceUpdate hook\nfunction useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\nexport const BodyWidget = ({ context, xircuitsApp, app, shell, commands, widgetId, serviceManager, saveXircuitSignal, compileXircuitSignal, runXircuitSignal, runTypeXircuitSignal, debugXircuitSignal, lockNodeSignal, breakpointXircuitSignal, currentNodeSignal, testXircuitSignal, continueDebugSignal, nextNodeDebugSignal, stepOverDebugSignal, terminateDebugSignal, stepInDebugSignal, stepOutDebugSignal, evaluateDebugSignal, debugModeSignal }) => {\n    const [prevState, updateState] = useState(0);\n    const forceUpdate = useCallback(() => updateState(prevState => prevState + 1), []);\n    const [saved, setSaved] = useState(false);\n    const [compiled, setCompiled] = useState(false);\n    const [initialize, setInitialize] = useState(true);\n    const [nodesColor, setNodesColor] = useState([]);\n    const [displaySavedAndCompiled, setDisplaySavedAndCompiled] = useState(false);\n    const [displayDebug, setDisplayDebug] = useState(false);\n    const [displayHyperparameter, setDisplayHyperparameter] = useState(false);\n    const [sparkSubmitNodes, setSparkSubmitkNodes] = useState(\"\");\n    const [stringNodes, setStringNodes] = useState([\"experiment name\"]);\n    const [intNodes, setIntNodes] = useState([]);\n    const [floatNodes, setFloatNodes] = useState([]);\n    const [boolNodes, setBoolNodes] = useState([]);\n    const [stringNodesValue, setStringNodesValue] = useState([\"\"]);\n    const [intNodesValue, setIntNodesValue] = useState([0]);\n    const [floatNodesValue, setFloatNodesValue] = useState([0.00]);\n    const [boolNodesValue, setBoolNodesValue] = useState([false]);\n    const [componentList, setComponentList] = useState([]);\n    const [runOnce, setRunOnce] = useState(false);\n    const [displayRcDialog, setDisplayRcDialog] = useState(false);\n    const [disableRcDialog, setDisableRcDialog] = useState(false);\n    const [debugMode, setDebugMode] = useState(false);\n    const [inDebugMode, setInDebugMode] = useState(false);\n    const [currentIndex, setCurrentIndex] = useState(-1);\n    const [runType, setRunType] = useState(\"run\");\n    const [addedArgSparkSubmit, setAddedArgSparkSubmit] = useState(\"\");\n    const xircuitLogger = new Log(app);\n    const contextRef = useRef(context);\n    const notInitialRender = useRef(false);\n    const onChange = useCallback(() => {\n        if (contextRef.current.isReady) {\n            let currentModel = xircuitsApp.getDiagramEngine().getModel().serialize();\n            contextRef.current.model.fromString(JSON.stringify(currentModel, null, 4));\n            setSaved(false);\n        }\n    }, []);\n    const customDeserializeModel = (modelContext, diagramEngine) => {\n        if (modelContext == null) {\n            // When context empty, just return\n            return;\n        }\n        let tempModel = new DiagramModel();\n        let links = modelContext[\"layers\"][0][\"models\"];\n        let nodes = modelContext[\"layers\"][1][\"models\"];\n        let offsetX = modelContext[\"offsetX\"];\n        let offsetY = modelContext[\"offsetY\"];\n        let zoom = modelContext[\"zoom\"];\n        for (let nodeID in nodes) {\n            let node = nodes[nodeID];\n            let newNode = new CustomNodeModel({\n                id: node.id, type: node.type, name: node.name, locked: node.locked,\n                color: node.color, extras: node.extras\n            });\n            newNode.setPosition(node.x, node.y);\n            for (let portID in node.ports) {\n                let port = node.ports[portID];\n                if (port.alignment == \"right\")\n                    newNode.addOutPortEnhance(port.label, port.name, true, port.id);\n                if (port.alignment == \"left\")\n                    newNode.addInPortEnhance(port.label, port.name, true, port.id);\n            }\n            tempModel.addAll(newNode);\n            diagramEngine.setModel(tempModel);\n        }\n        for (let linkID in links) {\n            let link = links[linkID];\n            if (link.sourcePort && link.targetPort) {\n                let newLink = new DefaultLinkModel();\n                let sourcePort = tempModel.getNode(link.source).getPortFromID(link.sourcePort);\n                newLink.setSourcePort(sourcePort);\n                let targetPort = tempModel.getNode(link.target).getPortFromID(link.targetPort);\n                newLink.setTargetPort(targetPort);\n                tempModel.addAll(newLink);\n                diagramEngine.setModel(tempModel);\n            }\n        }\n        tempModel.registerListener({\n            // Detect changes when node is dropped or deleted\n            nodesUpdated: () => {\n                // Add delay for links to disappear \n                const timeout = setTimeout(() => {\n                    onChange();\n                    setInitialize(false);\n                }, 10);\n                return () => clearTimeout(timeout);\n            },\n            linksUpdated: function (event) {\n                event.link.registerListener({\n                    /**\n                     * sourcePortChanged\n                     * Detect changes when link is connected\n                     */\n                    sourcePortChanged: e => {\n                        onChange();\n                    },\n                    /**\n                     * targetPortChanged\n                     * Detect changes when link is connected\n                     */\n                    targetPortChanged: e => {\n                        onChange();\n                    },\n                    /**\n                     * entityRemoved\n                     * Detect changes when new link is removed\n                     */\n                    entityRemoved: e => {\n                        onChange();\n                    }\n                });\n            }\n        });\n        tempModel.setOffsetX(offsetX);\n        tempModel.setOffsetY(offsetY);\n        tempModel.setZoomLevel(zoom);\n        return tempModel;\n    };\n    useEffect(() => {\n        const currentContext = contextRef.current;\n        const changeHandler = () => {\n            const modelStr = currentContext.model.toString();\n            if (!isJSON(modelStr)) {\n                // When context can't be parsed, just return\n                return;\n            }\n            try {\n                if (notInitialRender.current) {\n                    const model = currentContext.model.toJSON();\n                    let deserializedModel = customDeserializeModel(model, xircuitsApp.getDiagramEngine());\n                    xircuitsApp.getDiagramEngine().setModel(deserializedModel);\n                }\n                else {\n                    // Clear undo history when first time rendering\n                    notInitialRender.current = true;\n                    currentContext.model.sharedModel.clearUndoHistory();\n                    // Register engine listener just once\n                    xircuitsApp.getDiagramEngine().registerListener({\n                        droppedLink: event => showComponentPanelFromLink(event),\n                        hidePanel: () => hidePanel()\n                    });\n                }\n            }\n            catch (e) {\n                showErrorMessage('Error', React.createElement(\"pre\", null, e));\n            }\n        };\n        currentContext.ready.then(changeHandler);\n        currentContext.model.contentChanged.connect(changeHandler);\n        return () => {\n            currentContext.model.contentChanged.disconnect(changeHandler);\n        };\n    }, []);\n    const isJSON = (str) => {\n        try {\n            return (JSON.parse(str) && !!str);\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    const getBindingIndexById = (nodeModels, id) => {\n        for (let i = 0; i < nodeModels.length; i++) {\n            let nodeModel = nodeModels[i];\n            if (nodeModel.getID() === id) {\n                return i;\n            }\n        }\n        return null;\n    };\n    const getTargetNodeModelId = (linkModels, sourceId) => {\n        for (let i = 0; i < linkModels.length; i++) {\n            let linkModel = linkModels[i];\n            if (linkModel.getSourcePort().getNode().getID() === sourceId && linkModel.getTargetPort().getOptions()[\"label\"] == '▶') {\n                return linkModel.getTargetPort().getNode().getID();\n            }\n        }\n        return null;\n    };\n    const getNodeModelByName = (nodeModels, name) => {\n        for (let i = 0; i < nodeModels.length; i++) {\n            let nodeModel = nodeModels[i];\n            if (nodeModel.getOptions()[\"name\"] === name) {\n                return nodeModel;\n            }\n        }\n        return null;\n    };\n    const getNodeModelById = (nodeModels, id) => {\n        for (let i = 0; i < nodeModels.length; i++) {\n            let nodeModel = nodeModels[i];\n            if (nodeModel.getID() === id) {\n                return nodeModel;\n            }\n        }\n        return null;\n    };\n    const getAllNodesFromStartToFinish = () => {\n        let model = xircuitsApp.getDiagramEngine().getModel();\n        let nodeModels = model.getNodes();\n        let startNodeModel = getNodeModelByName(nodeModels, 'Start');\n        if (startNodeModel == null) {\n            startNodeModel = getNodeModelByName(nodeModels, '🔴Start');\n        }\n        if (startNodeModel) {\n            let sourceNodeModelId = startNodeModel.getID();\n            let retNodeModels = [];\n            retNodeModels.push(startNodeModel);\n            while (getTargetNodeModelId(model.getLinks(), sourceNodeModelId) != null) {\n                let getTargetNode = getTargetNodeModelId(model.getLinks(), sourceNodeModelId);\n                if (getTargetNode) {\n                    let nodeModel = getNodeModelById(nodeModels, getTargetNode);\n                    if (nodeModel) {\n                        sourceNodeModelId = nodeModel.getID();\n                        retNodeModels.push(nodeModel);\n                    }\n                }\n            }\n            return retNodeModels;\n        }\n        return null;\n    };\n    const getPythonCompiler = (debuggerMode) => {\n        let componentDB = new Map(componentList.map(x => [x[\"task\"], x]));\n        let component_task = componentList.map(x => x[\"task\"]);\n        let model = xircuitsApp.getDiagramEngine().getModel();\n        let nodeModels = model.getNodes();\n        let startNodeModel = getNodeModelByName(nodeModels, 'Start');\n        let pythonCode = 'from argparse import ArgumentParser\\n';\n        pythonCode += 'from datetime import datetime\\n';\n        pythonCode += 'from time import sleep\\n';\n        if (debuggerMode == true) {\n            pythonCode += 'import json, os, signal\\n';\n            pythonCode += 'from flask import Flask, jsonify, request\\n';\n            pythonCode += 'from threading import Thread\\n';\n        }\n        let uniqueComponents = {};\n        let allNodes = getAllNodesFromStartToFinish();\n        for (let node in allNodes) {\n            let nodeType = allNodes[node][\"extras\"][\"type\"];\n            let componentName = allNodes[node][\"name\"];\n            componentName = componentName.replace(/\\s+/g, \"\");\n            if (nodeType == 'Start' ||\n                nodeType == 'Finish' ||\n                nodeType === 'boolean' ||\n                nodeType === 'int' ||\n                nodeType === 'float' ||\n                nodeType === 'string') { }\n            else {\n                uniqueComponents[componentName] = componentName;\n            }\n        }\n        let python_paths = new Set();\n        for (let key in uniqueComponents) {\n            let component = componentDB.get(key) || { \"python_path\": null };\n            if (component[\"python_path\"] != null)\n                python_paths.add(component[\"python_path\"]);\n        }\n        if (python_paths.size > 0) {\n            pythonCode += \"import sys\\n\";\n        }\n        python_paths.forEach((path) => {\n            pythonCode += `sys.path.append(\"${path.replace(/\\\\/gi, \"\\\\\\\\\")}\")\\n`;\n        });\n        for (let componentName in uniqueComponents) {\n            let component_exist = component_task.indexOf(componentName);\n            let current_node;\n            let package_name = \"components\";\n            if (component_exist != -1) {\n                current_node = componentList[component_exist];\n                package_name = current_node[\"package_name\"];\n            }\n            pythonCode += \"from \" + package_name + \" import \" + componentName + \"\\n\";\n        }\n        if (debuggerMode == true) {\n            pythonCode += \"\\napp = Flask(__name__)\\n\";\n            pythonCode += \"input_data = []\\n\";\n            pythonCode += \"continue_input_data = []\\n\";\n            pythonCode += \"inarg_output_data = []\\n\";\n            pythonCode += \"outarg_output_data = []\\n\";\n            pythonCode += \"is_done_list = []\\n\";\n        }\n        pythonCode += \"\\ndef main(args):\\n\\n\";\n        pythonCode += '    ' + 'ctx = {}\\n';\n        pythonCode += '    ' + \"ctx['args'] = args\\n\\n\";\n        for (let i = 0; i < allNodes.length; i++) {\n            let nodeType = allNodes[i][\"extras\"][\"type\"];\n            if (nodeType == 'Start' ||\n                nodeType == 'Finish' ||\n                nodeType === 'boolean' ||\n                nodeType === 'int' ||\n                nodeType === 'float' ||\n                nodeType === 'string') {\n            }\n            else {\n                let bindingName = 'c_' + i;\n                let componentName = allNodes[i][\"name\"];\n                componentName = componentName.replace(/\\s+/g, \"\");\n                pythonCode += '    ' + bindingName + ' = ' + componentName + '()\\n';\n            }\n        }\n        pythonCode += '\\n';\n        if (startNodeModel) {\n            let sourceNodeModelId = startNodeModel.getID();\n            let j = 0;\n            while (getTargetNodeModelId(model.getLinks(), sourceNodeModelId) != null) {\n                let targetNodeId = getTargetNodeModelId(model.getLinks(), sourceNodeModelId);\n                if (targetNodeId) {\n                    let bindingName = 'c_' + ++j;\n                    let currentNodeModel = getNodeModelById(nodeModels, targetNodeId);\n                    let allPort = currentNodeModel.getPorts();\n                    for (let port in allPort) {\n                        let portIn = allPort[port].getOptions().alignment == 'left';\n                        if (portIn) {\n                            let label = allPort[port].getOptions()[\"label\"];\n                            label = label.replace(/\\s+/g, \"_\");\n                            label = label.toLowerCase();\n                            if (label.startsWith(\"★\")) {\n                                const newLabel = label.split(\"★\")[1];\n                                label = newLabel;\n                            }\n                            if (label == '▶') {\n                            }\n                            else {\n                                let portLinks = allPort[port].getLinks();\n                                for (let portLink in portLinks) {\n                                    let sourceNodeName = portLinks[portLink].getSourcePort().getNode()[\"name\"];\n                                    let sourceNodeType = portLinks[portLink].getSourcePort().getNode().getOptions()[\"extras\"][\"type\"];\n                                    let sourceNodeId = portLinks[portLink].getSourcePort().getNode().getOptions()[\"id\"];\n                                    let sourcePortLabel = portLinks[portLink].getSourcePort().getOptions()[\"label\"];\n                                    let k = getBindingIndexById(allNodes, sourceNodeId);\n                                    let preBindingName = 'c_' + k;\n                                    //Get the id of the node of the connected link\n                                    let linkSourceNodeId = allPort[port][\"links\"][portLink][\"sourcePort\"][\"parent\"][\"options\"][\"id\"];\n                                    if (port.startsWith(\"parameter\")) {\n                                        if (sourceNodeName.startsWith(\"Literal\")) {\n                                            if (sourceNodeType == 'string') {\n                                                pythonCode += '    ' + bindingName + '.' + label + '.value = ' + \"'\" + sourcePortLabel + \"'\\n\";\n                                            }\n                                            else if (sourceNodeType == 'list') {\n                                                pythonCode += '    ' + bindingName + '.' + label + '.value = ' + \"[\" + sourcePortLabel + \"]\" + \"\\n\";\n                                            }\n                                            else if (sourceNodeType == 'tuple') {\n                                                pythonCode += '    ' + bindingName + '.' + label + '.value = ' + \"(\" + sourcePortLabel + \")\" + \"\\n\";\n                                            }\n                                            else if (sourceNodeType == 'dict') {\n                                                pythonCode += '    ' + bindingName + '.' + label + '.value = ' + \"{\" + sourcePortLabel + \"}\" + \"\\n\";\n                                            }\n                                            else {\n                                                pythonCode += '    ' + bindingName + '.' + label + '.value = ' + sourcePortLabel + \"\\n\";\n                                            }\n                                            // Make sure the node id match between connected link and source node\n                                            // Skip Hyperparameter Components\n                                        }\n                                        else if (linkSourceNodeId == sourceNodeId && !sourceNodeName.startsWith(\"Hyperparameter\")) {\n                                            pythonCode += '    ' + bindingName + '.' + label + ' = ' + preBindingName + '.' + sourcePortLabel + '\\n';\n                                        }\n                                        else {\n                                            sourcePortLabel = sourcePortLabel.replace(/\\s+/g, \"_\");\n                                            sourcePortLabel = sourcePortLabel.toLowerCase();\n                                            sourceNodeName = sourceNodeName.split(\": \");\n                                            let paramName = sourceNodeName[sourceNodeName.length - 1];\n                                            paramName = paramName.replace(/\\s+/g, \"_\");\n                                            paramName = paramName.toLowerCase();\n                                            pythonCode += '    ' + bindingName + '.' + label + '.value = args.' + paramName + '\\n';\n                                        }\n                                    }\n                                    else {\n                                        pythonCode += '    ' + bindingName + '.' + label + ' = ' + preBindingName + '.' + sourcePortLabel + '\\n';\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                        }\n                    }\n                    if (currentNodeModel) {\n                        sourceNodeModelId = currentNodeModel.getID();\n                    }\n                }\n            }\n        }\n        pythonCode += '\\n';\n        for (let i = 0; i < allNodes.length; i++) {\n            let nodeType = allNodes[i][\"extras\"][\"type\"];\n            let bindingName = 'c_' + i;\n            let nextBindingName = 'c_' + (i + 1);\n            if (nodeType == 'Start' || nodeType == 'Finish') {\n            }\n            else if (i == (allNodes.length - 2)) {\n                pythonCode += '    ' + bindingName + '.next = ' + 'None\\n';\n            }\n            else {\n                pythonCode += '    ' + bindingName + '.next = ' + nextBindingName + '\\n';\n            }\n        }\n        if (debuggerMode == true)\n            pythonCode += '    ' + 'debug_mode = args.debug_mode\\n';\n        if (allNodes.length > 2) {\n            pythonCode += '\\n';\n            pythonCode += '    ' + 'next_component = c_1\\n';\n            pythonCode += '    ' + 'while next_component:\\n';\n            if (debuggerMode == true) {\n                pythonCode += '        ' + 'if debug_mode:\\n';\n                pythonCode += '            ' + 'if len(continue_input_data) > 0 and continue_input_data[-1] == \\'continue\\':\\n';\n                pythonCode += '                ' + 'vars_dict = vars(next_component)\\n';\n                pythonCode += '                ' + 'new_dict = {}\\n';\n                pythonCode += '                ' + 'for i in vars_dict:\\n';\n                pythonCode += '                    ' + 'if not i in [\\'next\\', \\'done\\']:\\n';\n                pythonCode += '                        ' + 'new_dict[i] = next_component.__getattribute__(i).value\\n';\n                pythonCode += '                        ' + 'if \\'InArg\\' in str(vars_dict[i]):\\n';\n                pythonCode += '                            ' + 'inarg_output_data.append(str(i) + \\': \\' + str(next_component.__getattribute__(i).value))\\n';\n                pythonCode += '                        ' + 'if \\'OutArg\\' in str(vars_dict[i]):\\n';\n                pythonCode += '                            ' + 'outarg_output_data.append(str(i) + \\': \\' + str(next_component.__getattribute__(i).value))\\n';\n                pythonCode += '                ' + 'continue_input_data.clear()\\n';\n                pythonCode += '\\n';\n                pythonCode += '            ' + 'if len(input_data) > 0 and input_data[-1] == \\'run\\':\\n';\n                pythonCode += '                ' + 'is_done, next_component = next_component.do(ctx)\\n';\n                pythonCode += '                ' + 'input_data.clear()\\n';\n                pythonCode += '                ' + 'is_done_list.append(is_done)\\n';\n                pythonCode += '\\n';\n                pythonCode += '            ' + 'if len(input_data) > 0 and input_data[-1] == \\'skip\\':\\n';\n                pythonCode += '                ' + 'is_done, next_component = next_component.do(ctx)\\n';\n                pythonCode += '\\n';\n                pythonCode += '        ' + 'else:\\n';\n                pythonCode += '            ' + 'is_done, next_component = next_component.do(ctx)\\n';\n                pythonCode += '\\n';\n                pythonCode += '@app.route(\\'/terminate\\')\\n';\n                pythonCode += 'def shutdown():\\n';\n                pythonCode += '    ' + 'os.kill(os.getpid(), signal.SIGINT)\\n';\n                pythonCode += '    ' + 'return jsonify({ \"success\": True, \"message\": \"Server is shutting down...\" })\\n\\n';\n                pythonCode += '@app.route(\\'/run\\')\\n';\n                pythonCode += 'def next_node(input_data=input_data):\\n';\n                pythonCode += '    ' + 'input_data.append(\"run\")\\n';\n                pythonCode += '    ' + 'return jsonify({ \"success\": True, \"message\": \"Run is executed\" })\\n\\n';\n                pythonCode += '@app.route(\\'/execute\\')\\n';\n                pythonCode += 'def get_execution_output():\\n';\n                pythonCode += '    ' + 'return str(is_done_list)\\n\\n';\n                pythonCode += '@app.route(\\'/clear_execution\\')\\n';\n                pythonCode += 'def clear_execution_output():\\n';\n                pythonCode += '    ' + 'is_done_list.clear()\\n';\n                pythonCode += '    ' + 'return jsonify({ \"success\": True, \"message\": \"Clearing execution\" })\\n\\n';\n                pythonCode += '@app.route(\\'/continue\\')\\n';\n                pythonCode += 'def continue_node(continue_input_data=continue_input_data):\\n';\n                pythonCode += '    ' + 'continue_input_data.append(\"continue\")\\n';\n                pythonCode += '    ' + 'return jsonify({ \"success\": True, \"message\": \"Continue is executed\" })\\n\\n';\n                pythonCode += '@app.route(\\'/clear\\')\\n';\n                pythonCode += 'def clear_node():\\n';\n                pythonCode += '    ' + 'inarg_output_data.clear()\\n';\n                pythonCode += '    ' + 'outarg_output_data.clear()\\n';\n                pythonCode += '    ' + 'return jsonify({ \"success\": True, \"message\": \"Clearing input/output args\" })\\n\\n';\n                pythonCode += '@app.route(\\'/get/output\\')\\n';\n                pythonCode += 'def get_output_data():\\n';\n                pythonCode += '    ' + 'inarg_output = \\'\\'\\n';\n                pythonCode += '    ' + 'if inarg_output_data != []:\\n';\n                pythonCode += '        ' + 'inarg_output = \\'InArg -> \\'\\n';\n                pythonCode += '        ' + 'inarg_output += \\'\\t\\'.join(inarg_output_data)\\n\\n';\n                pythonCode += '    ' + 'outarg_output = \\'\\'\\n';\n                pythonCode += '    ' + 'if outarg_output_data != []:\\n';\n                pythonCode += '        ' + 'outarg_output = \\'OutArg -> \\'\\n';\n                pythonCode += '        ' + 'outarg_output += \\'\\t\\'.join(outarg_output_data)\\n\\n';\n                pythonCode += '    ' + 'return (str(inarg_output) + \\' \\' + str(outarg_output)).strip()\\n\\n';\n            }\n            else {\n                pythonCode += '        ' + 'is_done, next_component = next_component.do(ctx)\\n';\n                pythonCode += '\\n';\n            }\n            pythonCode += \"if __name__ == '__main__':\\n\";\n            pythonCode += '    ' + 'parser = ArgumentParser()\\n';\n            if (stringNodes) {\n                for (let i = 0; i < stringNodes.length; i++) {\n                    let stringParam = stringNodes[i].replace(/\\s+/g, \"_\");\n                    stringParam = stringParam.toLowerCase();\n                    if (stringParam == 'experiment_name') {\n                        let dateTimeStr = \"\\'\\%Y-\\%m-\\%d \\%H:\\%M:\\%S\\'\";\n                        pythonCode += '    ' + \"parser.add_argument('--\" + stringParam + \"', default=datetime.now().strftime(\" + dateTimeStr + \"), type=str)\\n\";\n                    }\n                    else {\n                        pythonCode += '    ' + \"parser.add_argument('--\" + stringParam + \"', default='test', type=str)\\n\";\n                    }\n                }\n            }\n            if (intNodes) {\n                for (let i = 0; i < intNodes.length; i++) {\n                    let intParam = intNodes[i].replace(/\\s+/g, \"_\");\n                    intParam = intParam.toLowerCase();\n                    pythonCode += '    ' + \"parser.add_argument('--\" + intParam + \"', default='1', type=int)\\n\";\n                }\n            }\n            if (floatNodes) {\n                for (let i = 0; i < floatNodes.length; i++) {\n                    let floatParam = floatNodes[i].replace(/\\s+/g, \"_\");\n                    floatParam = floatParam.toLowerCase();\n                    pythonCode += '    ' + \"parser.add_argument('--\" + floatParam + \"', default='1.0', type=float)\\n\";\n                }\n            }\n            if (boolNodes) {\n                for (let i = 0; i < boolNodes.length; i++) {\n                    let boolParam = boolNodes[i].replace(/\\s+/g, \"_\");\n                    boolParam = boolParam.toLowerCase();\n                    pythonCode += '    ' + \"parser.add_argument('--\" + boolParam + \"', default=True, type=bool)\\n\";\n                }\n            }\n            if (debuggerMode == true) {\n                pythonCode += '    ' + \"parser.add_argument('--debug_mode', default=False, type=bool)\\n\\n\";\n                pythonCode += '    ' + \"debug_mode = parser.parse_args().debug_mode\\n\";\n                pythonCode += '    ' + \"if debug_mode:\\n\";\n                pythonCode += '        ' + 'thread = Thread(target=app.run, daemon=True)\\n';\n                pythonCode += '        ' + 'thread.start()\\n\\n';\n            }\n            pythonCode += '    ' + 'main(parser.parse_args())\\n';\n            pythonCode += '    ' + 'print(\"\\\\nFinish Executing\")';\n        }\n        return pythonCode;\n    };\n    const checkAllNodesConnected = () => {\n        let nodeModels = xircuitsApp.getDiagramEngine().getModel().getNodes();\n        for (let i = 0; i < nodeModels.length; i++) {\n            let inPorts = nodeModels[i][\"portsIn\"];\n            let j = 0;\n            if (inPorts != 0) {\n                if (inPorts[j].getOptions()[\"label\"] == '▶' && Object.keys(inPorts[0].getLinks()).length != 0) {\n                    continue;\n                }\n                else {\n                    nodeModels[i].getOptions().extras[\"borderColor\"] = \"red\";\n                    nodeModels[i].getOptions().extras[\"tip\"] = \"Please make sure this node ▶ is properly connected \";\n                    nodeModels[i].setSelected(true);\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const checkAllCompulsoryInPortsConnected = () => {\n        let allNodes = getAllNodesFromStartToFinish();\n        for (let i = 0; i < allNodes.length; i++) {\n            for (let k = 0; k < allNodes[i][\"portsIn\"].length; k++) {\n                let node = allNodes[i][\"portsIn\"][k];\n                if (node.getOptions()[\"label\"].startsWith(\"★\") && Object.keys(node.getLinks()).length == 0) {\n                    allNodes[i].getOptions().extras[\"borderColor\"] = \"red\";\n                    allNodes[i].getOptions().extras[\"tip\"] = \"Please make sure the [★]COMPULSORY InPorts are connected \";\n                    allNodes[i].setSelected(true);\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const handleSaveClick = () => {\n        var _a;\n        // Only save xircuit if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        onChange();\n        setInitialize(true);\n        setSaved(true);\n        commands.execute(commandIDs.saveDocManager);\n    };\n    const handleCompileClick = () => {\n        var _a;\n        // Only compile xircuit if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        let allNodesConnected = checkAllNodesConnected();\n        if (!saved) {\n            alert(\"Please save before compiling.\");\n            return;\n        }\n        if (!allNodesConnected) {\n            alert(\"Please connect all the nodes before compiling.\");\n            return;\n        }\n        let pythonCode = getPythonCompiler();\n        let showOutput = true;\n        setCompiled(true);\n        commands.execute(commandIDs.createArbitraryFile, { pythonCode, showOutput });\n    };\n    const handleUnsaved = () => {\n        onHide('displaySavedAndCompiled');\n        handleSaveClick();\n        handleCompileClick();\n    };\n    const saveAndCompileAndRun = async (debuggerMode) => {\n        //This is to avoid running xircuits while in dirty state\n        if (contextRef.current.model.dirty) {\n            const dialogResult = await showDialog({\n                title: 'This xircuits contains unsaved changes.',\n                body: 'To run the xircuits the changes need to be saved.',\n                buttons: [\n                    Dialog.cancelButton(),\n                    Dialog.okButton({ label: 'Save and Run' })\n                ]\n            });\n            if (dialogResult.button && dialogResult.button.accept === true) {\n                await handleSaveClick();\n            }\n            else {\n                // Don't proceed if cancel button pressed\n                return;\n            }\n        }\n        // compile\n        let allNodesConnected = checkAllNodesConnected();\n        let allCompulsoryNodesConnected = checkAllCompulsoryInPortsConnected();\n        if (!allNodesConnected) {\n            if (!debugMode) {\n                alert(\"Please connect all the nodes before running.\");\n                return;\n            }\n            alert(\"Please connect all the nodes before debugging.\");\n            return;\n        }\n        if (!allCompulsoryNodesConnected) {\n            alert(\"Please connect all [★]COMPULSORY InPorts.\");\n            return;\n        }\n        let pythonCode = getPythonCompiler(debuggerMode);\n        let showOutput = false;\n        // Only compile when 'Run' is chosen\n        if (runType == 'run') {\n            commands.execute(commandIDs.createArbitraryFile, { pythonCode, showOutput });\n            setCompiled(true);\n        }\n        // Compile Mode\n        if (debuggerMode) {\n            const runCommand = await handleRunDialog();\n            const debug_mode = \"--debug_mode True\";\n            if (runCommand) {\n                commands.execute(commandIDs.executeToOutputPanel, { runCommand, debug_mode });\n                commands.execute(commandIDs.openDebugger);\n                setDebugMode(true);\n                setInDebugMode(false);\n                let allNodes = getAllNodesFromStartToFinish();\n                allNodes.forEach((node) => {\n                    node.setSelected(false);\n                });\n                setCurrentIndex(0);\n                let currentNode = allNodes[0];\n                currentNode.setSelected(true);\n            }\n            return;\n        }\n        // Run Mode\n        context.ready.then(async () => {\n            let runArgs = await handleRunDialog();\n            let runCommand = runArgs[\"commandStr\"];\n            let addArgsSparkSubmit = runArgs[\"addArgs\"];\n            if (runArgs) {\n                commands.execute(commandIDs.executeToOutputPanel, { runCommand, runType, addArgsSparkSubmit });\n            }\n        });\n    };\n    const handleRunClick = async () => {\n        var _a;\n        // Only run xircuit if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        saveAndCompileAndRun(false);\n    };\n    const handleDebugClick = async () => {\n        var _a;\n        // Only debug xircuit if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        resetColorCodeOnStart(true);\n        saveAndCompileAndRun(true);\n        // let allNodes = diagramEngine.getModel().getNodes();\n        // allNodes[1].getOptions().extras[\"imageGalleryItems\"] = \"xxx\";\n    };\n    const handleLockClick = () => {\n        var _a;\n        // Only lock node if xircuits is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        let allNodes = getAllNodesFromStartToFinish();\n        allNodes.forEach((node) => {\n            const compulsaryNodes = node.getOptions()[\"name\"];\n            if (!node.isLocked()) {\n                if (compulsaryNodes !== 'Start' && compulsaryNodes !== 'Finish') {\n                    node.setSelected(true);\n                    node.setLocked(true);\n                }\n            }\n        });\n    };\n    const handleToggleBreakpoint = () => {\n        var _a;\n        // Only toggle breakpoint if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        xircuitsApp.getDiagramEngine().getModel().getNodes().forEach((item) => {\n            if (item.getOptions()[\"selected\"] == true) {\n                let name = item.getOptions()[\"name\"];\n                if (name.startsWith(\"🔴\")) {\n                    item.getOptions()[\"name\"] = name.split(\"🔴\")[1];\n                }\n                else {\n                    item.getOptions()[\"name\"] = \"🔴\" + name;\n                }\n                item.setSelected(true);\n                item.setSelected(false);\n            }\n        });\n    };\n    function delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    const getContinuePost = async () => {\n        await sendingRunCommand(\"clear\");\n        await sendingRunCommand(\"continue\");\n        return await sendingRunCommand(\"get/output\");\n    };\n    const terminateExecution = async () => {\n        return await sendingRunCommand(\"terminate\");\n    };\n    async function sendingRunCommand(command) {\n        const dataToSend = { \"command\": command };\n        try {\n            const server_reply = await requestAPI('debug/enable', {\n                body: JSON.stringify(dataToSend),\n                method: 'POST',\n            });\n            return server_reply;\n        }\n        catch (reason) {\n            console.error(`Error on POST /xircuit/debug/enable ${dataToSend}.\\n${reason}`);\n        }\n    }\n    ;\n    async function getConfig(request) {\n        const dataToSend = { \"config_request\": request };\n        try {\n            const server_reply = await requestAPI('get/config', {\n                body: JSON.stringify(dataToSend),\n                method: 'POST',\n            });\n            return server_reply;\n        }\n        catch (reason) {\n            console.error(`Error on POST get/config ${dataToSend}.\\n${reason}`);\n        }\n    }\n    ;\n    const runFromNodeToNode = async () => {\n        if (!debugMode) {\n            alert(\"Not in debug mode\");\n            return;\n        }\n        let allNodes = getAllNodesFromStartToFinish();\n        let prevNode;\n        let currentNode;\n        let count = currentIndex;\n        currentNode = allNodes[count];\n        prevNode = allNodes[count];\n        if (currentNode.getOptions()[\"name\"].startsWith(\"🔴\")) {\n            prevNode.setSelected(true);\n            prevNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n            currentNode = allNodes[count + 1];\n            if (currentNode.getOptions()[\"name\"].startsWith(\"🔴\")) {\n                if (currentNode.getOptions()[\"name\"] != \"🔴Start\" && currentNode.getOptions()[\"name\"] != \"Start\") {\n                    await sendingRunCommand(\"run\");\n                    let req_run_command = await sendingRunCommand(\"get_run\");\n                    let output_req = req_run_command[\"output\"] === undefined ? '' : req_run_command[\"output\"];\n                    while (output_req.split(\",\").length != count) {\n                        await delay(1500);\n                        req_run_command = await sendingRunCommand(\"get_run\");\n                        output_req = req_run_command[\"output\"] === undefined ? '' : req_run_command[\"output\"];\n                    }\n                    await getContinuePost();\n                    await delay(1000);\n                    let item2 = await sendingRunCommand(\"get/output\");\n                    let item = currentNode;\n                    currentNodeSignal.emit({\n                        item, item2\n                    });\n                }\n                await delay(1000);\n                prevNode.setSelected(false);\n                currentNode.setSelected(true);\n                if (currentNode.getOptions()[\"name\"] != \"Finish\" && currentNode.getOptions()[\"name\"] != \"🔴Finish\") {\n                    count = count + 1;\n                    currentNode = allNodes[count];\n                    setCurrentIndex(count);\n                }\n            }\n            await delay(1000);\n            prevNode.setSelected(false);\n        }\n        while (!currentNode.getOptions()[\"name\"].startsWith(\"🔴\")) {\n            prevNode = currentNode;\n            prevNode.setSelected(true);\n            prevNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n            if (currentNode.getOptions()[\"name\"] != \"Start\" && currentNode.getOptions()[\"name\"] != \"🔴Start\") {\n                await delay(1000);\n                prevNode.setSelected(false);\n                currentNode.setSelected(true);\n                await sendingRunCommand(\"run\");\n                let req_run_command = await sendingRunCommand(\"get_run\");\n                let output_req = req_run_command[\"output\"] === undefined ? '' : req_run_command[\"output\"];\n                while (output_req.split(\",\").length != count) {\n                    await delay(1500);\n                    req_run_command = await sendingRunCommand(\"get_run\");\n                    output_req = req_run_command[\"output\"] === undefined ? '' : req_run_command[\"output\"];\n                }\n            }\n            await delay(1000);\n            prevNode.setSelected(false);\n            prevNode = currentNode;\n            count = count + 1;\n            currentNode = allNodes[count];\n            currentNode.setSelected(true);\n            setInDebugMode(true);\n            if (currentNode.getOptions()[\"name\"] == \"Finish\" || currentNode.getOptions()[\"name\"] == \"🔴Finish\") {\n                prevNode.setSelected(false);\n                currentNode.setSelected(true);\n                currentNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n                await delay(1000);\n                currentNode.setSelected(false);\n                alert(\"Finish Execution.\");\n                setCurrentIndex(-1);\n                setDebugMode(false);\n                setInDebugMode(false);\n                allNodes.forEach((node) => {\n                    node.setSelected(true);\n                    node.getOptions()[\"color\"] = node[\"color\"];\n                });\n                return;\n            }\n            setCurrentIndex(count);\n            await getContinuePost();\n            await delay(1000);\n            let item2 = await sendingRunCommand(\"get/output\");\n            let item = currentNode;\n            currentNodeSignal.emit({\n                item, item2\n            });\n        }\n        if (currentNode.getOptions()[\"name\"] == \"Finish\" || currentNode.getOptions()[\"name\"] == \"🔴Finish\") {\n            await delay(1000);\n            prevNode.setSelected(false);\n            currentNode.setSelected(true);\n            currentNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n            setCurrentIndex(-1);\n            setDebugMode(false);\n            setInDebugMode(false);\n            alert(\"Finish Execution.\");\n            allNodes.forEach((node) => {\n                node.setSelected(true);\n                node.getOptions()[\"color\"] = node[\"color\"];\n            });\n        }\n    };\n    const handleToggleContinueDebug = async () => {\n        var _a;\n        // Only toggle continue if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        if (currentIndex == 0) {\n            resetColorCodeOnStart(true);\n        }\n        await runFromNodeToNode();\n    };\n    const handleToggleNextNode = async () => {\n        var _a;\n        // Only toggle next node if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        if (!debugMode) {\n            alert(\"Not in debug mode\");\n            return;\n        }\n        let allNodes = getAllNodesFromStartToFinish();\n        let currentNode;\n        let prevNode;\n        let count = currentIndex;\n        currentNode = allNodes[count];\n        prevNode = allNodes[count];\n        if (currentNode.getOptions()[\"name\"] == \"Start\" || currentNode.getOptions()[\"name\"] == \"🔴Start\") {\n            currentNode.setSelected(true);\n            await getContinuePost();\n            currentNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n            currentNode.setSelected(false);\n            count += 1;\n            currentNode = allNodes[count];\n            currentNode.setSelected(true);\n            prevNode.setSelected(false);\n            setCurrentIndex(count);\n            await delay(1500);\n            let item2 = await sendingRunCommand(\"get/output\");\n            await delay(1000);\n            let item = currentNode;\n            currentNodeSignal.emit({\n                item, item2\n            });\n        }\n        else {\n            await sendingRunCommand(\"run\");\n            let req_run_command = await sendingRunCommand(\"get_run\");\n            let output_req = req_run_command[\"output\"] === undefined ? '' : req_run_command[\"output\"];\n            while (output_req.split(\",\").length != count) {\n                await delay(1500);\n                req_run_command = await sendingRunCommand(\"get_run\");\n                output_req = req_run_command[\"output\"] === undefined ? '' : req_run_command[\"output\"];\n            }\n            await getContinuePost();\n            prevNode.setSelected(true);\n            count += 1;\n            currentNode = allNodes[count];\n            currentNode.setSelected(true);\n            prevNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n            prevNode.setSelected(false);\n            setCurrentIndex(count);\n            await delay(1500);\n            let item2 = await sendingRunCommand(\"get/output\");\n            let item = currentNode;\n            currentNodeSignal.emit({\n                item, item2\n            });\n        }\n        if (currentNode.getOptions()[\"name\"] == \"Finish\") {\n            currentNode.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n            currentNode.setSelected(false);\n            currentNode.setSelected(true);\n            setCurrentIndex(-1);\n            setDebugMode(false);\n            setInDebugMode(false);\n            allNodes.forEach((node) => {\n                node.getOptions()[\"color\"] = \"rgb(150,150,150)\";\n                node.setSelected(false);\n                node.setSelected(true);\n                node.getOptions()[\"color\"] = node[\"color\"];\n            });\n            alert(\"Finish Execution.\");\n        }\n    };\n    const handleToggleStepOverDebug = async () => {\n        var _a;\n        // Only toggle step over if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        if (currentIndex == 0) {\n            resetColorCodeOnStart(true);\n        }\n        await runFromNodeToNode();\n    };\n    const resetColorCodeOnStart = (onStart) => {\n        let allNodes = getAllNodesFromStartToFinish();\n        if (onStart) {\n            allNodes.forEach((node) => {\n                node.setSelected(true);\n                node.getOptions()[\"color\"] = node[\"color\"];\n                node.setSelected(false);\n            });\n            allNodes[0].setSelected(true);\n            return;\n        }\n        allNodes.forEach((node) => {\n            node.setSelected(true);\n            node.getOptions()[\"color\"] = node[\"color\"];\n        });\n    };\n    const handleToggleTerminateDebug = () => {\n        var _a;\n        // Only toggle continue if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        if (!debugMode) {\n            return;\n        }\n        resetColorCodeOnStart(false);\n        terminateExecution();\n        setCurrentIndex(-1);\n        setDebugMode(false);\n        setInDebugMode(false);\n        alert(\"Execution has been terminated.\");\n    };\n    const handleToggleStepInDebug = () => {\n        var _a;\n        // Only toggle step in if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        alert(\"Step In\");\n    };\n    const handleToggleStepOutDebug = () => {\n        var _a;\n        // Only toggle step out if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        alert(\"Step Out\");\n    };\n    const handleToggleEvaluateDebug = () => {\n        var _a;\n        // Only toggle continue if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        alert(\"Evaluate Code\");\n    };\n    const handleTestClick = () => {\n        var _a;\n        // Only test xircuit if it is currently in focus\n        // This must be first to avoid unnecessary complication\n        if (((_a = shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== widgetId) {\n            return;\n        }\n        let node = new CustomNodeModel({ name: \"Testing Node\", color: 'rgb(255,240,240)', extras: { \"type\": \"Testing\" } });\n        node.addInPortEnhance('▶', 'in-0');\n        node.addOutPortEnhance('▶', 'out-0');\n        node.setPosition(componentPanelposition);\n        xircuitsApp.getDiagramEngine().getModel().addNode(node);\n        // alert(\"Testing\");\n    };\n    const hideRcDialog = () => {\n        setDisplayRcDialog(false);\n    };\n    useEffect(() => {\n        // Only enable added arguments when in 'Spark Submit' mode\n        if (runType == 'spark-submit') {\n            setSparkSubmitkNodes(\"Added Arguments\");\n        }\n        else {\n            setSparkSubmitkNodes(\"\");\n        }\n        context.ready.then(() => {\n            if (initialize) {\n                let allNodes = xircuitsApp.getDiagramEngine().getModel().getNodes();\n                let nodesCount = allNodes.length;\n                for (let i = 0; i < nodesCount; i++) {\n                    let nodeName = allNodes[i].getOptions()[\"name\"];\n                    if (nodeName.startsWith(\"Hyperparameter\")) {\n                        let regEx = /\\(([^)]+)\\)/;\n                        let result = nodeName.match(regEx);\n                        let nodeText = nodeName.split(\": \");\n                        if (result[1] == 'String') {\n                            setStringNodes(stringNodes => ([...stringNodes, nodeText[nodeText.length - 1]].sort()));\n                        }\n                        else if (result[1] == 'Int') {\n                            setIntNodes(intNodes => ([...intNodes, nodeText[nodeText.length - 1]].sort()));\n                        }\n                        else if (result[1] == 'Float') {\n                            setFloatNodes(floatNodes => ([...floatNodes, nodeText[nodeText.length - 1]].sort()));\n                        }\n                        else if (result[1] == 'Boolean') {\n                            setBoolNodes(boolNodes => ([...boolNodes, nodeText[nodeText.length - 1]].sort()));\n                        }\n                    }\n                }\n            }\n            else {\n                setStringNodes([\"experiment name\"]);\n                setIntNodes([]);\n                setFloatNodes([]);\n                setBoolNodes([]);\n            }\n        });\n    }, [initialize, runType]);\n    const handleRunDialog = async () => {\n        var _a;\n        let title = 'Run';\n        const dialogOptions = {\n            title,\n            body: formDialogWidget(React.createElement(RunDialog, { lastAddedArgsSparkSubmit: addedArgSparkSubmit, childSparkSubmitNodes: sparkSubmitNodes, childStringNodes: stringNodes, childBoolNodes: boolNodes, childIntNodes: intNodes, childFloatNodes: floatNodes })),\n            buttons: [Dialog.cancelButton(), Dialog.okButton({ label: ('Start') })],\n            defaultButton: 1,\n            focusNodeSelector: '#name'\n        };\n        const dialogResult = await showFormDialog(dialogOptions);\n        if (dialogResult[\"button\"][\"label\"] == 'Cancel') {\n            // When Cancel is clicked on the dialog, just return\n            return false;\n        }\n        let commandStr = ' ';\n        // Added arguments for spark submit\n        let addArgs = (_a = dialogResult[\"value\"][sparkSubmitNodes]) !== null && _a !== void 0 ? _a : \"\";\n        setAddedArgSparkSubmit(addArgs);\n        stringNodes.forEach((param) => {\n            if (param == 'experiment name') {\n                var dt = new Date();\n                let dateTime = `${dt.getFullYear().toString().padStart(4, '0')}-${(dt.getMonth() + 1).toString().padStart(2, '0')}-${dt.getDate().toString().padStart(2, '0')} ${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}:${dt.getSeconds().toString().padStart(2, '0')}`;\n                xircuitLogger.info(param + \": \" + dateTime);\n            }\n            else {\n                if (dialogResult[\"value\"][param]) {\n                    xircuitLogger.info(param + \": \" + dialogResult[\"value\"][param]);\n                    let filteredParam = param.replace(/\\s+/g, \"_\");\n                    filteredParam = filteredParam.toLowerCase();\n                    commandStr += '--' + filteredParam + ' ' + dialogResult[\"value\"][param] + ' ';\n                }\n            }\n        });\n        if (boolNodes) {\n            boolNodes.forEach((param) => {\n                xircuitLogger.info(param + \": \" + dialogResult[\"value\"][param]);\n                if (dialogResult[\"value\"][param]) {\n                    let filteredParam = param.replace(/\\s+/g, \"_\");\n                    filteredParam = filteredParam.toLowerCase();\n                    commandStr += '--' + filteredParam + ' ' + dialogResult[\"value\"][param] + ' ';\n                }\n            });\n        }\n        if (intNodes) {\n            intNodes.forEach((param) => {\n                xircuitLogger.info(param + \": \" + dialogResult[\"value\"][param]);\n                if (dialogResult[\"value\"][param]) {\n                    let filteredParam = param.replace(/\\s+/g, \"_\");\n                    filteredParam = filteredParam.toLowerCase();\n                    commandStr += '--' + filteredParam + ' ' + dialogResult[\"value\"][param] + ' ';\n                }\n            });\n        }\n        if (floatNodes) {\n            floatNodes.forEach((param) => {\n                xircuitLogger.info(param + \": \" + dialogResult[\"value\"][param]);\n                if (dialogResult[\"value\"][param]) {\n                    let filteredParam = param.replace(/\\s+/g, \"_\");\n                    filteredParam = filteredParam.toLowerCase();\n                    commandStr += '--' + filteredParam + ' ' + dialogResult[\"value\"][param] + ' ';\n                }\n            });\n        }\n        return { commandStr, addArgs };\n    };\n    const connectSignal = ([signal, handler]) => {\n        useEffect(() => {\n            signal.connect(handler);\n            return () => {\n                signal.disconnect(handler);\n            };\n        }, [signal, handler]);\n    };\n    const signalConnections = [\n        [saveXircuitSignal, handleSaveClick],\n        [compileXircuitSignal, handleCompileClick],\n        [runXircuitSignal, handleRunClick],\n        [debugXircuitSignal, handleDebugClick],\n        [lockNodeSignal, handleLockClick],\n        [breakpointXircuitSignal, handleToggleBreakpoint],\n        [testXircuitSignal, handleTestClick],\n        [continueDebugSignal, handleToggleContinueDebug],\n        [nextNodeDebugSignal, handleToggleNextNode],\n        [stepOverDebugSignal, handleToggleStepOverDebug],\n        [terminateDebugSignal, handleToggleTerminateDebug],\n        [stepInDebugSignal, handleToggleStepInDebug],\n        [stepOutDebugSignal, handleToggleStepOutDebug],\n        [evaluateDebugSignal, handleToggleEvaluateDebug]\n    ];\n    signalConnections.forEach(connectSignal);\n    const fetchComponentList = async () => {\n        const response = await ComponentList(serviceManager);\n        if (response.length > 0) {\n            setComponentList([]);\n        }\n        setComponentList(response);\n    };\n    useEffect(() => {\n        let runType;\n        runTypeXircuitSignal.connect((_, args) => {\n            runType = args[\"runType\"];\n            setRunType(runType);\n        });\n    }, [runTypeXircuitSignal]);\n    useEffect(() => {\n        debugModeSignal.emit({\n            debugMode,\n            inDebugMode\n        });\n    }, [debugMode, inDebugMode]);\n    useEffect(() => {\n        if (!runOnce) {\n            fetchComponentList();\n        }\n    }, []);\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            fetchComponentList();\n        }, 5000);\n        return () => clearInterval(intervalId);\n    }, [componentList]);\n    const dialogFuncMap = {\n        'displayDebug': setDisplayDebug,\n        'displayHyperparameter': setDisplayHyperparameter,\n        'displaySavedAndCompiled': setDisplaySavedAndCompiled\n    };\n    const onClick = (name) => {\n        dialogFuncMap[`${name}`](true);\n    };\n    const onHide = (name) => {\n        dialogFuncMap[`${name}`](false);\n        if (name == \"displayHyperparameter\") {\n            setStringNodes([\"name\"]);\n            setIntNodes([]);\n            setFloatNodes([]);\n            setBoolNodes([]);\n        }\n    };\n    /**Component Panel & Node Action Panel Context Menu */\n    const [isComponentPanelShown, setIsComponentPanelShown] = useState(false);\n    const [actionPanelShown, setActionPanelShown] = useState(false);\n    const [componentPanelposition, setComponentPanelposition] = useState({ x: 0, y: 0 });\n    const [actionPanelPosition, setActionPanelPosition] = useState({ x: 0, y: 0 });\n    const [looseLinkData, setLooseLinkData] = useState();\n    const [isParameterLink, setIsParameterLink] = useState(false);\n    // Show the component panel context menu\n    const showComponentPanel = (event) => {\n        // Disable the default context menu\n        event.preventDefault();\n        setActionPanelShown(false);\n        setIsComponentPanelShown(false);\n        const newPosition = {\n            x: event.pageX,\n            y: event.pageY,\n        };\n        setComponentPanelposition(newPosition);\n        setIsComponentPanelShown(true);\n    };\n    // Show the component panel from dropped link\n    const showComponentPanelFromLink = (event) => {\n        setActionPanelShown(false);\n        setIsComponentPanelShown(false);\n        const linkName = event.link.sourcePort.options.name;\n        if (linkName.startsWith(\"parameter\")) {\n            setIsParameterLink(true);\n            // Don't show panel when loose link from parameter outPort\n            if (linkName.includes(\"parameter-out\")) {\n                return;\n            }\n        }\n        const newPosition = {\n            x: event.link.points[1].position.x,\n            y: event.link.points[1].position.y,\n        };\n        setLooseLinkData(event.link);\n        setComponentPanelposition(newPosition);\n        setIsComponentPanelShown(true);\n    };\n    // Hide component and node action panel\n    const hidePanel = () => {\n        setIsComponentPanelShown(false);\n        setActionPanelShown(false);\n        setLooseLinkData(null);\n        setIsParameterLink(false);\n    };\n    // Show the nodeActionPanel context menu\n    const showNodeActionPanel = (event) => {\n        setActionPanelShown(false);\n        setIsComponentPanelShown(false);\n        const newPosition = {\n            x: event.pageX,\n            y: event.pageY,\n        };\n        setActionPanelPosition(newPosition);\n        setActionPanelShown(true);\n    };\n    return (React.createElement(Body, null,\n        React.createElement(Content, null,\n            React.createElement(Layer, { onDrop: (event) => {\n                    var data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n                    let component_task = componentList.map(x => x[\"task\"]);\n                    let drop_node = component_task.indexOf(data.name);\n                    let current_node;\n                    let node = null;\n                    if (drop_node != -1) {\n                        current_node = componentList[drop_node];\n                    }\n                    if (current_node != undefined) {\n                        if (current_node.header == \"GENERAL\") {\n                            node = GeneralComponentLibrary({ name: data.name, color: current_node[\"color\"], type: data.type });\n                        }\n                        else if (current_node.header == \"ADVANCED\") {\n                            node = new CustomNodeModel({ name: data.name, color: current_node[\"color\"], extras: { \"type\": data.type } });\n                            node.addInPortEnhance('▶', 'in-0');\n                            node.addOutPortEnhance('▶', 'out-0');\n                            // TODO: Get rid of the remapping by using compatible type names everywhere\n                            let type_name_remappings = {\n                                \"bool\": \"boolean\",\n                                \"str\": \"string\"\n                            };\n                            current_node[\"variables\"].forEach(variable => {\n                                let name = variable[\"name\"];\n                                let type = type_name_remappings[variable[\"type\"]] || variable[\"type\"];\n                                switch (variable[\"kind\"]) {\n                                    case \"InCompArg\":\n                                        node.addInPortEnhance(`★${name}`, `parameter-${type}-${name}`);\n                                        break;\n                                    case \"InArg\":\n                                        node.addInPortEnhance(name, `parameter-${type}-${name}`);\n                                        break;\n                                    case \"OutArg\":\n                                        node.addOutPortEnhance(name, `parameter-out-${type}-${name}`);\n                                        break;\n                                    default:\n                                        console.warn(\"Unknown variable kind for variable\", variable);\n                                        break;\n                                }\n                            });\n                        }\n                    }\n                    // note:  can not use the same port name in the same node,or the same name port can not link to other ports\n                    // you can use shift + click and then use delete to delete link\n                    if (node != null) {\n                        let point = xircuitsApp.getDiagramEngine().getRelativeMousePoint(event);\n                        node.setPosition(point);\n                        xircuitsApp.getDiagramEngine().getModel().addNode(node);\n                        if (node[\"name\"].startsWith(\"Hyperparameter\")) {\n                            setInitialize(true);\n                        }\n                        setSaved(false);\n                        setCompiled(false);\n                        forceUpdate();\n                    }\n                }, onDragOver: (event) => {\n                    event.preventDefault();\n                }, onMouseOver: (event) => {\n                    event.preventDefault();\n                }, onMouseUp: (event) => {\n                    event.preventDefault();\n                }, onMouseDown: (event) => {\n                    event.preventDefault();\n                }, onContextMenu: showComponentPanel, onClick: (event) => {\n                    hidePanel();\n                    if (event.ctrlKey || event.metaKey) {\n                        showNodeActionPanel(event);\n                    }\n                } },\n                React.createElement(DemoCanvasWidget, null,\n                    React.createElement(CanvasWidget, { engine: xircuitsApp.getDiagramEngine() }))),\n            isComponentPanelShown && (React.createElement(\"div\", { style: { top: componentPanelposition.y, left: componentPanelposition.x }, className: \"add-component-panel\" },\n                React.createElement(ComponentsPanel, { lab: app, eng: xircuitsApp.getDiagramEngine(), nodePosition: componentPanelposition, linkData: looseLinkData, isParameter: isParameterLink, key: \"component-panel\" }))),\n            actionPanelShown && (React.createElement(\"div\", { style: { top: actionPanelPosition.y, left: actionPanelPosition.x }, className: \"node-action-context-menu\" },\n                React.createElement(NodeActionsPanel, { app: app, eng: xircuitsApp.getDiagramEngine() }))))));\n};\n//# sourceMappingURL=xircuitBodyWidget.js.map","import ComponentList from '../tray_library/Component';\nimport React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Accordion, AccordionItem, AccordionItemHeading, AccordionItemButton, AccordionItemPanel } from \"react-accessible-accordion\";\nimport { TrayPanel } from './TrayPanel';\nimport { TrayItemPanel } from './TrayItemPanel';\nexport const Body = styled.div `\n  flex-grow: 1;\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 100%;\n  background-color: black;\n  height: 100%;\n  overflow-y: auto;\n`;\nexport const Content = styled.div `\n    display: flex;\n    flex-grow: 1;\n    flex-wrap: wrap;\n    max-height: auto;\n    'border-top': '4px solid #dfe2e5'\n`;\nasync function fetchComponent(componentList) {\n    let component_root = componentList.map(x => x[\"category\"]);\n    let headers = Array.from(new Set(component_root));\n    let headerList = [];\n    let headerList2 = [];\n    let displayHeaderList = [];\n    for (let headerIndex = 0; headerIndex < headers.length; headerIndex++) {\n        if (headers[headerIndex] == 'ADVANCED' || headers[headerIndex] == 'GENERAL') {\n            headerList.push(headers[headerIndex]);\n        }\n        else {\n            headerList2.push(headers[headerIndex]);\n        }\n    }\n    if (headerList.length != 0) {\n        headerList = headerList.sort((a, b) => a < b ? 1 : a > b ? -1 : 0);\n        headers = [...headerList, ...headerList2];\n        for (let headerIndex2 = 0; headerIndex2 < headers.length; headerIndex2++) {\n            displayHeaderList.push({\n                \"task\": headers[headerIndex2],\n                \"id\": headerIndex2 + 1\n            });\n        }\n    }\n    return displayHeaderList;\n}\nfunction fetchAllowableComponents(props, componentList, headerList) {\n    let allowComponentList = [];\n    let allowHeaderList = [];\n    // Get allowable components\n    componentList.map((val) => {\n        if (props.linkData != null) {\n            if (props.isParameter == true) {\n                // Only allow GENERAL components for parameter inPort\n                if (val[\"category\"].toString() == \"GENERAL\") {\n                    allowComponentList.push(val);\n                }\n            }\n            // Only allow ADVANCED components for '▶' port\n            else if (val[\"category\"].toString() != \"GENERAL\") {\n                allowComponentList.push(val);\n            }\n        }\n        // Allow all Components when right-clicking\n        else {\n            allowComponentList.push(val);\n        }\n    });\n    // Get allowable components's header\n    headerList.map((val) => {\n        if (props.linkData != null) {\n            if (props.isParameter == true) {\n                // Only allow GENERAL components for parameter inPort\n                if (val[\"task\"].toString() == \"GENERAL\") {\n                    allowHeaderList.push(val);\n                }\n            }\n            // Only allow ADVANCED components for '▶' port\n            else if (val[\"task\"].toString() != \"GENERAL\") {\n                allowHeaderList.push(val);\n            }\n        }\n        // Allow all Components when right-clicking\n        else {\n            allowHeaderList.push(val);\n        }\n    });\n    return { allowComponentList, allowHeaderList };\n}\nexport default function ComponentsPanel(props) {\n    const [componentList, setComponentList] = React.useState([]);\n    const [category, setCategory] = React.useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [runOnce, setRunOnce] = useState(false);\n    const [allowableComponents, setAllowableComponents] = useState([]);\n    let handleOnChange = (event) => {\n        setSearchTerm(\"\");\n        setSearchTerm(event.target.value);\n    };\n    const fetchComponentList = async () => {\n        // get the component list by sending the jupyterlab frontend and base path\n        const response_1 = await ComponentList(props.lab.serviceManager);\n        // get the header from the components\n        const response_2 = await fetchComponent(response_1);\n        const response_3 = await fetchAllowableComponents(props, response_1, response_2);\n        // to ensure the component list is empty before setting the component list\n        if (response_1.length > 0) {\n            setAllowableComponents([]);\n            setComponentList([]);\n            setCategory([]);\n        }\n        setComponentList(response_1);\n        setCategory(response_3.allowHeaderList);\n        setAllowableComponents(response_3.allowComponentList);\n    };\n    useEffect(() => {\n        if (!runOnce) {\n            fetchComponentList();\n            setRunOnce(true);\n        }\n    }, [category, componentList]);\n    function focusInput() {\n        document.getElementById(\"add-component-input\").focus();\n    }\n    return (React.createElement(Body, null,\n        React.createElement(Content, null,\n            React.createElement(TrayPanel, null,\n                React.createElement(\"div\", { onBlur: focusInput },\n                    React.createElement(\"p\", { className: 'title-panel' }, \"Add Component\"),\n                    React.createElement(\"div\", { className: \"search-input-panel\" },\n                        React.createElement(\"input\", { id: 'add-component-input', type: \"text\", name: \"\", value: searchTerm, placeholder: \"SEARCH\", className: \"search-input__text-input-panel\", autoFocus: true, onChange: handleOnChange })),\n                    allowableComponents.filter((val) => {\n                        if (searchTerm != \"\" && val.task.toLowerCase().includes(searchTerm.toLowerCase())) {\n                            return val;\n                        }\n                    }).map((val, i) => {\n                        return (React.createElement(\"div\", { key: `index-3-${i}`, className: \"tray-search\" },\n                            React.createElement(TrayItemPanel, { currentNode: val, app: props.lab, eng: props.eng, nodePosition: props.nodePosition, linkData: props.linkData, isParameter: props.isParameter })));\n                    })),\n                React.createElement(Accordion, { allowZeroExpanded: true }, category.filter((val) => {\n                    if (searchTerm == \"\") {\n                        return val;\n                    }\n                }).map((val) => {\n                    return (React.createElement(AccordionItem, { key: `index-1-${val[\"task\"].toString()}`, className: 'accordion__item_panel' },\n                        React.createElement(AccordionItemHeading, null,\n                            React.createElement(AccordionItemButton, { className: 'accordion__button_panel' }, val[\"task\"])),\n                        React.createElement(AccordionItemPanel, null, componentList.filter((componentVal) => {\n                            if (searchTerm == \"\") {\n                                return componentVal;\n                            }\n                        }).map((componentVal, i2) => {\n                            if (componentVal[\"category\"].toString().toUpperCase() == val[\"task\"].toString()) {\n                                return (React.createElement(\"div\", { key: `index-1-${i2}` },\n                                    React.createElement(TrayItemPanel, { currentNode: componentVal, app: props.lab, eng: props.eng, nodePosition: props.nodePosition, linkData: props.linkData, isParameter: props.isParameter })));\n                            }\n                        }))));\n                }))))));\n}\n;\n//# sourceMappingURL=ComponentsPanel.js.map","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { commandIDs } from '../components/xircuitBodyWidget';\nexport const ActionPanel = styled.div `\n\twidth: 90px;\n\theight: 100px;\n\tborder-color: #000;\n\tborder-radius: 25px;\n\tborder-top: 10px;\n\tz-index: 10;\n`;\nexport class NodeActionsPanel extends React.Component {\n    hideNodeActionPanel() {\n        //@ts-ignore\n        this.props.eng.fireEvent({}, 'hidePanel');\n    }\n    ;\n    render() {\n        return (React.createElement(ActionPanel, { onClick: this.hideNodeActionPanel.bind(this) },\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.cutNode);\n                } }, \"Cut\"),\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.copyNode);\n                } }, \"Copy\"),\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.pasteNode);\n                } }, \"Paste\"),\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.editNode);\n                } }, \"Edit\"),\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.deleteNode);\n                } }, \"Delete\"),\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.undo);\n                } }, \"Undo\"),\n            React.createElement(\"div\", { className: \"option\", onClick: () => {\n                    this.props.app.commands.execute(commandIDs.redo);\n                } }, \"Redo\")));\n    }\n}\n//# sourceMappingURL=NodeActionsPanel.js.map","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { CustomNodeModel } from '../components/CustomNodeModel';\nimport { GeneralComponentLibrary } from '../tray_library/GeneralComponentLib';\nimport { commandIDs } from '../components/xircuitBodyWidget';\nexport const Tray = styled.div `\n\tcolor: white;\n\tfont-family: Helvetica, Arial;\n\tpadding: 2px;\n\twidth: auto;\n\tmargin: 2px;\n\tborder: solid 1px ${(p) => p.color};\n\tborder-radius: 2px;\n\tmargin-bottom: 2px;\n\tcursor: pointer;\n`;\nexport class TrayItemPanel extends React.Component {\n    selectedNode() {\n        let current_node = this.props.currentNode;\n        let node;\n        if (current_node != undefined) {\n            if (current_node.header == \"GENERAL\") {\n                node = GeneralComponentLibrary({ name: current_node[\"task\"], color: current_node[\"color\"], type: current_node[\"type\"] });\n            }\n            else {\n                node = new CustomNodeModel({ name: current_node[\"task\"], color: current_node[\"color\"], extras: { \"type\": current_node[\"type\"] } });\n                node.addInPortEnhance('▶', 'in-0');\n                node.addOutPortEnhance('▶', 'out-0');\n                let type_name_remappings = {\n                    \"bool\": \"boolean\",\n                    \"str\": \"string\"\n                };\n                current_node[\"variables\"].forEach(variable => {\n                    let name = variable[\"name\"];\n                    let type = type_name_remappings[variable[\"type\"]] || variable[\"type\"];\n                    switch (variable[\"kind\"]) {\n                        case \"InCompArg\":\n                            node.addInPortEnhance(`★${name}`, `parameter-${type}-${name}`);\n                            break;\n                        case \"InArg\":\n                            node.addInPortEnhance(name, `parameter-${type}-${name}`);\n                            break;\n                        case \"OutArg\":\n                            node.addOutPortEnhance(name, `parameter-out-${type}-${name}`);\n                            break;\n                        default:\n                            console.warn(\"Unknown variable kind for variable\", variable);\n                            break;\n                    }\n                });\n            }\n        }\n        return node;\n    }\n    addNode(node) {\n        const nodePosition = this.props.nodePosition;\n        this.props.app.commands.execute(commandIDs.addNode, { node, nodePosition });\n    }\n    connectLink(node) {\n        if (this.props.linkData == null) {\n            return;\n        }\n        const targetNode = node;\n        const sourceLink = this.props.linkData;\n        const isParameterLink = this.props.isParameter;\n        this.props.app.commands.execute(commandIDs.connectNode, { targetNode, sourceLink, isParameterLink });\n    }\n    hidePanelEvent() {\n        //@ts-ignore\n        this.props.eng.fireEvent({}, 'hidePanel');\n    }\n    ;\n    render() {\n        return (React.createElement(Tray, { color: this.props.currentNode[\"color\"] || \"white\", onClick: (event) => {\n                if (event.ctrlKey || event.metaKey) {\n                    const { commands } = this.props.app;\n                    commands.execute('docmanager:open', {\n                        path: this.props.currentNode[\"file_path\"]\n                    });\n                    return;\n                }\n                let node = this.selectedNode();\n                this.addNode(node);\n                this.connectLink(node);\n                this.hidePanelEvent();\n                this.forceUpdate();\n            }, className: \"tray-item\" }, this.props.currentNode[\"task\"]));\n    }\n}\n//# sourceMappingURL=TrayItemPanel.js.map","import * as React from 'react';\nimport styled from '@emotion/styled';\nexport const Tray = styled.div `\n\tmin-width: 150px;\n\tborder-radius: 11px;\n\tbackground: rgb(35, 35, 35);\n\tflex-grow: 1;\n\twidth: 100px;\n\tflex-shrink: 1;\n\tmax-height: auto;\n`;\nexport class TrayPanel extends React.Component {\n    render() {\n        return React.createElement(Tray, null, this.props.children);\n    }\n}\n//# sourceMappingURL=TrayPanel.js.map","import { ReactWidget, UseSignal } from \"@jupyterlab/apputils\";\nimport React, { useEffect, useRef, useState } from \"react\";\n/**\n * React component for a xircuits debugger.\n *\n * @returns The Debugger component\n */\nconst DebuggerComponent = ({ xircuitFactory, currentNode }) => {\n    const [names, setNames] = useState(\"\");\n    const [ids, setIds] = useState(\"\");\n    const [types, setTypes] = useState(\"\");\n    const [pInLabels, setPInLabel] = useState([]);\n    const [pOutLabels, setPOutLabel] = useState([]);\n    const notInitialRender = useRef(false);\n    const handleCurrentNode = () => {\n        let item = typeof currentNode[\"item\"] === \"undefined\" ? \"\" : currentNode[\"item\"];\n        let item2 = typeof currentNode[\"item2\"] === \"undefined\" ? \"\" : currentNode[\"item2\"];\n        let name = item.getOptions()[\"name\"];\n        let id = item.getOptions()[\"id\"];\n        let type = item.getOptions()[\"extras\"][\"type\"];\n        let pInList = [];\n        let pInArgList = [], pOutArgList = [];\n        let item_output = item2;\n        if (typeof (item2) != \"string\") {\n            item_output = item2[\"output\"];\n        }\n        if (item_output != \"\") {\n            if (item_output.includes(\"InArg ->\") && item_output.includes(\"OutArg ->\")) {\n                let temp_out_arg = item_output.split(\"OutArg -> \");\n                let temp_in_arg = temp_out_arg[0].split(\"InArg -> \");\n                for (let i = 0; i < temp_in_arg[1].split(\"\\t\").length; i++) {\n                    pInList.push(temp_in_arg[1].split(\"\\t\")[i]);\n                }\n                for (let i = 0; i < temp_out_arg[1].split(\"\\t\").length; i++) {\n                    if (!temp_out_arg[1].split(\"\\t\")[i].includes(\": None\")) {\n                        pInList.push(temp_out_arg[1].split(\"\\t\")[i]);\n                    }\n                }\n            }\n            else if (item_output.includes(\"InArg ->\") && !item_output.includes(\"OutArg ->\")) {\n                for (let i = 0; i < item_output.split(\"InArg -> \")[1].split(\"\\t\").length; i++) {\n                    pInList.push(item_output.split(\"InArg -> \")[1].split(\"\\t\")[i]);\n                }\n            }\n            else if (!item_output.includes(\"InArg ->\") && item_output.includes(\"OutArg ->\")) {\n                for (let i = 0; i < item_output.split(\"OutArg -> \")[1].split(\"\\t\").length; i++) {\n                    if (!item_output.split(\"OutArg -> \")[1].split(\"\\t\")[i].includes(\": None\")) {\n                        pInList.push(item_output.split(\"OutArg -> \")[1].split(\"\\t\")[i]);\n                    }\n                }\n            }\n        }\n        item[\"portsIn\"].forEach((element) => {\n            if (element.getOptions()[\"label\"] != \"▶\") {\n                pInArgList.push(element.getOptions()[\"label\"]);\n            }\n        });\n        item[\"portsOut\"].forEach((element) => {\n            if (element.getOptions()[\"label\"] != \"▶\") {\n                pOutArgList.push(element.getOptions()[\"label\"]);\n            }\n        });\n        handleChanges(name, id, type, pInList, pOutArgList);\n    };\n    useEffect(() => {\n        if (notInitialRender.current) {\n            handleCurrentNode();\n        }\n        else {\n            notInitialRender.current = true;\n        }\n    }, [currentNode]);\n    function handleChanges(name, id, type, pInLabel, pOutLabel) {\n        setNames(name);\n        setIds(id);\n        setTypes(type);\n        setPInLabel(pInLabel);\n        setPOutLabel(pOutLabel);\n    }\n    return (React.createElement(\"div\", { style: {\n            minHeight: '800px', height: '100%', width: '100%', minWidth: '150px', flexGrow: 1, flexShrink: 1, margin: '7px', padding: '7px', fontSize: '14px'\n        } },\n        React.createElement(\"p\", null,\n            React.createElement(\"b\", null, \"Selected Node\")),\n        React.createElement(\"p\", null,\n            React.createElement(\"b\", null, \"Name:\"),\n            \" \",\n            names),\n        React.createElement(\"p\", null,\n            React.createElement(\"b\", null, \"Id:\"),\n            \" \",\n            ids),\n        React.createElement(\"p\", null,\n            React.createElement(\"b\", null, \"Type:\"),\n            \" \",\n            types),\n        React.createElement(\"p\", null,\n            React.createElement(\"b\", null, \"PortInLabel:\"),\n            \" \",\n            pInLabels.map((value, index) => (React.createElement(\"p\", { key: index }, value.split(\"\\n\").map((value2, index2) => (React.createElement(\"p\", { key: index2 }, value2))))))),\n        React.createElement(\"p\", null,\n            React.createElement(\"b\", null, \"PortOutLabel:\"),\n            \" \",\n            pOutLabels.map((pOutLabel, i) => (React.createElement(\"p\", { key: i }, pOutLabel))))));\n};\n/**\n * A Debugger Widget that wraps a BreakpointComponent.\n */\nexport class DebuggerWidget extends ReactWidget {\n    /**\n     * Constructs a new DebuggerWidget.\n     */\n    constructor(xircuitFactory) {\n        super();\n        this._xircuitFactory = xircuitFactory;\n        this.addClass(\"jp-DebuggerWidget\");\n    }\n    render() {\n        return (React.createElement(UseSignal, { signal: this._xircuitFactory.currentNodeSignal }, (_, args) => {\n            return (React.createElement(DebuggerComponent, { xircuitFactory: this._xircuitFactory, currentNode: args }));\n        }));\n    }\n}\n//# sourceMappingURL=DebuggerWidget.js.map","import { nullTranslator } from '@jupyterlab/translation';\nimport { Debugger } from '@jupyterlab/debugger';\nimport { Panel, SplitPanel, Widget, PanelLayout } from '@lumino/widgets';\nimport { commandIDs } from '../components/xircuitBodyWidget';\nimport { DebuggerWidget } from './DebuggerWidget';\nimport { Toolbar, CommandToolbarButton } from '@jupyterlab/apputils';\nimport { breakpointIcon, nextIcon } from '../ui-components/icons';\nexport const DebuggerCommandIDs = {\n    continue: 'Xircuits-debugger:continue',\n    terminate: 'Xircuits-debugger:terminate',\n    stepOver: 'Xircuits-debugger:next',\n    stepIn: 'Xircuits-debugger:step-in',\n    stepOut: 'Xircuits-debugger:step-out',\n    evaluate: 'Xircuits-debugger:evaluate-code',\n};\n/**\n * A Xircuits Debugger sidebar.\n */\nexport class XircuitsDebuggerSidebar extends Panel {\n    /**\n     * Instantiate a new XircuitDebugger.Sidebar\n     *\n     * @param options The instantiation options for a XircuitDebugger.Sidebar\n     */\n    constructor(options) {\n        super();\n        const translator = options.translator || nullTranslator;\n        const app = options.app;\n        const xircuitFactory = options.widgetFactory;\n        const trans = translator.load('jupyterlab');\n        this.id = 'jp-debugger-sidebar';\n        this.addClass('jp-DebuggerSidebar');\n        this._body = new SplitPanel();\n        this._body.orientation = 'vertical';\n        //   this._body.addClass('jp-DebuggerSidebar-body');\n        this.addWidget(this._body);\n        const content = new DebuggerWidget(xircuitFactory);\n        const header = new DebuggerHeader(translator);\n        const toolbarPanel = new DebuggerToolbar();\n        let debugMode;\n        let inDebugMode;\n        xircuitFactory.debugModeSignal.connect((_, args) => {\n            debugMode = args[\"debugMode\"];\n            inDebugMode = args[\"inDebugMode\"];\n            app.commands.notifyCommandChanged();\n        });\n        /**\n         * Create a continue button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-continue', new CommandToolbarButton({\n            commands: app.commands,\n            id: DebuggerCommandIDs.continue\n        }));\n        /**\n         * Create a next node button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-next', new CommandToolbarButton({\n            commands: app.commands,\n            id: commandIDs.nextNode\n        }));\n        /**\n         * Create a step over button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-step-over', new CommandToolbarButton({\n            commands: app.commands,\n            id: DebuggerCommandIDs.stepOver\n        }));\n        /**\n         * Create a breakpoint button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-breakpoint', new CommandToolbarButton({\n            commands: app.commands,\n            id: commandIDs.breakpointXircuit\n        }));\n        /**\n         * Create a terminate button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-terminate', new CommandToolbarButton({\n            commands: app.commands,\n            id: DebuggerCommandIDs.terminate\n        }));\n        /**\n         * Create a step in button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-step-in', new CommandToolbarButton({\n            commands: app.commands,\n            id: DebuggerCommandIDs.stepIn\n        }));\n        /**\n         * Create a step out button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-step-out', new CommandToolbarButton({\n            commands: app.commands,\n            id: DebuggerCommandIDs.stepOut\n        }));\n        /**\n         * Create a evaluate code button toolbar item.\n         */\n        toolbarPanel.toolbar.addItem('xircuits-debugger-evaluate-code', new CommandToolbarButton({\n            commands: app.commands,\n            id: DebuggerCommandIDs.evaluate\n        }));\n        // Add command signal to continue debugging xircuit\n        app.commands.addCommand(DebuggerCommandIDs.continue, {\n            caption: trans.__('Continue'),\n            icon: Debugger.Icons.continueIcon,\n            isEnabled: () => {\n                return debugMode !== null && debugMode !== void 0 ? debugMode : false;\n            },\n            execute: args => {\n                xircuitFactory.continueDebugSignal.emit(args);\n            }\n        });\n        // Add command signal to toggle next node\n        app.commands.addCommand(commandIDs.nextNode, {\n            caption: trans.__('Next Node'),\n            icon: nextIcon,\n            isEnabled: () => {\n                return inDebugMode !== null && inDebugMode !== void 0 ? inDebugMode : false;\n            },\n            execute: args => {\n                xircuitFactory.nextNodeDebugSignal.emit(args);\n            }\n        });\n        // Add command signal to toggle step over \n        app.commands.addCommand(DebuggerCommandIDs.stepOver, {\n            caption: trans.__('Step Over'),\n            icon: Debugger.Icons.stepOverIcon,\n            isEnabled: () => {\n                return inDebugMode !== null && inDebugMode !== void 0 ? inDebugMode : false;\n            },\n            execute: args => {\n                xircuitFactory.stepOverDebugSignal.emit(args);\n            }\n        });\n        // Add command signal to toggle breakpoint\n        app.commands.addCommand(commandIDs.breakpointXircuit, {\n            caption: trans.__('Toggle Breakpoint'),\n            icon: breakpointIcon,\n            isEnabled: () => {\n                return debugMode !== null && debugMode !== void 0 ? debugMode : false;\n            },\n            execute: args => {\n                xircuitFactory.breakpointXircuitSignal.emit(args);\n            }\n        });\n        // Add command signal to terminate debugging xircuit\n        app.commands.addCommand(DebuggerCommandIDs.terminate, {\n            caption: trans.__('Terminate'),\n            icon: Debugger.Icons.terminateIcon,\n            isEnabled: () => {\n                return debugMode !== null && debugMode !== void 0 ? debugMode : false;\n            },\n            execute: args => {\n                xircuitFactory.terminateDebugSignal.emit(args);\n            }\n        });\n        // // Add command signal to toggle step in\n        // app.commands.addCommand(DebuggerCommandIDs.stepIn, {\n        //   caption: trans.__('Step In'),\n        //   icon: Debugger.Icons.stepIntoIcon,\n        //   isEnabled: () => {\n        //     return inDebugMode ?? false;\n        //   },\n        //   execute: args => {\n        //     xircuitFactory.stepInDebugSignal.emit(args);\n        //   }\n        // });\n        // // Add command signal to toggle step out\n        // app.commands.addCommand(DebuggerCommandIDs.stepOut, {\n        //   caption: trans.__('Step Out'),\n        //   icon: Debugger.Icons.stepOutIcon,\n        //   isEnabled: () => {\n        //     return inDebugMode ?? false;\n        //   },\n        //   execute: args => {\n        //     xircuitFactory.stepOutDebugSignal.emit(args);\n        //   }\n        // });\n        // // Add command signal to evaluate debugging xircuit\n        // app.commands.addCommand(DebuggerCommandIDs.evaluate, {\n        //   caption: trans.__('Evaluate Code'),\n        //   icon: Debugger.Icons.evaluateIcon,\n        //   isEnabled: () => {\n        //     return inDebugMode ?? false;\n        //   },\n        //   execute: args => {\n        //     xircuitFactory.evaluateDebugSignal.emit(args);\n        //   }\n        // });\n        this.addWidget(header);\n        this.addWidget(toolbarPanel);\n        this.addWidget(content);\n        this.addClass('jp-DebuggerBreakpoints');\n    }\n    /**\n     * Add an item at the end of the sidebar.\n     *\n     * @param widget - The widget to add to the sidebar.\n     *\n     * #### Notes\n     * If the widget is already contained in the sidebar, it will be moved.\n     * The item can be removed from the sidebar by setting its parent to `null`.\n     */\n    addItem(widget) {\n        this._body.addWidget(widget);\n    }\n    /**\n     * Insert an item at the specified index.\n     *\n     * @param index - The index at which to insert the widget.\n     *\n     * @param widget - The widget to insert into to the sidebar.\n     *\n     * #### Notes\n     * If the widget is already contained in the sidebar, it will be moved.\n     * The item can be removed from the sidebar by setting its parent to `null`.\n     */\n    insertItem(index, widget) {\n        this._body.insertWidget(index, widget);\n    }\n    /**\n     * A read-only array of the sidebar items.\n     */\n    get items() {\n        return this._body.widgets;\n    }\n    /**\n     * Dispose the sidebar.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n    }\n}\n/**\n * The header for the Xircuits Debugger Panel.\n */\nexport class DebuggerHeader extends Widget {\n    /**\n     * Instantiate a new DebuggerHeader.\n     */\n    constructor(translator) {\n        super({ node: document.createElement('div') });\n        this.node.classList.add('jp-stack-panel-header');\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const title = new Widget({ node: document.createElement('h2') });\n        title.node.textContent = trans.__('Xircuits Debugger');\n        const layout = new PanelLayout();\n        layout.addWidget(title);\n        this.layout = layout;\n    }\n}\n/**\n * The toolbar for the XircuitsDebugger Panel.\n */\nexport class DebuggerToolbar extends Widget {\n    /**\n     * Instantiate a new DebuggerToolbar.\n     */\n    constructor() {\n        super({ node: document.createElement('div') });\n        /**\n         * The toolbar for the xircuits debugger.\n         */\n        this.toolbar = new Toolbar();\n        this.node.classList.add('jp-debugger-toolbar-panel');\n        const layout = new PanelLayout();\n        layout.addWidget(this.toolbar);\n        this.layout = layout;\n    }\n}\n/**\n * A namespace for `XircuitsDebugger` statics.\n */\nexport var XircuitsDebugger;\n(function (XircuitsDebugger) {\n    /**\n     * The debugger sidebar UI.\n     */\n    class Sidebar extends XircuitsDebuggerSidebar {\n    }\n    XircuitsDebugger.Sidebar = Sidebar;\n})(XircuitsDebugger || (XircuitsDebugger = {}));\n//# sourceMappingURL=SidebarDebugger.js.map","import { Dialog } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\n/*\n * Validate required dialog fields upon display\n * - Provides a generic validation by checking if required form fields are populated\n * - Expect required fields in dialog body to contain attribute: data-form-required\n *\n * @params\n *\n * options - The dialog setup options\n * formValidationFunction - Optional custom validation function\n *\n * returns a call to dialog display\n */\nexport const showFormDialog = async (options, formValidationFunction) => {\n    var _a, _b, _c, _d;\n    const dialogBody = options.body;\n    const dialog = new Dialog(options);\n    if (formValidationFunction) {\n        formValidationFunction(dialog);\n    }\n    else {\n        if (dialogBody instanceof Widget) {\n            const requiredFields = dialogBody.node.querySelectorAll('[data-form-required]');\n            if (requiredFields && requiredFields.length > 0) {\n                // Keep track of all fields already validated. Start with an empty set.\n                const fieldsValidated = new Set();\n                // Override Dialog.handleEvent to prevent user from bypassing validation upon pressing the 'Enter' key\n                const dialogHandleEvent = dialog.handleEvent;\n                dialog.handleEvent = (event) => {\n                    if (event instanceof KeyboardEvent &&\n                        event.type === 'keydown' &&\n                        event.keyCode === 13 &&\n                        fieldsValidated.size !== requiredFields.length) {\n                        // prevent action since Enter key is pressed and all fields are not validated\n                        event.stopPropagation();\n                        event.preventDefault();\n                    }\n                    else {\n                        dialogHandleEvent.call(dialog, event);\n                    }\n                };\n                // Get dialog default action button\n                const defaultButtonIndex = (_a = options.defaultButton) !== null && _a !== void 0 ? _a : ((_c = (_b = options.buttons) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) - 1;\n                const defaultButton = (_d = dialog.node\n                    .querySelector('.jp-Dialog-footer')) === null || _d === void 0 ? void 0 : _d.getElementsByTagName('button')[defaultButtonIndex];\n                // defaultButton.className += ' ' + DEFAULT_BUTTON_CLASS;\n                requiredFields.forEach((element) => {\n                    // First deal with the case the field has already been pre-populated\n                    handleSingleFieldValidation(element, fieldsValidated);\n                    const fieldType = element.tagName.toLowerCase();\n                    if (fieldType === 'select') {\n                        element.addEventListener('change', (event) => {\n                            handleSingleFieldValidation(event.target, fieldsValidated);\n                            handleAllFieldsValidation(fieldsValidated, requiredFields, defaultButton);\n                        });\n                    }\n                    else if (fieldType === 'input' || fieldType === 'textarea') {\n                        element.addEventListener('keyup', (event) => {\n                            handleSingleFieldValidation(event.target, fieldsValidated);\n                            handleAllFieldsValidation(fieldsValidated, requiredFields, defaultButton);\n                        });\n                    }\n                });\n                handleAllFieldsValidation(fieldsValidated, requiredFields, defaultButton);\n            }\n        }\n    }\n    return dialog.launch();\n};\nexport const disableDialogButton = (button) => {\n    button.setAttribute('disabled', 'disabled');\n};\nexport const enableDialogButton = (button) => {\n    button.removeAttribute('disabled');\n};\n// Update set of validated fields according to element value\nconst handleSingleFieldValidation = (element, fieldsValidated) => {\n    element.value.trim()\n        ? fieldsValidated.add(element)\n        : fieldsValidated.delete(element);\n};\n// Only enable dialog button if all required fields are validated\nconst handleAllFieldsValidation = (fieldsValidated, requiredFields, button) => {\n    fieldsValidated.size === requiredFields.length\n        ? enableDialogButton(button)\n        : disableDialogButton(button);\n};\n//# sourceMappingURL=FormDialog.js.map","import * as NumericInput from \"react-numeric-input\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport React, { useState } from 'react';\nimport Switch from \"react-switch\";\nexport const RunDialog = ({ lastAddedArgsSparkSubmit, childSparkSubmitNodes, childStringNodes, childBoolNodes, childIntNodes, childFloatNodes }) => {\n    const [checked, setChecked] = useState([false]);\n    const handleChecked = (e, i) => {\n        let newChecked = [...checked];\n        newChecked[i] = e;\n        setChecked(newChecked);\n        console.log(\"Boolean change: \", checked);\n    };\n    return (React.createElement(\"form\", null,\n        React.createElement(\"h3\", { style: { marginTop: 0, marginBottom: 5 } }, \"Hyperparameter:\"),\n        React.createElement(\"div\", null, childSparkSubmitNodes.length != 0 ?\n            React.createElement(React.Fragment, null,\n                React.createElement(\"div\", null,\n                    React.createElement(\"h4\", { style: { marginTop: 2, marginBottom: 0 } }, \"Spark Submit\")),\n                React.createElement(\"div\", null,\n                    childSparkSubmitNodes,\n                    React.createElement(\"div\", null,\n                        React.createElement(TextareaAutosize, { defaultValue: lastAddedArgsSparkSubmit, minRows: 3, maxRows: 8, name: childSparkSubmitNodes, style: { width: 205, fontSize: 12 }, autoFocus: true }))))\n            : null),\n        React.createElement(\"div\", null),\n        React.createElement(\"div\", null,\n            React.createElement(\"h4\", { style: { marginTop: 2, marginBottom: 0 } }, \"String\")),\n        childStringNodes.map((stringNode, i) => React.createElement(\"div\", { key: `index-${i}` },\n            stringNode,\n            React.createElement(\"div\", null,\n                React.createElement(\"input\", { type: \"text\", name: stringNode })))),\n        React.createElement(\"div\", null, childBoolNodes.length != 0 ?\n            React.createElement(React.Fragment, null,\n                React.createElement(\"br\", null),\n                React.createElement(\"h4\", { style: { marginTop: 2, marginBottom: 0 } }, \"Boolean\")) : null),\n        childBoolNodes.map((boolNode, i) => React.createElement(\"div\", { key: `index-${i}` },\n            boolNode,\n            React.createElement(\"div\", null,\n                React.createElement(Switch, { checked: checked[i] || false, name: boolNode, onChange: (e) => handleChecked(e, i), handleDiameter: 25, height: 20, width: 48 })))),\n        React.createElement(\"div\", null, childIntNodes.length != 0 ?\n            React.createElement(React.Fragment, null,\n                React.createElement(\"br\", null),\n                React.createElement(\"h4\", { style: { marginTop: 2, marginBottom: 0 } }, \"Integer\")) : null),\n        childIntNodes.map((intNode, i) => React.createElement(\"div\", { key: `index-${i}` },\n            intNode,\n            React.createElement(\"div\", null,\n                React.createElement(NumericInput, { className: \"form-control\", name: intNode, value: '0', min: 0, step: 1, precision: 0, mobile: true, style: {\n                        wrap: {\n                            boxShadow: '0 0 1px 1px #fff inset, 1px 1px 5px -1px #000',\n                            padding: '2px 2.26ex 2px 2px',\n                            borderRadius: '6px 3px 3px 6px',\n                            fontSize: 20,\n                            width: '10vw'\n                        },\n                        input: {\n                            borderRadius: '6px 3px 3px 6px',\n                            padding: '0.1ex 1ex',\n                            border: '#ccc',\n                            marginRight: 4,\n                            display: 'block',\n                            fontWeight: 100,\n                            width: '11.3vw'\n                        },\n                        plus: {\n                            background: 'rgba(255, 255, 255, 100)'\n                        },\n                        minus: {\n                            background: 'rgba(255, 255, 255, 100)'\n                        },\n                        btnDown: {\n                            background: 'rgba(0, 0, 0)'\n                        },\n                        btnUp: {\n                            background: 'rgba(0, 0, 0)'\n                        }\n                    } })))),\n        React.createElement(\"div\", null, childFloatNodes.length != 0 ?\n            React.createElement(React.Fragment, null,\n                React.createElement(\"br\", null),\n                React.createElement(\"h4\", { style: { marginTop: 2, marginBottom: 0 } }, \"Float\")) : null),\n        childFloatNodes.map((floatNode, i) => React.createElement(\"div\", { className: \"p-col-12\", key: `index-${i}` },\n            floatNode,\n            React.createElement(\"div\", null,\n                React.createElement(NumericInput, { className: \"form-control\", name: floatNode, value: '0.00', min: 0, step: 0.1, precision: 2, mobile: true, style: {\n                        wrap: {\n                            boxShadow: '0 0 1px 1px #fff inset, 1px 1px 5px -1px #000',\n                            padding: '2px 2.26ex 2px 2px',\n                            borderRadius: '6px 3px 3px 6px',\n                            fontSize: 20,\n                            width: '10vw'\n                        },\n                        input: {\n                            borderRadius: '6px 3px 3px 6px',\n                            padding: '0.1ex 1ex',\n                            border: '#ccc',\n                            marginRight: 4,\n                            display: 'block',\n                            fontWeight: 100,\n                            width: '11.3vw'\n                        },\n                        plus: {\n                            background: 'rgba(255, 255, 255, 100)'\n                        },\n                        minus: {\n                            background: 'rgba(255, 255, 255, 100)'\n                        },\n                        btnDown: {\n                            background: 'rgba(0, 0, 0)'\n                        },\n                        btnUp: {\n                            background: 'rgba(0, 0, 0)'\n                        }\n                    } }))))));\n};\n//# sourceMappingURL=RunDialog.js.map","import { ReactWidget } from '@jupyterlab/apputils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Widget } from '@lumino/widgets';\nexport const formDialogWidget = (dialogComponent) => {\n    const widget = ReactWidget.create(dialogComponent);\n    // Immediately update the body even though it has not yet attached in\n    // order to trigger a render of the DOM nodes from the React element.\n    MessageLoop.sendMessage(widget, Widget.Msg.UpdateRequest);\n    widget.getValue = () => {\n        var _a;\n        const form = widget.node.querySelector('form');\n        const formValues = {};\n        for (const element of Object.values((_a = form === null || form === void 0 ? void 0 : form.elements) !== null && _a !== void 0 ? _a : [])) {\n            switch (element.type) {\n                case 'checkbox':\n                    formValues[element.name] = element.checked;\n                    break;\n                default:\n                    formValues[element.name] = element.value;\n                    break;\n            }\n        }\n        return formValues;\n    };\n    return widget;\n};\n//# sourceMappingURL=formDialogwidget.js.map","import * as React from 'react';\nimport styled from '@emotion/styled';\n//namespace S {\nexport const Container = styled.div `\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n//}\nexport class DemoCanvasWidget extends React.Component {\n    render() {\n        return (React.createElement(Container, { background: this.props.background || 'rgb(60, 60, 60)', color: this.props.color || 'rgba(255,255,255, 0.05)' }, this.props.children));\n    }\n}\n//# sourceMappingURL=DemoCanvasWidget.js.map","import React from 'react';\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { commandIDs } from './components/xircuitBodyWidget';\nimport { WidgetTracker, ReactWidget } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { XircuitFactory } from './xircuitFactory';\nimport Sidebar from './tray_library/Sidebar';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { XircuitsDebugger } from './debugger/SidebarDebugger';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Log, logPlugin } from './log/LogPlugin';\nimport { requestAPI } from './server/handler';\nimport { OutputPanel } from './kernel/panel';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { runIcon, saveIcon } from '@jupyterlab/ui-components';\nimport { addNodeActionCommands } from './commands/NodeActionCommands';\nimport { Token } from '@lumino/coreutils';\nimport { xircuitsIcon, debuggerIcon, componentLibIcon, changeFavicon, xircuitsFaviconLink } from './ui-components/icons';\nimport { startRunOutputStr } from './kernel/RunOutput';\nconst FACTORY = 'Xircuits editor';\n// Export a token so other extensions can require it\nexport const IXircuitsDocTracker = new Token('xircuitsDocTracker');\n/**\n * Initialization data for the documents extension.\n */\nconst xircuits = {\n    id: 'xircuits',\n    autoStart: true,\n    requires: [\n        ILauncher,\n        IFileBrowserFactory,\n        ILayoutRestorer,\n        IRenderMimeRegistry,\n        IDocumentManager,\n        ITranslator\n    ],\n    provides: IXircuitsDocTracker,\n    activate: async (app, launcher, browserFactory, restorer, rendermime, docmanager, translator) => {\n        console.log('Xircuits is activated!');\n        // Creating the widget factory to register it so the document manager knows about\n        // our new DocumentWidget\n        const widgetFactory = new XircuitFactory({\n            name: FACTORY,\n            fileTypes: ['xircuits'],\n            defaultFor: ['xircuits'],\n            app: app,\n            shell: app.shell,\n            commands: app.commands,\n            serviceManager: app.serviceManager\n        });\n        // register the filetype\n        app.docRegistry.addFileType({\n            name: 'xircuits',\n            displayName: 'Xircuits',\n            extensions: ['.xircuits'],\n            icon: xircuitsIcon\n        });\n        // Registering the widget factory\n        app.docRegistry.addWidgetFactory(widgetFactory);\n        const tracker = new WidgetTracker({\n            namespace: \"Xircuits Tracker\"\n        });\n        // Add the widget to the tracker when it's created\n        widgetFactory.widgetCreated.connect((sender, widget) => {\n            // Notify the instance tracker if restore data needs to update.\n            void tracker.add(widget);\n            // Notify the widget tracker if restore data needs to update\n            widget.context.pathChanged.connect(() => {\n                void tracker.save(widget);\n            });\n        });\n        // Handle state restoration\n        void restorer.restore(tracker, {\n            command: commandIDs.openDocManager,\n            args: widget => ({\n                path: widget.context.path,\n                factory: FACTORY\n            }),\n            name: widget => widget.context.path\n        });\n        // Find the MainLogo widget in the shell and replace it with the Xircuits Logo\n        const widgets = app.shell.widgets('top');\n        let widget = widgets.next();\n        while (widget !== undefined) {\n            if (widget.id === 'jp-MainLogo') {\n                xircuitsIcon.element({\n                    container: widget.node,\n                    justify: 'center',\n                    height: 'auto',\n                    width: '25px'\n                });\n                break;\n            }\n            widget = widgets.next();\n        }\n        // Change the favicon\n        changeFavicon(xircuitsFaviconLink);\n        // Creating the sidebar widget for the xai components\n        const sidebarWidget = ReactWidget.create(React.createElement(Sidebar, { lab: app }));\n        sidebarWidget.id = 'xircuits-component-sidebar';\n        sidebarWidget.title.icon = componentLibIcon;\n        sidebarWidget.title.caption = \"Xircuits Component Library\";\n        restorer.add(sidebarWidget, sidebarWidget.id);\n        app.shell.add(sidebarWidget, \"left\");\n        // Creating the sidebar debugger\n        const sidebarDebugger = new XircuitsDebugger.Sidebar({ app, translator, widgetFactory });\n        sidebarDebugger.id = 'xircuits-debugger-sidebar';\n        sidebarDebugger.title.icon = debuggerIcon;\n        sidebarDebugger.title.caption = \"Xircuits Debugger\";\n        restorer.add(sidebarDebugger, sidebarDebugger.id);\n        app.shell.add(sidebarDebugger, 'right', { rank: 1001 });\n        // Additional commands for node action\n        addNodeActionCommands(app, tracker, translator);\n        // Add a command to open xircuits sidebar debugger\n        app.commands.addCommand(commandIDs.openDebugger, {\n            execute: () => {\n                if (sidebarDebugger.isHidden) {\n                    app.shell.activateById(sidebarDebugger.id);\n                }\n            },\n        });\n        // Add a command for creating a new xircuits file.\n        app.commands.addCommand(commandIDs.createNewXircuit, {\n            label: (args) => (args['isLauncher'] ? 'Xircuits File' : 'Create New Xircuits'),\n            icon: xircuitsIcon,\n            caption: 'Create a new xircuits file',\n            execute: () => {\n                app.commands\n                    .execute(commandIDs.newDocManager, {\n                    path: browserFactory.defaultBrowser.model.path,\n                    type: 'file',\n                    ext: '.xircuits'\n                })\n                    .then(async (model) => {\n                    const newWidget = await app.commands.execute(commandIDs.openDocManager, {\n                        path: model.path,\n                        factory: FACTORY\n                    });\n                    newWidget.context.ready.then(() => {\n                        app.commands.execute(commandIDs.saveXircuit, {\n                            path: model.path\n                        });\n                    });\n                });\n            }\n        });\n        async function requestToGenerateArbitraryFile(path, pythonScript) {\n            const dataToSend = { \"currentPath\": path.split(\".xircuits\")[0] + \".py\", \"compilePythonScript\": pythonScript };\n            try {\n                const server_reply = await requestAPI('file/generate', {\n                    body: JSON.stringify(dataToSend),\n                    method: 'POST',\n                });\n                return server_reply;\n            }\n            catch (reason) {\n                console.error(`Error on POST /xircuits/file/generate ${dataToSend}.\\n${reason}`);\n            }\n        }\n        ;\n        app.commands.addCommand(commandIDs.createArbitraryFile, {\n            execute: async (args) => {\n                const current_path = tracker.currentWidget.context.path;\n                const path = current_path;\n                const message = typeof args['pythonCode'] === undefined ? '' : args['pythonCode'];\n                const showOutput = typeof args['showOutput'] === undefined ? false : args['showOutput'];\n                const request = await requestToGenerateArbitraryFile(path, message); // send this file and create new file\n                if (request[\"message\"] == \"completed\") {\n                    const model_path = current_path.split(\".xircuits\")[0] + \".py\";\n                    await app.commands.execute(commandIDs.openDocManager, {\n                        path: model_path\n                    });\n                    docmanager.closeFile(model_path);\n                    if (showOutput) {\n                        alert(`${model_path} successfully compiled!`);\n                    }\n                }\n                else {\n                    alert(\"Failed to generate arbitrary file!\");\n                }\n            }\n        });\n        let outputPanel;\n        /**\n          * Creates a output panel.\n          *\n          * @returns The panel\n          */\n        async function createPanel() {\n            outputPanel = new OutputPanel(app.serviceManager, rendermime, widgetFactory, translator);\n            app.shell.add(outputPanel, 'main', {\n                mode: 'split-bottom'\n            });\n            return outputPanel;\n        }\n        // Dispose the output panel when closing browser or tab\n        window.addEventListener('beforeunload', function (e) {\n            outputPanel.dispose();\n        });\n        async function requestToSparkSubmit(path, addArgs) {\n            const dataToSend = { \"currentPath\": path, \"addArgs\": addArgs };\n            try {\n                const server_reply = await requestAPI('spark/submit', {\n                    body: JSON.stringify(dataToSend),\n                    method: 'POST',\n                });\n                return server_reply;\n            }\n            catch (reason) {\n                console.error(`Error on POST /xircuits/spark/submit ${dataToSend}.\\n${reason}`);\n            }\n        }\n        ;\n        // Execute xircuits python script and display at output panel\n        app.commands.addCommand(commandIDs.executeToOutputPanel, {\n            execute: async (args) => {\n                const xircuitsLogger = new Log(app);\n                const current_path = tracker.currentWidget.context.path;\n                const model_path = current_path.split(\".xircuits\")[0] + \".py\";\n                const message = typeof args['runCommand'] === 'undefined' ? '' : args['runCommand'];\n                const debug_mode = typeof args['debug_mode'] === 'undefined' ? '' : args['debug_mode'];\n                const runType = typeof args['runType'] === 'undefined' ? '' : args['runType'];\n                const addArgs = typeof args['addArgsSparkSubmit'] === 'undefined' ? '' : args['addArgsSparkSubmit'];\n                // Create the panel if it does not exist\n                if (!outputPanel || outputPanel.isDisposed) {\n                    await createPanel();\n                }\n                outputPanel.session.ready.then(async () => {\n                    let code = startRunOutputStr();\n                    code += \"%run \" + model_path + message + debug_mode;\n                    // Run spark submit when run type is Spark Submit\n                    if (runType == 'spark-submit') {\n                        const request = await requestToSparkSubmit(model_path, addArgs);\n                        const errorMsg = request[\"stderr\"];\n                        const outputMsg = request[\"stdout\"];\n                        let msg = \"\";\n                        // Display the errors if there no output\n                        if (outputMsg != 0) {\n                            msg = outputMsg;\n                        }\n                        else {\n                            msg = errorMsg;\n                        }\n                        // Display the multi-line message\n                        const outputCode = `\"\"\"${msg}\"\"\"`;\n                        code = `print(${outputCode})`;\n                    }\n                    outputPanel.execute(code, xircuitsLogger);\n                });\n            },\n        });\n        // Add command signal to save xircuits\n        app.commands.addCommand(commandIDs.saveXircuit, {\n            label: \"Save\",\n            icon: saveIcon,\n            execute: args => {\n                widgetFactory.saveXircuitSignal.emit(args);\n            }\n        });\n        // Add command signal to compile xircuits\n        app.commands.addCommand(commandIDs.compileXircuit, {\n            execute: args => {\n                widgetFactory.compileXircuitSignal.emit(args);\n            }\n        });\n        // Add command signal to run xircuits\n        app.commands.addCommand(commandIDs.runXircuit, {\n            label: \"Run Xircuits\",\n            icon: runIcon,\n            execute: args => {\n                widgetFactory.runXircuitSignal.emit(args);\n            }\n        });\n        // Add command signal to debug xircuits\n        app.commands.addCommand(commandIDs.debugXircuit, {\n            execute: args => {\n                widgetFactory.debugXircuitSignal.emit(args);\n            }\n        });\n        // Add command signal to lock xircuits\n        app.commands.addCommand(commandIDs.lockXircuit, {\n            execute: args => {\n                widgetFactory.lockNodeSignal.emit(args);\n            }\n        });\n        // Add command signal to test xircuits\n        app.commands.addCommand(commandIDs.testXircuit, {\n            execute: args => {\n                widgetFactory.testXircuitSignal.emit(args);\n            }\n        });\n        // Add a launcher item if the launcher is available.\n        if (launcher) {\n            launcher.add({\n                command: commandIDs.createNewXircuit,\n                rank: 1,\n                args: { isLauncher: true },\n                category: 'Other'\n            });\n        }\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    xircuits,\n    logPlugin\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map","export function startRunOutputStr() {\n    let code_str;\n    code_str =\n        `print(\n\"\"\"\n======================================\n__   __  ___                _ _\n\\\\ \\\\  \\\\ \\\\/ (_)_ __ ___ _   _(_) |_ ___\n \\\\ \\\\  \\\\  /| | '__/ __| | | | | __/ __|\n / /  /  \\\\| | | | (__| |_| | | |_\\\\__ \\\\\\\\\n/_/  /_/\\\\_\\\\_|_|  \\\\___|\\\\__,_|_|\\\\__|___/\n\n======================================\n\"\"\")\\n`;\n    code_str += \"print('Xircuits is running...\\\\n')\\n\";\n    return code_str;\n}\n//# sourceMappingURL=RunOutput.js.map","import { SessionContext, sessionContextDialogs, } from '@jupyterlab/apputils';\nimport { OutputAreaModel, SimplifiedOutputArea } from '@jupyterlab/outputarea';\nimport { nullTranslator, } from '@jupyterlab/translation';\nimport { StackedPanel } from '@lumino/widgets';\nimport { xircuitsIcon } from '../ui-components/icons';\n/**\n * The class name added to the output panel.\n */\nconst PANEL_CLASS = 'jp-RovaPanel';\n/**\n * A panel with the ability to add other children.\n */\nexport class OutputPanel extends StackedPanel {\n    constructor(manager, rendermime, xircuitFactory, translator) {\n        super();\n        this._translator = translator || nullTranslator;\n        this._trans = this._translator.load('jupyterlab');\n        this._xircuitFactory = xircuitFactory;\n        this.addClass(PANEL_CLASS);\n        this.id = 'xircuit-output-panel';\n        this.title.label = this._trans.__('Xircuit Output');\n        this.title.closable = true;\n        this.title.icon = xircuitsIcon;\n        this._sessionContext = new SessionContext({\n            sessionManager: manager.sessions,\n            specsManager: manager.kernelspecs,\n            name: 'Xircuit Output Process',\n        });\n        this._outputareamodel = new OutputAreaModel();\n        this._outputarea = new SimplifiedOutputArea({\n            model: this._outputareamodel,\n            rendermime: rendermime,\n        });\n        this.addWidget(this._outputarea);\n        void this._sessionContext\n            .initialize()\n            .then(async (value) => {\n            if (value) {\n                await sessionContextDialogs.selectKernel(this._sessionContext);\n                // Dispose panel when no kernel selected\n                if (this._sessionContext.hasNoKernel) {\n                    super.dispose();\n                }\n            }\n        })\n            .catch((reason) => {\n            console.error(`Failed to initialize the session in Xircuit Output.\\n${reason}`);\n        });\n    }\n    get session() {\n        return this._sessionContext;\n    }\n    dispose() {\n        this._sessionContext.sessionManager.shutdown(this._sessionContext.session.id);\n        this._sessionContext.dispose();\n        this._xircuitFactory.terminateDebugSignal.emit(this);\n        this._sessionContext.sessionManager.refreshRunning();\n        super.dispose();\n    }\n    execute(code, xircuitLogger) {\n        SimplifiedOutputArea.execute(code, this._outputarea, this._sessionContext)\n            .then((msg) => {\n            if (this._outputarea.model.toJSON().length > 0) {\n                for (let index = 0; index < this._outputarea.model.toJSON().length; index++) {\n                    let is_error = this._outputarea.model.toJSON()[index].output_type == \"error\";\n                    if (is_error) {\n                        let ename = this._outputarea.model.toJSON()[index][\"ename\"];\n                        let evalue = this._outputarea.model.toJSON()[index][\"evalue\"];\n                        let traceback = this._outputarea.model.toJSON()[index][\"traceback\"];\n                        if (evalue.includes(\"File\") && evalue.includes(\"not found\")) {\n                            alert(ename + \": \" + evalue + \" Please compile first!\");\n                            xircuitLogger.error(ename + \": \" + evalue);\n                            console.log(evalue + \" Please compile first!\");\n                            return;\n                        }\n                        for (let data of traceback) {\n                            xircuitLogger.error(data);\n                        }\n                        return;\n                    }\n                    let text = this._outputarea.model.toJSON()[index][\"text\"];\n                    for (let text_index = 0; text_index < text.split(\"\\n\").length; text_index++) {\n                        if (text.split(\"\\n\")[text_index].trim() != \"\") {\n                            xircuitLogger.info(text.split(\"\\n\")[text_index]);\n                        }\n                    }\n                }\n            }\n        })\n            .catch((reason) => console.error(reason));\n    }\n    onCloseRequest(msg) {\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n}\n//# sourceMappingURL=panel.js.map","import { ReactWidget } from '@jupyterlab/apputils';\nimport { HTMLSelect } from '@jupyterlab/ui-components';\nimport { UUID } from '@lumino/coreutils';\nimport React from 'react';\n/**\n * A toolbar widget that switches log levels.\n */\nexport default class LogLevelSwitcher extends ReactWidget {\n    /**\n     * Construct a new cell type switcher.\n     *\n     * @param widget The log console panel\n     */\n    constructor(widget) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         *\n         * @param event The HTML select event.\n         */\n        this.handleChange = (event) => {\n            if (this._logConsole.logger) {\n                this._logConsole.logger.level = event.target.value;\n            }\n            this.update();\n        };\n        /**\n         * Handle `keydown` events for the HTMLSelect component.\n         *\n         * @param event The keyboard event.\n         */\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === 13) {\n                this._logConsole.activate();\n            }\n        };\n        this._id = `level-${UUID.uuid4()}`;\n        this.addClass('jp-LogConsole-toolbarLogLevel');\n        this._logConsole = widget;\n        this._logConsole.logger.level = 'debug';\n        if (widget.source) {\n            this.update();\n        }\n        widget.sourceChanged.connect(this._updateSource, this);\n    }\n    _updateSource(sender, { oldValue, newValue }) {\n        // Transfer stateChanged handler to new source logger\n        if (oldValue !== null) {\n            const logger = sender.loggerRegistry.getLogger(oldValue);\n            logger.stateChanged.disconnect(this.update, this);\n        }\n        if (newValue !== null) {\n            const logger = sender.loggerRegistry.getLogger(newValue);\n            logger.stateChanged.connect(this.update, this);\n        }\n        this.update();\n    }\n    render() {\n        const logger = this._logConsole.logger;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"label\", { htmlFor: this._id, className: logger === null\n                    ? 'jp-LogConsole-toolbarLogLevel-disabled'\n                    : undefined }, \"Log Level:\"),\n            React.createElement(HTMLSelect, { id: this._id, className: \"jp-LogConsole-toolbarLogLevelDropdown\", onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: logger === null || logger === void 0 ? void 0 : logger.level, \"aria-label\": \"Log level\", disabled: logger === null, options: logger === null\n                    ? []\n                    : ['Critical', 'Error', 'Warning', 'Info', 'Debug'].map((label) => ({ label, value: label.toLowerCase() })) })));\n    }\n}\n//# sourceMappingURL=LogLevelSwitcher.js.map","import { ILayoutRestorer } from '@jupyterlab/application';\nimport { addIcon, clearIcon, listIcon } from '@jupyterlab/ui-components';\nimport LogLevelSwitcher from './LogLevelSwitcher';\nimport { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { MainAreaWidget, CommandToolbarButton, } from '@jupyterlab/apputils';\nimport { LoggerRegistry, LogConsolePanel, } from '@jupyterlab/logconsole';\nimport { commandIDs } from '../components/xircuitBodyWidget';\n/**\n * The command IDs used by the log plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.addCheckpoint = 'Xircuit-log:add-checkpoint';\n    CommandIDs.clear = 'Xircuit-log:clear';\n    CommandIDs.openLog = 'Xircuit-log:open';\n    CommandIDs.setLevel = 'Xircuit-log:set-level';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the log plugin.\n */\nexport const logPlugin = {\n    id: 'xircuit-log',\n    autoStart: true,\n    requires: [\n        ICommandPalette,\n        ILayoutRestorer,\n        IRenderMimeRegistry\n    ],\n    activate: (app, palette, restorer, rendermime) => {\n        console.log('Xircuit-Log is activated!');\n        let logConsolePanel = null;\n        let logConsoleWidget = null;\n        const loggertracker = new WidgetTracker({\n            namespace: 'Xircuit-log',\n        });\n        if (restorer) {\n            void restorer.restore(loggertracker, {\n                command: CommandIDs.openLog,\n                name: () => 'Xircuit-log'\n            });\n        }\n        app.commands.addCommand(CommandIDs.addCheckpoint, {\n            execute: () => { var _a; return (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.checkpoint(); },\n            icon: addIcon,\n            isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n            label: 'Add Checkpoint',\n        });\n        app.commands.addCommand(CommandIDs.clear, {\n            execute: () => { var _a; return (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.clear(); },\n            icon: clearIcon,\n            isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n            label: 'Clear Log',\n        });\n        app.commands.addCommand(CommandIDs.setLevel, {\n            execute: (args) => {\n                if (logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) {\n                    logConsolePanel.logger.level = args.level;\n                }\n            },\n            isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n            label: (args) => `Set Log Level to ${args.level}`,\n        });\n        const createLogConsoleWidget = () => {\n            logConsolePanel = new LogConsolePanel(new LoggerRegistry({\n                defaultRendermime: rendermime,\n                maxLength: 1000,\n            }));\n            logConsolePanel.source = 'xircuit';\n            logConsoleWidget = new MainAreaWidget({\n                content: logConsolePanel,\n            });\n            logConsoleWidget.addClass('jp-LogConsole');\n            logConsoleWidget.title.label = 'xircuits Log console';\n            logConsoleWidget.title.icon = listIcon;\n            logConsoleWidget.toolbar.addItem('checkpoint', new CommandToolbarButton({\n                commands: app.commands,\n                id: CommandIDs.addCheckpoint,\n            }));\n            logConsoleWidget.toolbar.addItem('clear', new CommandToolbarButton({\n                commands: app.commands,\n                id: CommandIDs.clear,\n            }));\n            logConsoleWidget.toolbar.addItem('level', new LogLevelSwitcher(logConsoleWidget.content));\n            logConsoleWidget.disposed.connect(() => {\n                logConsoleWidget = null;\n                logConsolePanel = null;\n                app.commands.notifyCommandChanged();\n            });\n            app.shell.add(logConsoleWidget, 'main', { mode: 'split-bottom' });\n            loggertracker.add(logConsoleWidget);\n            logConsoleWidget.update();\n            app.commands.notifyCommandChanged();\n        };\n        app.commands.addCommand(CommandIDs.openLog, {\n            label: 'Open Xircuits Log Console',\n            caption: 'Xircuits log console',\n            icon: listIcon,\n            isToggled: () => logConsoleWidget !== null,\n            execute: () => {\n                if (logConsoleWidget) {\n                    logConsoleWidget.dispose();\n                }\n                else {\n                    createLogConsoleWidget();\n                }\n            },\n        });\n        palette.addItem({\n            command: CommandIDs.openLog,\n            category: 'Examples',\n        });\n        app.commands.addCommand('jlab-examples/custom-log-console:logHTMLMessage', {\n            label: 'HTML log message',\n            caption: 'Custom HTML log message example.',\n            execute: () => {\n                var _a;\n                const msg = {\n                    type: 'html',\n                    level: 'debug',\n                    data: '<div>Hello world HTML!!</div>',\n                };\n                (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.log(msg);\n            },\n        });\n        app.commands.addCommand('jlab-examples/custom-log-console:logTextMessage', {\n            label: 'Text log message',\n            caption: 'Custom text log message example.',\n            execute: () => {\n                var _a;\n                const msg = {\n                    type: 'text',\n                    level: 'info',\n                    data: 'Hello world text!!',\n                };\n                (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.log(msg);\n            },\n        });\n        app.commands.addCommand(commandIDs.outputMsg, {\n            label: 'Output log message',\n            caption: 'Output xircuits log message.',\n            execute: args => {\n                var _a;\n                const outputMsg = typeof args['outputMsg'] === 'undefined' ? '' : args['outputMsg'];\n                const setLevel = args['level'];\n                const data = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/plain': outputMsg,\n                    },\n                };\n                const msg = {\n                    type: 'output',\n                    level: setLevel,\n                    data,\n                };\n                (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.log(msg);\n            },\n        });\n    },\n};\n/**\n * Emit output message to xircuit log based on severity level\n */\nexport class Log {\n    constructor(app) {\n        this.app = app;\n    }\n    debug(msg, ...supportingDetailes) {\n        this.emitLogMessage(\"debug\", msg, supportingDetailes);\n    }\n    info(msg, ...supportingDetailes) {\n        this.emitLogMessage(\"info\", msg, supportingDetailes);\n    }\n    warn(msg, ...supportingDetailes) {\n        this.emitLogMessage(\"warning\", msg, supportingDetailes);\n    }\n    error(msg, ...supportingDetailes) {\n        this.emitLogMessage(\"error\", msg, supportingDetailes);\n    }\n    critical(msg, ...supportingDetailes) {\n        this.emitLogMessage(\"critical\", msg, supportingDetailes);\n    }\n    emitLogMessage(msgType, msg, supportingDetailes) {\n        if (supportingDetailes.length > 0) {\n            const logMsg = msg + supportingDetailes;\n            this.app.commands.execute(commandIDs.outputMsg, {\n                outputMsg: logMsg,\n                level: msgType\n            });\n        }\n        else {\n            this.app.commands.execute(commandIDs.outputMsg, {\n                outputMsg: msg,\n                level: msgType\n            });\n        }\n    }\n}\n//# sourceMappingURL=LogPlugin.js.map","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'xircuits', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n//# sourceMappingURL=handler.js.map","import { requestAPI } from \"../server/handler\";\nasync function get_all_components_method() {\n    const components = await requestAPI('components/');\n    return components;\n}\nexport default async function ComponentList(serviceManager) {\n    let component_list_result = await get_all_components_method();\n    return component_list_result;\n}\n//# sourceMappingURL=Component.js.map","import { CustomNodeModel } from \"../components/CustomNodeModel\";\nexport function GeneralComponentLibrary(props) {\n    let node = null;\n    // For now, comment this first until we've use for it\n    // if (props.type === 'math') {\n    //     node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n    //     node.addInPortEnhance('▶', 'in-0');\n    //     node.addInPortEnhance('A', 'in-1');\n    //     node.addInPortEnhance('B', 'in-2');\n    //     node.addOutPortEnhance('▶', 'out-0');\n    //     node.addOutPortEnhance('value', 'out-1');\n    // } else if (props.type === 'convert') {\n    //     node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n    //     node.addInPortEnhance('▶', 'in-0');\n    //     node.addInPortEnhance('model', 'parameter-string-in-1');\n    //     node.addOutPortEnhance('▶', 'out-0');\n    //     node.addOutPortEnhance('converted', 'out-1');\n    // } else \n    if (props.type === 'string') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let theResponse = window.prompt('Enter String Value (Without Quotes):');\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(theResponse, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter String Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (String): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n    }\n    else if (props.type === 'int') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let theResponse = window.prompt('Enter Int Value (Without Quotes):');\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(theResponse, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter Int Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (Int): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n    }\n    else if (props.type === 'float') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let theResponse = window.prompt('Enter Float Value (Without Quotes):');\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(theResponse, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter Float Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (Float): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n    }\n    else if (props.type === 'boolean') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let portLabel = props.name.split(' ');\n            portLabel = portLabel[portLabel.length - 1];\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(portLabel, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter Boolean Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (Boolean): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n    }\n    else if (props.type === 'list') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let theResponse = window.prompt('Enter List Values (Without [] Brackets):');\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(theResponse, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter List Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (List): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n    }\n    else if (props.type === 'tuple') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let theResponse = window.prompt('Enter Tuple Values (Without () Brackets):');\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(theResponse, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter Tuple Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (Tuple): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n    }\n    else if (props.type === 'dict') {\n        if ((props.name).startsWith(\"Literal\")) {\n            let theResponse = window.prompt('Enter Dict Values (Without {} Brackets):');\n            node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance(theResponse, 'out-0');\n        }\n        else {\n            let theResponse = window.prompt('notice', 'Enter Dict Name (Without Quotes):');\n            node = new CustomNodeModel({ name: \"Hyperparameter (Dict): \" + theResponse, color: props.color, extras: { \"type\": props.type } });\n            node.addOutPortEnhance('▶', 'parameter-out-0');\n        }\n        // } else if (props.type === 'debug') {\n        //     node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n        //     node.addInPortEnhance('▶', 'in-0');\n        //     node.addInPortEnhance('props Set', 'parameter-in-1');\n        //     node.addOutPortEnhance('▶', 'out-0');\n        // } else if (props.type === 'enough') {\n        //     node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n        //     node.addInPortEnhance('▶', 'in-0');\n        //     node.addInPortEnhance('Target Accuracy', 'parameter-float-in-1');\n        //     node.addInPortEnhance('Max Retries', 'parameter-int-in-2');\n        //     node.addInPortEnhance('Metrics', 'parameter-string-in-3');\n        //     node.addOutPortEnhance('▶', 'out-0');\n        //     node.addOutPortEnhance('Should Retrain', 'out-1');\n    }\n    else if (props.type === 'literal') {\n        node = new CustomNodeModel({ name: props.name, color: props.color, extras: { \"type\": props.type } });\n        node.addOutPortEnhance('Value', 'out-0');\n    }\n    return node;\n}\n//# sourceMappingURL=GeneralComponentLib.js.map","import ComponentList from './Component';\nimport React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { TrayWidget } from './TrayWidget';\nimport { Accordion, AccordionItem, AccordionItemHeading, AccordionItemButton, AccordionItemPanel } from \"react-accessible-accordion\";\nimport { requestAPI } from '../server/handler';\nexport const Body = styled.div `\n  flex-grow: 1;\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 100%;\n  background-color: black;\n  height: 100%;\n  overflow-y: auto;\n`;\nexport const Content = styled.div `\n    display: flex;\n    flex-grow: 1;\n    flex-wrap: wrap;\n    max-height: auto;\n    'border-top': '4px solid #dfe2e5'\n`;\nconst headerList = [\n    { task: 'GENERAL', id: 1 }\n];\nconst advancedList = [\n    { task: 'ADVANCED', id: 1 }\n];\nconst colorList_adv = [\n    { task: \"rgb(192,255,0)\", id: 1 },\n    { task: \"rgb(0,102,204)\", id: 2 },\n    { task: \"rgb(255,153,102)\", id: 3 },\n    { task: \"rgb(255,102,102)\", id: 4 },\n    { task: \"rgb(15,255,255)\", id: 5 },\n    { task: \"rgb(255,204,204)\", id: 6 },\n    { task: \"rgb(153,204,51)\", id: 7 },\n    { task: \"rgb(255,153,0)\", id: 8 },\n    { task: \"rgb(255,204,0)\", id: 9 },\n    { task: \"rgb(204,204,204)\", id: 10 },\n    { task: \"rgb(153,204,204)\", id: 11 },\n    { task: \"rgb(153,0,102)\", id: 12 },\n    { task: \"rgb(102,51,102)\", id: 13 },\n    { task: \"rgb(153,51,204)\", id: 14 },\n    { task: \"rgb(102,102,102)\", id: 15 },\n    { task: \"rgb(255,102,0)\", id: 16 },\n    { task: \"rgb(51,51,51)\", id: 17 },\n];\nconst colorList_general = [\n    { task: \"rgb(21,21,51)\", id: 1 }\n];\nasync function fetchComponent(componentList) {\n    let component_root = componentList.map(x => x[\"category\"]);\n    let headers = Array.from(new Set(component_root));\n    let headerList = [];\n    let headerList2 = [];\n    let displayHeaderList = [];\n    for (let headerIndex = 0; headerIndex < headers.length; headerIndex++) {\n        if (headers[headerIndex] == 'ADVANCED' || headers[headerIndex] == 'GENERAL') {\n            headerList.push(headers[headerIndex]);\n        }\n        else {\n            headerList2.push(headers[headerIndex]);\n        }\n    }\n    if (headerList.length != 0) {\n        headerList = headerList.sort((a, b) => a < b ? 1 : a > b ? -1 : 0);\n        headers = [...headerList, ...headerList2];\n        for (let headerIndex2 = 0; headerIndex2 < headers.length; headerIndex2++) {\n            displayHeaderList.push({\n                \"task\": headers[headerIndex2],\n                \"id\": headerIndex2 + 1\n            });\n        }\n    }\n    return displayHeaderList;\n}\nexport default function Sidebar(props) {\n    const [componentList, setComponentList] = React.useState([]);\n    const [category, setCategory] = React.useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [runOnce, setRunOnce] = useState(false);\n    let handleOnChange = (event) => {\n        setSearchTerm(\"\");\n        setSearchTerm(event.target.value);\n    };\n    function handleSearchOnClick() {\n        setSearchTerm(\"\");\n        setSearchTerm(searchTerm);\n    }\n    async function getConfig(request) {\n        const dataToSend = { \"config_request\": request };\n        try {\n            const server_reply = await requestAPI('get/config', {\n                body: JSON.stringify(dataToSend),\n                method: 'POST',\n            });\n            return server_reply;\n        }\n        catch (reason) {\n            console.error(`Error on POST get/config ${dataToSend}.\\n${reason}`);\n        }\n    }\n    ;\n    const fetchComponentList = async () => {\n        // get the component list by sending the jupyterlab frontend and base path\n        const response_1 = await ComponentList(props.lab.serviceManager);\n        // get the header from the components\n        const response_2 = await fetchComponent(response_1);\n        // to ensure the component list is empty before setting the component list\n        if (response_1.length > 0) {\n            setComponentList([]);\n            setCategory([]);\n        }\n        setComponentList(response_1);\n        setCategory(response_2);\n    };\n    useEffect(() => {\n        if (!runOnce) {\n            fetchComponentList();\n            setRunOnce(true);\n        }\n    }, [category, componentList]);\n    function handleRefreshOnClick() {\n        fetchComponentList();\n    }\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            fetchComponentList();\n        }, 600000); // every 10 minutes should re-fetch the component list\n        return () => clearInterval(intervalId);\n    }, [category, componentList]);\n    return (React.createElement(Body, null,\n        React.createElement(Content, null,\n            React.createElement(TrayWidget, null,\n                React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"search-input\" },\n                        React.createElement(\"input\", { type: \"text\", name: \"\", value: searchTerm, placeholder: \"SEARCH\", className: \"search-input__text-input\", style: { width: \"75%\" }, onChange: handleOnChange }),\n                        React.createElement(\"a\", { onClick: handleSearchOnClick, className: \"search-input__button\" },\n                            React.createElement(\"i\", { className: \"fa fa-search \" })),\n                        React.createElement(\"a\", { onClick: handleRefreshOnClick, className: \"search-input__button\" },\n                            React.createElement(\"i\", { className: \"fa fa-refresh \" }))),\n                    React.createElement(Accordion, { allowZeroExpanded: true }, category.filter((val) => {\n                        if (searchTerm == \"\") {\n                            return val;\n                        }\n                    }).map((val, i) => {\n                        return (React.createElement(AccordionItem, { key: `index-1-${val[\"task\"].toString()}` },\n                            React.createElement(AccordionItemHeading, null,\n                                React.createElement(AccordionItemButton, null, val[\"task\"])),\n                            React.createElement(AccordionItemPanel, null, componentList.filter((componentVal) => {\n                                if (searchTerm == \"\") {\n                                    return componentVal;\n                                }\n                            }).map((componentVal, i2) => {\n                                if (componentVal[\"category\"].toString().toUpperCase() == val[\"task\"].toString()) {\n                                    return (React.createElement(\"div\", { key: `index-1-${i2}` },\n                                        React.createElement(TrayItemWidget, { model: {\n                                                type: componentVal.type,\n                                                name: componentVal.task\n                                            }, name: componentVal.task, color: componentVal.color, app: props.lab, path: componentVal.file_path })));\n                                }\n                            }))));\n                    })),\n                    componentList.filter((val) => {\n                        if (searchTerm != \"\" && val.task.toLowerCase().includes(searchTerm.toLowerCase())) {\n                            return val;\n                        }\n                    }).map((val, i) => {\n                        return (React.createElement(\"div\", { key: `index-3-${i}` },\n                            React.createElement(TrayItemWidget, { model: { type: val.type, name: val.task }, name: val.task, color: val.color, app: props.lab, path: val.file_path })));\n                    }))))));\n}\n;\n//# sourceMappingURL=Sidebar.js.map","import * as React from 'react';\nimport styled from '@emotion/styled';\nexport const Tray = styled.div `\n\tcolor: black;\n\tfont-family: Helvetica, Arial;\n\tpadding: 7px;\n\twidth: auto;\n\tmargin: 7px;\n\tborder: solid 1px ${(p) => p.color};\n\tborder-radius: 5px;\n\tmargin-bottom: 2px;\n\tcursor: pointer;\n`;\nexport class TrayItemWidget extends React.Component {\n    render() {\n        return (React.createElement(Tray, { color: this.props.color || \"white\", draggable: true, onDragStart: (event) => {\n                event.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n                this.forceUpdate();\n            }, onClick: (event) => {\n                if (event.ctrlKey || event.metaKey) {\n                    const { commands } = this.props.app;\n                    commands.execute('docmanager:open', {\n                        path: this.props.path\n                    });\n                }\n                this.forceUpdate();\n            }, onDoubleClick: (event) => {\n                if (this.props.path != \"\") {\n                    const { commands } = this.props.app;\n                    commands.execute('docmanager:open', {\n                        path: this.props.path\n                    });\n                }\n                this.forceUpdate();\n            }, className: \"tray-item\" }, this.props.name));\n    }\n}\n//# sourceMappingURL=TrayItemWidget.js.map","import * as React from 'react';\nimport styled from '@emotion/styled';\nexport const Tray = styled.div `\n\tmin-width: 150px;\n\tbackground: rgb(255, 255, 255);\n\tflex-grow: 1;\n\twidth: 150px;\n\tflex-shrink: 1;\n\tmax-height: auto;\n\toverflow-y: auto;\n`;\nexport class TrayWidget extends React.Component {\n    render() {\n        return React.createElement(Tray, null, this.props.children);\n    }\n}\n//# sourceMappingURL=TrayWidget.js.map","import { LabIcon } from '@jupyterlab/ui-components';\nimport xircuitsSvg from '../../style/icons/xpress-logo.svg';\nimport debuggerSvg from '../../style/icons/debugger.svg';\nimport lockSvg from '../../style/icons/lock.svg';\nimport breakpointSvg from '../../style/icons/breakpoint.svg';\nimport nextSvg from '../../style/icons/next.svg';\nimport revertSvg from '../../style/icons/revert.svg';\nimport componentLibSvg from '../../style/icons/component-library.svg';\nexport const xircuitsFaviconLink = 'https://raw.githubusercontent.com/XpressAI/xircuits/master/style/icons/xpress-logo.ico';\nexport const xircuitsIcon = new LabIcon({ name: 'xircuits:xircuits', svgstr: xircuitsSvg });\nexport const debuggerIcon = new LabIcon({ name: 'xircuits:debuggerIcon', svgstr: debuggerSvg });\nexport const lockIcon = new LabIcon({ name: 'xircuits:lockIcon', svgstr: lockSvg });\nexport const breakpointIcon = new LabIcon({ name: 'xircuits:breakpointIcon', svgstr: breakpointSvg });\nexport const nextIcon = new LabIcon({ name: 'xircuits:nextIcon', svgstr: nextSvg });\nexport const revertIcon = new LabIcon({ name: 'xircuits:revertIcon', svgstr: revertSvg });\nexport const componentLibIcon = new LabIcon({ name: 'xircuits:componentLibIcon', svgstr: componentLibSvg });\nexport function changeFavicon(src) {\n    let head = document.head || document.getElementsByTagName('head')[0];\n    let link = document.createElement('link'), oldLink = document.getElementById('dynamic-favicon');\n    link.id = 'dynamic-favicon';\n    link.rel = 'icon';\n    link.type = 'image/x-icon';\n    link.href = src;\n    if (oldLink) {\n        head.removeChild(oldLink);\n    }\n    head.appendChild(link);\n}\n//# sourceMappingURL=icons.js.map","import { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { Signal } from '@lumino/signaling';\nimport { XPipePanel } from './xircuitWidget';\nimport { bugIcon, checkIcon, editIcon, listIcon, refreshIcon, runIcon, saveIcon } from '@jupyterlab/ui-components';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { commandIDs } from './components/xircuitBodyWidget';\nimport { CommandIDs } from './log/LogPlugin';\nimport { RunSwitcher } from './components/RunSwitcher';\nimport { lockIcon, revertIcon, xircuitsIcon } from './ui-components/icons';\nconst XPIPE_CLASS = 'xircuits-editor';\nexport class XircuitFactory extends ABCWidgetFactory {\n    constructor(options) {\n        super(options);\n        this.app = options.app;\n        this.shell = options.shell;\n        this.commands = options.commands;\n        this.serviceManager = options.serviceManager;\n        this.saveXircuitSignal = new Signal(this);\n        this.compileXircuitSignal = new Signal(this);\n        this.runXircuitSignal = new Signal(this);\n        this.runTypeXircuitSignal = new Signal(this);\n        this.debugXircuitSignal = new Signal(this);\n        this.lockNodeSignal = new Signal(this);\n        this.breakpointXircuitSignal = new Signal(this);\n        this.currentNodeSignal = new Signal(this);\n        this.testXircuitSignal = new Signal(this);\n        this.continueDebugSignal = new Signal(this);\n        this.nextNodeDebugSignal = new Signal(this);\n        this.stepOverDebugSignal = new Signal(this);\n        this.terminateDebugSignal = new Signal(this);\n        this.stepInDebugSignal = new Signal(this);\n        this.stepOutDebugSignal = new Signal(this);\n        this.evaluateDebugSignal = new Signal(this);\n        this.debugModeSignal = new Signal(this);\n    }\n    createNewWidget(context) {\n        // Creates a blank widget with a DocumentWidget wrapper\n        const props = {\n            app: this.app,\n            shell: this.shell,\n            commands: this.commands,\n            context: context,\n            serviceManager: this.serviceManager,\n            saveXircuitSignal: this.saveXircuitSignal,\n            compileXircuitSignal: this.compileXircuitSignal,\n            runXircuitSignal: this.runXircuitSignal,\n            runTypeXircuitSignal: this.runTypeXircuitSignal,\n            debugXircuitSignal: this.debugXircuitSignal,\n            lockNodeSignal: this.lockNodeSignal,\n            breakpointXircuitSignal: this.breakpointXircuitSignal,\n            currentNodeSignal: this.currentNodeSignal,\n            testXircuitSignal: this.testXircuitSignal,\n            continueDebugSignal: this.continueDebugSignal,\n            nextNodeDebugSignal: this.nextNodeDebugSignal,\n            stepOverDebugSignal: this.stepOverDebugSignal,\n            terminateDebugSignal: this.terminateDebugSignal,\n            stepInDebugSignal: this.stepInDebugSignal,\n            stepOutDebugSignal: this.stepOutDebugSignal,\n            evaluateDebugSignal: this.evaluateDebugSignal,\n            debugModeSignal: this.debugModeSignal\n        };\n        const content = new XPipePanel(props);\n        const widget = new DocumentWidget({ content, context });\n        widget.addClass(XPIPE_CLASS);\n        widget.title.icon = xircuitsIcon;\n        /**\n         * Create a save button toolbar item.\n         */\n        let saveButton = new ToolbarButton({\n            icon: saveIcon,\n            tooltip: 'Save Xircuits',\n            onClick: () => {\n                this.commands.execute(commandIDs.saveXircuit);\n            }\n        });\n        /**\n         * Create a reload button toolbar item.\n         */\n        let reloadButton = new ToolbarButton({\n            icon: refreshIcon,\n            tooltip: 'Reload Xircuits from Disk',\n            onClick: () => {\n                this.commands.execute(commandIDs.reloadDocManager);\n            }\n        });\n        /**\n         * Create a revert button toolbar item.\n         */\n        let revertButton = new ToolbarButton({\n            icon: revertIcon,\n            tooltip: 'Revert Xircuits to Checkpoint',\n            onClick: () => {\n                this.commands.execute(commandIDs.revertDocManager);\n            }\n        });\n        /**\n         * Create a compile button toolbar item.\n         */\n        let compileButton = new ToolbarButton({\n            icon: checkIcon,\n            tooltip: 'Compile Xircuits',\n            onClick: () => {\n                this.commands.execute(commandIDs.compileXircuit);\n            }\n        });\n        /**\n         * Create a run button toolbar item.\n         */\n        let runButton = new ToolbarButton({\n            icon: runIcon,\n            tooltip: 'Run Xircuits',\n            onClick: () => {\n                this.commands.execute(commandIDs.runXircuit);\n            }\n        });\n        /**\n         * Create a debug button toolbar item.\n         */\n        let debugButton = new ToolbarButton({\n            icon: bugIcon,\n            tooltip: 'Open Xircuits Debugger and enable Image Viewer',\n            onClick: () => {\n                this.commands.execute(commandIDs.debugXircuit);\n            }\n        });\n        /**\n         * Create a log button toolbar item.\n         */\n        let logButton = new ToolbarButton({\n            icon: listIcon,\n            tooltip: 'Open log',\n            onClick: () => {\n                this.commands.execute(CommandIDs.openLog);\n            }\n        });\n        /**\n         * Create a lock button toolbar item.\n         */\n        let lockButton = new ToolbarButton({\n            icon: lockIcon,\n            tooltip: \"Lock all non-general nodes connected from start node\",\n            onClick: () => {\n                this.commands.execute(commandIDs.lockXircuit);\n            }\n        });\n        /**\n         * Create a test button toolbar item.\n         */\n        let testButton = new ToolbarButton({\n            icon: editIcon,\n            tooltip: 'For testing purpose',\n            onClick: () => {\n                this.commands.execute(commandIDs.testXircuit);\n            }\n        });\n        widget.toolbar.insertItem(0, 'xircuits-add-save', saveButton);\n        widget.toolbar.insertItem(1, 'xircuits-add-reload', reloadButton);\n        widget.toolbar.insertItem(2, 'xircuits-add-revert', revertButton);\n        widget.toolbar.insertItem(3, 'xircuits-add-compile', compileButton);\n        widget.toolbar.insertItem(4, 'xircuits-add-run', runButton);\n        widget.toolbar.insertItem(5, 'xircuits-add-debug', debugButton);\n        widget.toolbar.insertItem(6, 'xircuits-add-lock', lockButton);\n        widget.toolbar.insertItem(7, 'xircuits-add-log', logButton);\n        widget.toolbar.insertItem(8, 'xircuits-add-test', testButton);\n        widget.toolbar.insertItem(9, 'xircuits-run-type', new RunSwitcher(this));\n        return widget;\n    }\n}\n//# sourceMappingURL=xircuitFactory.js.map","import { ReactWidget } from '@jupyterlab/apputils';\nimport { BodyWidget } from './components/xircuitBodyWidget';\nimport React from 'react';\nimport { XircuitsApplication } from './components/XircuitsApp';\n/**\n * DocumentWidget: widget that represents the view or editor for a file type.\n */\nexport class XPipePanel extends ReactWidget {\n    constructor(options) {\n        super(options);\n        this.app = options.app;\n        this.shell = options.shell;\n        this.commands = options.commands;\n        this.context = options.context;\n        this.serviceManager = options.serviceManager;\n        this.saveXircuitSignal = options.saveXircuitSignal;\n        this.compileXircuitSignal = options.compileXircuitSignal;\n        this.runXircuitSignal = options.runXircuitSignal;\n        this.runTypeXircuitSignal = options.runTypeXircuitSignal;\n        this.debugXircuitSignal = options.debugXircuitSignal;\n        this.lockNodeSignal = options.lockNodeSignal;\n        this.breakpointXircuitSignal = options.breakpointXircuitSignal;\n        this.currentNodeSignal = options.currentNodeSignal;\n        this.testXircuitSignal = options.testXircuitSignal;\n        this.continueDebugSignal = options.continueDebugSignal;\n        this.nextNodeDebugSignal = options.nextNodeDebugSignal;\n        this.stepOverDebugSignal = options.stepOverDebugSignal;\n        this.terminateDebugSignal = options.terminateDebugSignal;\n        this.stepInDebugSignal = options.stepInDebugSignal;\n        this.stepOutDebugSignal = options.stepOutDebugSignal;\n        this.evaluateDebugSignal = options.evaluateDebugSignal;\n        this.debugModeSignal = options.debugModeSignal;\n        this.xircuitsApp = new XircuitsApplication(this.app);\n    }\n    handleEvent(event) {\n        if (event.type === 'mouseup') {\n            // force focus on the editor in order stop key event propagation (e.g. \"Delete\" key) into unintended\n            // parts of jupyter lab.\n            this.node.focus();\n            // Just to enable back the loses focus event\n            this.node.addEventListener('blur', this, true);\n        }\n        else if (event.type === 'blur') {\n            // Unselect any selected nodes when the editor loses focus\n            const deactivate = x => x.setSelected(false);\n            const model = this.xircuitsApp.getDiagramEngine().getModel();\n            model.getNodes().forEach(deactivate);\n            model.getLinks().forEach(deactivate);\n        }\n        else if (event.type === 'contextmenu') {\n            // Disable loses focus event when opening context menu\n            this.node.removeEventListener('blur', this, true);\n        }\n    }\n    onAfterAttach(msg) {\n        this.node.addEventListener('mouseup', this, true);\n        this.node.addEventListener('blur', this, true);\n        this.node.addEventListener('contextmenu', this, true);\n    }\n    onBeforeDetach() {\n        this.node.removeEventListener('mouseup', this, true);\n        this.node.removeEventListener('blur', this, true);\n        this.node.removeEventListener('contextmenu', this, true);\n    }\n    render() {\n        var _a;\n        return (React.createElement(BodyWidget, { context: this.context, xircuitsApp: this.xircuitsApp, app: this.app, shell: this.shell, commands: this.commands, widgetId: (_a = this.parent) === null || _a === void 0 ? void 0 : _a.id, serviceManager: this.serviceManager, saveXircuitSignal: this.saveXircuitSignal, compileXircuitSignal: this.compileXircuitSignal, runXircuitSignal: this.runXircuitSignal, runTypeXircuitSignal: this.runTypeXircuitSignal, debugXircuitSignal: this.debugXircuitSignal, lockNodeSignal: this.lockNodeSignal, breakpointXircuitSignal: this.breakpointXircuitSignal, currentNodeSignal: this.currentNodeSignal, testXircuitSignal: this.testXircuitSignal, continueDebugSignal: this.continueDebugSignal, nextNodeDebugSignal: this.nextNodeDebugSignal, stepOverDebugSignal: this.stepOverDebugSignal, terminateDebugSignal: this.terminateDebugSignal, stepInDebugSignal: this.stepInDebugSignal, stepOutDebugSignal: this.stepOutDebugSignal, evaluateDebugSignal: this.evaluateDebugSignal, debugModeSignal: this.debugModeSignal }));\n    }\n}\n//# sourceMappingURL=xircuitWidget.js.map","export default \"<svg height='100px' width='100px' class=\\\"jp-icon3\\\" fill=\\\"#616161\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" \\n     version=\\\"1.1\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 99 100\\\" enable-background=\\\"new 0 0 99 100\\\" xml:space=\\\"preserve\\\">\\n    <circle class=\\\"jp-icon3\\\" stroke=\\\"#000000\\\" stroke-miterlimit=\\\"10\\\" cx=\\\"50.5\\\" cy=\\\"50\\\" r=\\\"30.167\\\"></circle>\\n    <circle class=\\\"jp-icon3\\\" fill=\\\"#616161\\\" stroke=\\\"#000000\\\" stroke-miterlimit=\\\"10\\\" cx=\\\"50.573\\\" cy=\\\"50\\\" r=\\\"27.973\\\"></circle>\\n</svg>\";","export default \"<svg class=\\\"jp-icon3\\\"  fill=\\\"#616161\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\" x=\\\"-50px\\\" y=\\\"0px\\\" \\n     viewBox=\\\"15 0 70 100\\\" enable-background=\\\"new 0 0 100 100\\\" xml:space=\\\"preserve\\\">\\n    <g class=\\\"jp-icon3\\\" fill=\\\"#616161\\\" >\\n        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M80,70H20V33h9v-7h16v7h12v-7h16v7h7V70z\\\"></path>\\n    </g>\\n</svg>\";","export default \"<svg height='100px' width='100px' class=\\\"jp-icon3\\\"  fill=\\\"#616161\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\" x=\\\"0px\\\" y=\\\"0px\\\" \\n     viewBox=\\\"0 0 100 100\\\" enable-background=\\\"new 0 0 100 100\\\" xml:space=\\\"preserve\\\">\\n    <path d=\\\"M87,15H13c-3.314,0-6,2.686-6,6v58c0,3.314,2.686,6,6,6h74c3.314,0,6-2.686,6-6V21C93,17.686,90.314,15,87,15z M80,19  c1.657,0,3,1.343,3,3s-1.343,3-3,3s-3-1.343-3-3S78.343,19,80,19z M68,19c1.657,0,3,1.343,3,3s-1.343,3-3,3s-3-1.343-3-3  S66.343,19,68,19z M56,19c1.657,0,3,1.343,3,3s-1.343,3-3,3s-3-1.343-3-3S54.343,19,56,19z M87,78c0,0.552-0.448,1-1,1H14  c-0.552,0-1-0.448-1-1V30c0-0.552,0.448-1,1-1h72c0.552,0,1,0.448,1,1V78z\\\"></path>\\n    <path d=\\\"M71,56h-5.678c-0.249,0-0.454-0.186-0.488-0.433c-0.142-1.026-0.374-2.016-0.693-2.961  c-0.076-0.225,0.012-0.469,0.218-0.587l4.828-2.787c2.293-1.324,0.288-4.785-2-3.464l-4.69,2.708  c-0.215,0.124-0.484,0.067-0.637-0.129c-0.993-1.267-2.208-2.356-3.632-3.213c-0.141-0.085-0.227-0.234-0.232-0.398  c-0.041-1.252-0.375-2.428-0.929-3.47c-0.103-0.195-0.075-0.43,0.081-0.585l2.266-2.266c1.869-1.869-0.958-4.699-2.828-2.828  l-2.267,2.267c-0.155,0.155-0.391,0.183-0.586,0.08c-2.344-1.244-5.123-1.244-7.467,0c-0.194,0.103-0.43,0.075-0.586-0.08  l-2.267-2.267c-1.869-1.869-4.699,0.958-2.828,2.828l2.266,2.266c0.156,0.156,0.184,0.391,0.081,0.585  c-0.553,1.042-0.887,2.218-0.929,3.47c-0.005,0.164-0.091,0.314-0.232,0.398c-1.425,0.857-2.64,1.946-3.632,3.213  c-0.153,0.196-0.422,0.253-0.637,0.129l-4.69-2.708c-2.288-1.321-4.292,2.141-2,3.464l4.828,2.787  c0.206,0.119,0.294,0.363,0.218,0.587c-0.319,0.944-0.552,1.935-0.693,2.961C35.132,55.814,34.927,56,34.678,56H29  c-2.643,0-2.646,4,0,4h5.724c0.245,0,0.447,0.179,0.486,0.421c0.161,0.998,0.415,1.964,0.763,2.886c0.086,0.228,0,0.482-0.211,0.604  l-4.948,2.857c-2.289,1.321-0.291,4.787,2,3.464l4.958-2.863c0.211-0.122,0.475-0.069,0.63,0.12C41.152,70.848,45.32,73,50,73  s8.848-2.152,11.598-5.511c0.155-0.189,0.418-0.242,0.63-0.12l4.958,2.863c2.289,1.321,4.291-2.141,2-3.464l-4.948-2.857  c-0.211-0.122-0.298-0.376-0.211-0.604c0.347-0.922,0.602-1.888,0.763-2.886C64.828,60.179,65.031,60,65.276,60H71  C73.643,60,73.646,56,71,56z M44,66c-1.657,0-3-1.343-3-3s1.343-3,3-3s3,1.343,3,3S45.657,66,44,66z M44,56c-1.657,0-3-1.343-3-3  s1.343-3,3-3s3,1.343,3,3S45.657,56,44,56z M56,66c-1.657,0-3-1.343-3-3s1.343-3,3-3s3,1.343,3,3S57.657,66,56,66z M56,56  c-1.657,0-3-1.343-3-3s1.343-3,3-3s3,1.343,3,3S57.657,56,56,56z\\\"></path>\\n</svg>\";","export default \"\\n<svg viewBox=\\\"0 0 512 512\\\"  xmlns=\\\"http://www.w3.org/2000/svg\\\"> \\n    <g class=\\\"jp-icon3\\\" fill=\\\"#616161\\\">\\n        <path d=\\\"m426.67 426.67v-213.34c0-23.465-19.199-42.668-42.668-42.668l-256 0.003907c-23.465 0-42.668 19.199-42.668 42.668v213.33c0 23.465 19.199 42.668 42.668 42.668h256c23.465-0.003907 42.668-19.203 42.668-42.668zm-128-106.67c0 23.465-19.199 42.668-42.668 42.668-23.465 0-42.668-19.199-42.668-42.668 0-23.465 19.199-42.668 42.668-42.668 23.465 0 42.668 19.203 42.668 42.668z\\\"/>\\n        <path transform=\\\"scale(21.333)\\\" d=\\\"m17 12v-5.0001c0-2.8-2.2-5.0001-5.0001-5.0001-2.8 1.83e-4 -5.0001 2.2002-5.0001 5.0001v5.0001\\\" fill=\\\"none\\\" stroke=\\\"#616161\\\" stroke-miterlimit=\\\"10\\\" stroke-width=\\\"2\\\"/>\\n    </g>\\n</svg>\\n\";","export default \"<svg stroke=\\\"black\\\" stroke-width=\\\"5\\\" class=\\\"jp-icon3\\\" fill=\\\"#616161\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"17 9 50 70\\\" enable-background=\\\"new 0 0 50 50\\\" xml:space=\\\"preserve\\\">\\n    <polygon points=\\\"47.003,25 44.003,28.006 58.001,42 22,42 22,46 57.996,46 44,59.996 47,62.996 66.005,44.002 \\\"></polygon>\\n</svg>\";","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<svg class=\\\"jp-icon3\\\" fill=\\\"#616161\\\" version=\\\"1.1\\\" viewBox=\\\"0 -55 1350 1350\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path d=\\\"m610.36 114.64c19.523 19.527 19.523 51.184 0 70.711l-64.645 64.645h79.289c232.61 0 425 192.39 425 425s-192.39 425-425 425-425-192.39-425-425c0-27.613 22.387-50 50-50s50 22.387 50 50c0 177.39 147.61 325 325 325s325-147.61 325-325-147.61-325-325-325h-79.289l64.645 64.645c19.523 19.527 19.523 51.184 0 70.711-19.527 19.523-51.184 19.523-70.711 0l-150-150c-19.527-19.527-19.527-51.184 0-70.711l150-150c19.527-19.527 51.184-19.527 70.711 0z\\\"/>\\n</svg>\\n\";","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 270 250\\\" style=\\\"enable-background:new 0 0 270 250;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{fill:#3EA5BD;}\\n\\t.st1{fill:#324057;}\\n</style>\\n<g>\\n\\t<g>\\n\\t\\t<g>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M27.6,5.6c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S34.7,5.6,27.6,5.6z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,5.6c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S70.2,5.6,63,5.6z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M27.6,41c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S34.7,41,27.6,41z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,41c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S70.2,41,63,41z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M27.6,76.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C40.5,82.3,34.7,76.5,27.6,76.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,76.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C76,82.3,70.2,76.5,63,76.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,112c-7.2,0-13,5.8-13,13c0,7.2,5.8,13,13,13s13-5.8,13-13S70.2,112,63,112z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M27.6,147.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C40.5,153.3,34.7,147.5,27.6,147.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,147.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C76,153.3,70.2,147.5,63,147.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M27.6,183c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S34.7,183,27.6,183z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,183c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S70.2,183,63,183z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M27.6,218.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S34.7,218.5,27.6,218.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M63,218.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13S70.2,218.5,63,218.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M98.5,41c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C111.5,46.9,105.7,41,98.5,41z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M98.5,76.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C111.5,82.3,105.7,76.5,98.5,76.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M98.5,147.5c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C111.5,153.3,105.7,147.5,98.5,147.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st0\\\" d=\\\"M98.5,183c-7.2,0-13,5.8-13,13s5.8,13,13,13s13-5.8,13-13C111.5,188.8,105.7,183,98.5,183z\\\"/>\\n\\t\\t</g>\\n\\t\\t<g>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M240.5,244.4c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S233.3,244.4,240.5,244.4z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,244.4c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S197.8,244.4,205,244.4z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M240.5,208.9c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S233.3,208.9,240.5,208.9z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,208.9c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C192,203.1,197.8,208.9,205,208.9z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M240.5,173.5c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C227.5,167.6,233.3,173.5,240.5,173.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,173.5c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C192,167.6,197.8,173.5,205,173.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,138c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C192,132.2,197.8,138,205,138z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M240.5,102.5c7.2,0,13-5.8,13-13c0-7.2-5.8-13-13-13s-13,5.8-13,13C227.5,96.7,233.3,102.5,240.5,102.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,102.5c7.2,0,13-5.8,13-13c0-7.2-5.8-13-13-13s-13,5.8-13,13C192,96.7,197.8,102.5,205,102.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M240.5,67c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S233.3,67,240.5,67z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,67c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C192,61.2,197.8,67,205,67z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M240.5,31.5c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S233.3,31.5,240.5,31.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M205,31.5c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S197.8,31.5,205,31.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M169.5,208.9c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S162.3,208.9,169.5,208.9z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M169.5,173.5c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C156.5,167.6,162.3,173.5,169.5,173.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M169.5,138c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S162.3,138,169.5,138z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M169.5,102.5c7.2,0,13-5.8,13-13c0-7.2-5.8-13-13-13s-13,5.8-13,13C156.5,96.7,162.3,102.5,169.5,102.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M169.5,67c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13S162.3,67,169.5,67z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M134,173.5c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C121,167.6,126.8,173.5,134,173.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M134,138c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C121,132.2,126.8,138,134,138z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M134,102.5c7.2,0,13-5.8,13-13c0-7.2-5.8-13-13-13s-13,5.8-13,13C121,96.7,126.8,102.5,134,102.5z\\\"/>\\n\\t\\t\\t<path class=\\\"st1\\\" d=\\\"M98.5,138c7.2,0,13-5.8,13-13s-5.8-13-13-13s-13,5.8-13,13C85.6,132.2,91.4,138,98.5,138z\\\"/>\\n\\t\\t</g>\\n\\t</g>\\n</g>\\n</svg>\\n\";"],"names":[],"sourceRoot":""}