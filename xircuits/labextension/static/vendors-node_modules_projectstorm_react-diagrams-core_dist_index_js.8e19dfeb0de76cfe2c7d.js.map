{"version":3,"file":"vendors-node_modules_projectstorm_react-diagrams-core_dist_index_js.8e19dfeb0de76cfe2c7d.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,oBAAoB,mBAAO,CAAC,mHAA2B;AACvD,mBAAmB,mBAAO,CAAC,mFAAwB;AACnD,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA,yEAAyE,aAAa;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,eAAe,kBAAkB,yBAAyB;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;;;;;;;;;AC7Oa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA,4CAA4C,cAAc,8DAA8D;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB,8DAA8D;AACnI;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;AClBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,iBAAiB,mBAAO,CAAC,6FAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,cAAc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB,MAAM,mBAAmB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uLAAuL;AACxO,2CAA2C,eAAe,+EAA+E,yBAAyB;AAClK;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;ACxEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,yBAAyB,mBAAO,CAAC,qHAAkB;AACnD,0BAA0B,mBAAO,CAAC,uHAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,yCAAyC;AACjH;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;ACnBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,oBAAoB,mBAAO,CAAC,2GAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;AChCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,iBAAiB,mBAAO,CAAC,6FAAiB;AAC1C,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,qBAAqB,mBAAO,CAAC,6GAAoB;AACjD;AACA;AACA;AACA,CAAC,cAAc;AACf;AACA;AACA;AACA;AACA;AACA,kEAAkE,iEAAiE;AACnI,SAAS;AACT;AACA;AACA,uBAAuB;AACvB;;;;;;;;;;ACrBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,qBAAqB,mBAAO,CAAC,uGAAc;AAC3C,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,mBAAmB,mBAAO,CAAC,mFAAwB;AACnD,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wDAAwD,YAAY,aAAa;AACjF;AACA,SAAS;AACT;AACA;AACA,sFAAsF;AACtF,8DAA8D,YAAY,aAAa;AACvF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB;AACrE;AACA,aAAa;AACb;AACA,aAAa,GAAG;AAChB;AACA,4BAA4B;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;ACrOa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,sBAAsB,mBAAO,CAAC,iHAAsB;AACpD,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB,GAAG,mBAAmB,IAAI,iBAAiB,GAAG,iBAAiB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,iEAAiE;AAC7I,+CAA+C,wCAAwC;AACvF;AACA;AACA,6EAA6E,4FAA4F;AACzK,iBAAiB;AACjB,SAAS;AACT;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;ACxFa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA,4CAA4C,cAAc,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;AC3Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,yBAAyB,mBAAO,CAAC,qHAAkB;AACnD,0BAA0B,mBAAO,CAAC,uHAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,yCAAyC;AACjH;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;ACnBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,oBAAoB,mBAAO,CAAC,2GAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;AChCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,iBAAiB,mBAAO,CAAC,6FAAiB;AAC1C,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,qBAAqB,mBAAO,CAAC,6GAAoB;AACjD;AACA;AACA;AACA,CAAC,cAAc;AACf;AACA;AACA;AACA,kEAAkE,iEAAiE;AACnI,SAAS;AACT;AACA;AACA,uBAAuB;AACvB;;;;;;;;;;ACnBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,mBAAmB,mBAAO,CAAC,mFAAwB;AACnD,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF,6DAA6D,YAAY,YAAY;AACrF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6CAA6C,wBAAwB;AACrE;AACA,aAAa,GAAG;AAChB;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;ACnGa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,iBAAiB,mBAAO,CAAC,6FAAiB;AAC1C,mCAAmC,mBAAO,CAAC,mGAA0B;AACrE;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,CAAC,cAAc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,iEAAiE;AAC7I,kDAAkD;AAClD;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;AC3Ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,0BAA0B;AAC9C,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,mBAAmB,mBAAO,CAAC,mFAAwB;AACnD,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD,0BAA0B,KAAK;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB;AACrE;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;ACxGa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,cAAc,mBAAO,CAAC,oDAAO;AAC7B,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,2DAA2D,2BAA2B,6FAA6F;AAC9O;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;AC9Ca;AACb;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,mBAAO,CAAC,2GAAuB;AAC5C,aAAa,mBAAO,CAAC,uHAA6B;AAClD,aAAa,mBAAO,CAAC,mHAA2B;AAChD,aAAa,mBAAO,CAAC,qHAA4B;AACjD,aAAa,mBAAO,CAAC,qHAA4B;AACjD,aAAa,mBAAO,CAAC,yIAAsC;AAC3D,aAAa,mBAAO,CAAC,2IAAuC;AAC5D,aAAa,mBAAO,CAAC,6IAAwC;AAC7D,aAAa,mBAAO,CAAC,yIAAsC;AAC3D,aAAa,mBAAO,CAAC,2IAAuC;AAC5D,aAAa,mBAAO,CAAC,6IAAwC;AAC7D,aAAa,mBAAO,CAAC,mHAA2B;AAChD,aAAa,mBAAO,CAAC,qHAA4B;AACjD,aAAa,mBAAO,CAAC,mHAA2B;AAChD,aAAa,mBAAO,CAAC,qHAA4B;AACjD,aAAa,mBAAO,CAAC,yHAA8B;AACnD,aAAa,mBAAO,CAAC,6HAAgC;AACrD,aAAa,mBAAO,CAAC,mHAA2B;AAChD,aAAa,mBAAO,CAAC,+FAAiB;AACtC;;;;;;;;;;AC/Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,oBAAoB,mBAAO,CAAC,oHAA4B;AACxD,oBAAoB,mBAAO,CAAC,oHAA4B;AACxD,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,yBAAyB,mBAAO,CAAC,0IAAuC;AACxE,yBAAyB,mBAAO,CAAC,0IAAuC;AACxE;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;;;;;;;;;;AClIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,oBAAoB,mBAAO,CAAC,oHAA4B;AACxD,2BAA2B,mBAAO,CAAC,4GAAoB;AACvD,gCAAgC,mBAAO,CAAC,sHAAyB;AACjE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B;;;;;;;;;;AC7Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,UAAU,mBAAO,CAAC,+CAAQ;AAC1B,qBAAqB,mBAAO,CAAC,sHAA6B;AAC1D,oBAAoB,mBAAO,CAAC,oHAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B;;;;;;;;;;ACnCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,4BAA4B,mBAAO,CAAC,6IAAiC;AACrE,oBAAoB,mBAAO,CAAC,oHAA4B;AACxD;AACA,4BAA4B;AAC5B,gBAAgB,uBAAuB;AACvC,sCAAsC,yDAAyD;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,GAAG;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,mBAAmB,GAAG;AACtB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,GAAG;AACtB,qBAAqB;AACrB;AACA;AACA,kCAAkC;AAClC,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,qBAAM,oBAAoB,qBAAM;AAC/C,eAAe,qBAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAgC,8BAA8B;AAC/F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sDAAsD,oCAAoC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,8CAA8C,yBAAyB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0CAA0C;AAC7E;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA,eAAe,0BAA0B;AACzC;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iEAAe,KAAK,EAAC","sources":["webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/DiagramEngine.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/label/LabelModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/label/LabelWidget.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/link-layer/LinkLayerFactory.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/link-layer/LinkLayerModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/link-layer/LinkLayerWidget.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/link/LinkModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/link/LinkWidget.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/link/PointModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/node-layer/NodeLayerFactory.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/node-layer/NodeLayerModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/node-layer/NodeLayerWidget.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/node/NodeModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/node/NodeWidget.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/port/PortModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/entities/port/PortWidget.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/index.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/models/DiagramModel.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/states/DefaultDiagramState.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/states/DragDiagramItemsState.js","webpack://xircuits/./node_modules/@projectstorm/react-diagrams-core/dist/states/DragNewLinkState.js","webpack://xircuits/./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagramEngine = void 0;\nconst NodeModel_1 = require(\"./entities/node/NodeModel\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n/**\n * Passed as a parameter to the DiagramWidget\n */\nclass DiagramEngine extends react_canvas_core_1.CanvasEngine {\n    constructor(options = {}) {\n        super(options);\n        this.maxNumberPointsPerLink = 1000;\n        // create banks for the different factory types\n        this.nodeFactories = new react_canvas_core_1.FactoryBank();\n        this.linkFactories = new react_canvas_core_1.FactoryBank();\n        this.portFactories = new react_canvas_core_1.FactoryBank();\n        this.labelFactories = new react_canvas_core_1.FactoryBank();\n        const setup = (factory) => {\n            factory.registerListener({\n                factoryAdded: (event) => {\n                    event.factory.setDiagramEngine(this);\n                },\n                factoryRemoved: (event) => {\n                    event.factory.setDiagramEngine(null);\n                }\n            });\n        };\n        setup(this.nodeFactories);\n        setup(this.linkFactories);\n        setup(this.portFactories);\n        setup(this.labelFactories);\n    }\n    /**\n     * Gets a model and element under the mouse cursor\n     */\n    getMouseElement(event) {\n        var target = event.target;\n        var diagramModel = this.model;\n        //is it a port\n        var element = react_canvas_core_1.Toolkit.closest(target, '.port[data-name]');\n        if (element) {\n            var nodeElement = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n            return diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n        }\n        //look for a point\n        element = react_canvas_core_1.Toolkit.closest(target, '.point[data-id]');\n        if (element) {\n            return diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n        }\n        //look for a link\n        element = react_canvas_core_1.Toolkit.closest(target, '[data-linkid]');\n        if (element) {\n            return diagramModel.getLink(element.getAttribute('data-linkid'));\n        }\n        //look for a node\n        element = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n        if (element) {\n            return diagramModel.getNode(element.getAttribute('data-nodeid'));\n        }\n        return null;\n    }\n    //!-------------- FACTORIES ------------\n    getNodeFactories() {\n        return this.nodeFactories;\n    }\n    getLinkFactories() {\n        return this.linkFactories;\n    }\n    getLabelFactories() {\n        return this.labelFactories;\n    }\n    getPortFactories() {\n        return this.portFactories;\n    }\n    getFactoryForNode(node) {\n        if (typeof node === 'string') {\n            return this.nodeFactories.getFactory(node);\n        }\n        return this.nodeFactories.getFactory(node.getType());\n    }\n    getFactoryForLink(link) {\n        if (typeof link === 'string') {\n            return this.linkFactories.getFactory(link);\n        }\n        return this.linkFactories.getFactory(link.getType());\n    }\n    getFactoryForLabel(label) {\n        if (typeof label === 'string') {\n            return this.labelFactories.getFactory(label);\n        }\n        return this.labelFactories.getFactory(label.getType());\n    }\n    getFactoryForPort(port) {\n        if (typeof port === 'string') {\n            return this.portFactories.getFactory(port);\n        }\n        return this.portFactories.getFactory(port.getType());\n    }\n    generateWidgetForLink(link) {\n        return this.getFactoryForLink(link).generateReactWidget({ model: link });\n    }\n    generateWidgetForNode(node) {\n        return this.getFactoryForNode(node).generateReactWidget({ model: node });\n    }\n    getNodeElement(node) {\n        const selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n        if (selector === null) {\n            throw new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n        }\n        return selector;\n    }\n    getNodePortElement(port) {\n        var selector = this.canvas.querySelector(`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`);\n        if (selector === null) {\n            throw new Error('Cannot find Node Port element with nodeID: [' +\n                port.getParent().getID() +\n                '] and name: [' +\n                port.getName() +\n                ']');\n        }\n        return selector;\n    }\n    getPortCenter(port) {\n        return this.getPortCoords(port).getOrigin();\n    }\n    /**\n     * Calculate rectangular coordinates of the port passed in.\n     */\n    getPortCoords(port, element) {\n        if (!this.canvas) {\n            throw new Error('Canvas needs to be set first');\n        }\n        if (!element) {\n            element = this.getNodePortElement(port);\n        }\n        const sourceRect = element.getBoundingClientRect();\n        const point = this.getRelativeMousePoint({\n            clientX: sourceRect.left,\n            clientY: sourceRect.top\n        });\n        const zoom = this.model.getZoomLevel() / 100.0;\n        return new geometry_1.Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n    }\n    /**\n     * Determine the width and height of the node passed in.\n     * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n     */\n    getNodeDimensions(node) {\n        if (!this.canvas) {\n            return {\n                width: 0,\n                height: 0\n            };\n        }\n        const nodeElement = this.getNodeElement(node);\n        const nodeRect = nodeElement.getBoundingClientRect();\n        return {\n            width: nodeRect.width,\n            height: nodeRect.height\n        };\n    }\n    getBoundingNodesRect(nodes) {\n        if (nodes) {\n            if (nodes.length === 0) {\n                return new geometry_1.Rectangle(0, 0, 0, 0);\n            }\n            return geometry_1.Polygon.boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox()));\n        }\n    }\n    zoomToFitSelectedNodes(options) {\n        const nodes = this.model\n            .getSelectedEntities()\n            .filter((entity) => entity instanceof NodeModel_1.NodeModel);\n        this.zoomToFitNodes({\n            margin: options.margin,\n            maxZoom: options.maxZoom,\n            nodes: nodes.length > 0 ? nodes : null\n        });\n    }\n    zoomToFitNodes(options) {\n        let margin = options || 0;\n        let nodes = [];\n        let maxZoom = null;\n        if (!!options && typeof options == 'object') {\n            margin = options.margin || 0;\n            nodes = options.nodes || [];\n            maxZoom = options.maxZoom || null;\n        }\n        // no node selected\n        if (nodes.length === 0) {\n            nodes = this.model.getNodes();\n        }\n        const nodesRect = this.getBoundingNodesRect(nodes);\n        if (nodesRect) {\n            // there is something we should zoom on\n            let canvasRect = this.canvas.getBoundingClientRect();\n            const calculate = (margin = 0) => {\n                // work out zoom\n                const xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n                const yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n                let zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n                if (maxZoom && zoomFactor > maxZoom) {\n                    zoomFactor = maxZoom;\n                }\n                return {\n                    zoom: zoomFactor,\n                    x: canvasRect.width / 2 -\n                        ((nodesRect.getWidth() + margin * 2) * zoomFactor) / 2 +\n                        margin -\n                        nodesRect.getTopLeft().x,\n                    y: canvasRect.height / 2 -\n                        ((nodesRect.getHeight() + margin * 2) * zoomFactor) / 2 +\n                        margin -\n                        nodesRect.getTopLeft().y\n                };\n            };\n            let params = calculate(0);\n            if (margin) {\n                if (params.x < margin || params.y < margin) {\n                    params = calculate(margin);\n                }\n            }\n            // apply\n            this.model.setZoomLevel(params.zoom * 100);\n            this.model.setOffset(params.x, params.y);\n            this.repaintCanvas();\n        }\n    }\n    getMaxNumberPointsPerLink() {\n        return this.maxNumberPointsPerLink;\n    }\n    setMaxNumberPointsPerLink(max) {\n        this.maxNumberPointsPerLink = max;\n    }\n}\nexports.DiagramEngine = DiagramEngine;\n//# sourceMappingURL=DiagramEngine.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LabelModel = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass LabelModel extends react_canvas_core_1.BaseModel {\n    constructor(options) {\n        super(Object.assign(Object.assign({}, options), { offsetX: options.offsetX || 0, offsetY: options.offsetY || 0 }));\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.offsetX = event.data.offsetX;\n        this.options.offsetY = event.data.offsetY;\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { offsetX: this.options.offsetX, offsetY: this.options.offsetY });\n    }\n}\nexports.LabelModel = LabelModel;\n//# sourceMappingURL=LabelModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LabelWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.Label = styled_1.default.div `\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n    S.Foreign = styled_1.default.foreignObject `\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n})(S || (S = {}));\nclass LabelWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.findPathAndRelativePositionToRenderLabel = (index) => {\n            // an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n            const link = this.props.label.getParent();\n            const lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n            // calculate the point where we want to display the label\n            let labelPosition = lengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n                (index / (link.getLabels().length + 1));\n            // find the path where the label will be rendered and calculate the relative position\n            let pathIndex = 0;\n            while (pathIndex < link.getRenderedPath().length) {\n                if (labelPosition - lengths[pathIndex] < 0) {\n                    return {\n                        path: link.getRenderedPath()[pathIndex],\n                        position: labelPosition\n                    };\n                }\n                // keep searching\n                labelPosition -= lengths[pathIndex];\n                pathIndex++;\n            }\n        };\n        this.calculateLabelPosition = () => {\n            const found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n            if (!found) {\n                return;\n            }\n            const { path, position } = found;\n            const labelDimensions = {\n                width: this.ref.current.offsetWidth,\n                height: this.ref.current.offsetHeight\n            };\n            const pathCentre = path.getPointAtLength(position);\n            const labelCoordinates = {\n                x: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n                y: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n            };\n            this.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n        };\n        this.ref = React.createRef();\n    }\n    componentDidUpdate() {\n        window.requestAnimationFrame(this.calculateLabelPosition);\n    }\n    componentDidMount() {\n        window.requestAnimationFrame(this.calculateLabelPosition);\n    }\n    render() {\n        const canvas = this.props.engine.getCanvas();\n        return (React.createElement(S.Foreign, { key: this.props.label.getID(), width: canvas === null || canvas === void 0 ? void 0 : canvas.offsetWidth, height: canvas === null || canvas === void 0 ? void 0 : canvas.offsetHeight },\n            React.createElement(S.Label, { ref: this.ref }, this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label }))));\n    }\n}\nexports.LabelWidget = LabelWidget;\n//# sourceMappingURL=LabelWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkLayerFactory = void 0;\nconst React = require(\"react\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst LinkLayerModel_1 = require(\"./LinkLayerModel\");\nconst LinkLayerWidget_1 = require(\"./LinkLayerWidget\");\nclass LinkLayerFactory extends react_canvas_core_1.AbstractReactFactory {\n    constructor() {\n        super('diagram-links');\n    }\n    generateModel(event) {\n        return new LinkLayerModel_1.LinkLayerModel();\n    }\n    generateReactWidget(event) {\n        return React.createElement(LinkLayerWidget_1.LinkLayerWidget, { layer: event.model, engine: this.engine });\n    }\n}\nexports.LinkLayerFactory = LinkLayerFactory;\n//# sourceMappingURL=LinkLayerFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkLayerModel = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst LinkModel_1 = require(\"../link/LinkModel\");\nclass LinkLayerModel extends react_canvas_core_1.LayerModel {\n    constructor() {\n        super({\n            type: 'diagram-links',\n            isSvg: true,\n            transformed: true\n        });\n    }\n    addModel(model) {\n        if (!(model instanceof LinkModel_1.LinkModel)) {\n            throw new Error('Can only add links to this layer');\n        }\n        model.registerListener({\n            entityRemoved: () => {\n                this.getParent().removeLink(model);\n            }\n        });\n        super.addModel(model);\n    }\n    getLinks() {\n        return this.getModels();\n    }\n    getChildModelFactoryBank(engine) {\n        return engine.getLinkFactories();\n    }\n}\nexports.LinkLayerModel = LinkLayerModel;\n//# sourceMappingURL=LinkLayerModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkLayerWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nconst _ = require(\"lodash\");\nconst LinkWidget_1 = require(\"../link/LinkWidget\");\nvar S;\n(function (S) {\n    S.Container = styled_1.default.div ``;\n})(S || (S = {}));\nclass LinkLayerWidget extends React.Component {\n    render() {\n        return (React.createElement(React.Fragment, null, \n        //only perform these actions when we have a diagram\n        _.map(this.props.layer.getLinks(), (link) => {\n            return React.createElement(LinkWidget_1.LinkWidget, { key: link.getID(), link: link, diagramEngine: this.props.engine });\n        })));\n    }\n}\nexports.LinkLayerWidget = LinkLayerWidget;\n//# sourceMappingURL=LinkLayerWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkModel = void 0;\nconst PointModel_1 = require(\"./PointModel\");\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass LinkModel extends react_canvas_core_1.BaseModel {\n    constructor(options) {\n        super(options);\n        this.points = [\n            new PointModel_1.PointModel({\n                link: this\n            }),\n            new PointModel_1.PointModel({\n                link: this\n            })\n        ];\n        this.sourcePort = null;\n        this.targetPort = null;\n        this.renderedPaths = [];\n        this.labels = [];\n    }\n    getBoundingBox() {\n        return geometry_1.Polygon.boundingBoxFromPoints(_.map(this.points, (point) => {\n            return point.getPosition();\n        }));\n    }\n    getSelectionEntities() {\n        if (this.getTargetPort() && this.getSourcePort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n        }\n        // allow selection of the first point\n        if (!this.getSourcePort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n        }\n        // allow selection of the last point\n        if (!this.getTargetPort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n        }\n        return super.getSelectionEntities().concat(this.points);\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.points = _.map(event.data.points || [], (point) => {\n            var p = new PointModel_1.PointModel({\n                link: this,\n                position: new geometry_1.Point(point.x, point.y)\n            });\n            p.deserialize(Object.assign(Object.assign({}, event), { data: point }));\n            return p;\n        });\n        //deserialize labels\n        _.forEach(event.data.labels || [], (label) => {\n            let labelOb = event.engine.getFactoryForLabel(label.type).generateModel({});\n            labelOb.deserialize(Object.assign(Object.assign({}, event), { data: label }));\n            this.addLabel(labelOb);\n        });\n        // these happen async, so we use the promises for these (they need to be done like this without the async keyword\n        // because we need the deserailize method to finish for other methods while this happen\n        if (event.data.target) {\n            event.getModel(event.data.targetPort).then((model) => {\n                this.setTargetPort(model);\n            });\n        }\n        if (event.data.source) {\n            event.getModel(event.data.sourcePort).then((model) => {\n                this.setSourcePort(model);\n            });\n        }\n    }\n    getRenderedPath() {\n        return this.renderedPaths;\n    }\n    setRenderedPaths(paths) {\n        this.renderedPaths = paths;\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { source: this.sourcePort ? this.sourcePort.getParent().getID() : null, sourcePort: this.sourcePort ? this.sourcePort.getID() : null, target: this.targetPort ? this.targetPort.getParent().getID() : null, targetPort: this.targetPort ? this.targetPort.getID() : null, points: _.map(this.points, (point) => {\n                return point.serialize();\n            }), labels: _.map(this.labels, (label) => {\n                return label.serialize();\n            }) });\n    }\n    doClone(lookupTable = {}, clone) {\n        clone.setPoints(_.map(this.getPoints(), (point) => {\n            return point.clone(lookupTable);\n        }));\n        if (this.sourcePort) {\n            clone.setSourcePort(this.sourcePort.clone(lookupTable));\n        }\n        if (this.targetPort) {\n            clone.setTargetPort(this.targetPort.clone(lookupTable));\n        }\n    }\n    clearPort(port) {\n        if (this.sourcePort === port) {\n            this.setSourcePort(null);\n        }\n        else if (this.targetPort === port) {\n            this.setTargetPort(null);\n        }\n    }\n    remove() {\n        if (this.sourcePort) {\n            this.sourcePort.removeLink(this);\n        }\n        if (this.targetPort) {\n            this.targetPort.removeLink(this);\n        }\n        super.remove();\n    }\n    isLastPoint(point) {\n        var index = this.getPointIndex(point);\n        return index === this.points.length - 1;\n    }\n    getPointIndex(point) {\n        return this.points.indexOf(point);\n    }\n    getPointModel(id) {\n        for (var i = 0; i < this.points.length; i++) {\n            if (this.points[i].getID() === id) {\n                return this.points[i];\n            }\n        }\n        return null;\n    }\n    getPortForPoint(point) {\n        if (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n            return this.sourcePort;\n        }\n        if (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n            return this.targetPort;\n        }\n        return null;\n    }\n    getPointForPort(port) {\n        if (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n            return this.getFirstPoint();\n        }\n        if (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n            return this.getLastPoint();\n        }\n        return null;\n    }\n    getFirstPoint() {\n        return this.points[0];\n    }\n    getLastPoint() {\n        return this.points[this.points.length - 1];\n    }\n    setSourcePort(port) {\n        if (port !== null) {\n            port.addLink(this);\n        }\n        if (this.sourcePort !== null) {\n            this.sourcePort.removeLink(this);\n        }\n        this.sourcePort = port;\n        this.fireEvent({ port }, 'sourcePortChanged');\n        if (port === null || port === void 0 ? void 0 : port.reportedPosition) {\n            this.getPointForPort(port).setPosition(port.getCenter());\n        }\n    }\n    getSourcePort() {\n        return this.sourcePort;\n    }\n    getTargetPort() {\n        return this.targetPort;\n    }\n    setTargetPort(port) {\n        if (port !== null) {\n            port.addLink(this);\n        }\n        if (this.targetPort !== null) {\n            this.targetPort.removeLink(this);\n        }\n        this.targetPort = port;\n        this.fireEvent({ port }, 'targetPortChanged');\n        if (port === null || port === void 0 ? void 0 : port.reportedPosition) {\n            this.getPointForPort(port).setPosition(port.getCenter());\n        }\n    }\n    point(x, y, index = 1) {\n        return this.addPoint(this.generatePoint(x, y), index);\n    }\n    addLabel(label) {\n        label.setParent(this);\n        this.labels.push(label);\n    }\n    getPoints() {\n        return this.points;\n    }\n    getLabels() {\n        return this.labels;\n    }\n    setPoints(points) {\n        _.forEach(points, (point) => {\n            point.setParent(this);\n        });\n        this.points = points;\n    }\n    removePoint(pointModel) {\n        this.points.splice(this.getPointIndex(pointModel), 1);\n    }\n    removePointsBefore(pointModel) {\n        this.points.splice(0, this.getPointIndex(pointModel));\n    }\n    removePointsAfter(pointModel) {\n        this.points.splice(this.getPointIndex(pointModel) + 1);\n    }\n    removeMiddlePoints() {\n        if (this.points.length > 2) {\n            this.points.splice(1, this.points.length - 2);\n        }\n    }\n    addPoint(pointModel, index = 1) {\n        pointModel.setParent(this);\n        this.points.splice(index, 0, pointModel);\n        return pointModel;\n    }\n    generatePoint(x = 0, y = 0) {\n        return new PointModel_1.PointModel({\n            link: this,\n            position: new geometry_1.Point(x, y)\n        });\n    }\n}\nexports.LinkModel = LinkModel;\n//# sourceMappingURL=LinkModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkWidget = void 0;\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst LabelWidget_1 = require(\"../label/LabelWidget\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass LinkWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sourcePort: null,\n            targetPort: null\n        };\n    }\n    componentWillUnmount() {\n        if (this.sourceListener) {\n            this.sourceListener.deregister();\n        }\n        if (this.targetListener) {\n            this.targetListener.deregister();\n        }\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            sourcePort: nextProps.link.getSourcePort(),\n            targetPort: nextProps.link.getTargetPort()\n        };\n    }\n    installTarget() {\n        this.targetListener && this.targetListener.deregister();\n        if (!this.props.link.getTargetPort())\n            return;\n        this.targetListener = this.props.link.getTargetPort().registerListener({\n            reportInitialPosition: (event) => {\n                this.forceUpdate();\n            }\n        });\n    }\n    installSource() {\n        this.sourceListener && this.sourceListener.deregister();\n        if (!this.props.link.getSourcePort())\n            return;\n        this.sourceListener = this.props.link.getSourcePort().registerListener({\n            reportInitialPosition: (event) => {\n                this.forceUpdate();\n            }\n        });\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.sourcePort !== this.state.sourcePort) {\n            this.installSource();\n        }\n        if (prevState.targetPort !== this.state.targetPort) {\n            this.installTarget();\n        }\n    }\n    static generateLinePath(firstPoint, lastPoint) {\n        return `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n    }\n    componentDidMount() {\n        if (this.props.link.getSourcePort()) {\n            this.installSource();\n        }\n        if (this.props.link.getTargetPort()) {\n            this.installTarget();\n        }\n    }\n    render() {\n        const { link } = this.props;\n        // only draw the link when we have reported positions\n        if (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n            return null;\n        }\n        if (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n            return null;\n        }\n        //generate links\n        return (React.createElement(react_canvas_core_1.PeformanceWidget, { model: this.props.link, serialized: this.props.link.serialize() }, () => {\n            return (React.createElement(\"g\", { \"data-linkid\": this.props.link.getID() },\n                this.props.diagramEngine.generateWidgetForLink(link),\n                _.map(this.props.link.getLabels(), (labelModel, index) => {\n                    return (React.createElement(LabelWidget_1.LabelWidget, { key: labelModel.getID(), engine: this.props.diagramEngine, label: labelModel, index: index }));\n                })));\n        }));\n    }\n}\nexports.LinkWidget = LinkWidget;\n//# sourceMappingURL=LinkWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PointModel = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass PointModel extends react_canvas_core_1.BasePositionModel {\n    constructor(options) {\n        super(Object.assign(Object.assign({}, options), { type: 'point' }));\n        this.parent = options.link;\n    }\n    isConnectedToPort() {\n        return this.parent.getPortForPoint(this) !== null;\n    }\n    getLink() {\n        return this.getParent();\n    }\n    remove() {\n        //clear references\n        if (this.parent) {\n            this.parent.removePoint(this);\n        }\n        super.remove();\n    }\n    isLocked() {\n        return super.isLocked() || this.getParent().isLocked();\n    }\n}\nexports.PointModel = PointModel;\n//# sourceMappingURL=PointModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeLayerFactory = void 0;\nconst React = require(\"react\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst NodeLayerModel_1 = require(\"./NodeLayerModel\");\nconst NodeLayerWidget_1 = require(\"./NodeLayerWidget\");\nclass NodeLayerFactory extends react_canvas_core_1.AbstractReactFactory {\n    constructor() {\n        super('diagram-nodes');\n    }\n    generateModel(event) {\n        return new NodeLayerModel_1.NodeLayerModel();\n    }\n    generateReactWidget(event) {\n        return React.createElement(NodeLayerWidget_1.NodeLayerWidget, { layer: event.model, engine: this.engine });\n    }\n}\nexports.NodeLayerFactory = NodeLayerFactory;\n//# sourceMappingURL=NodeLayerFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeLayerModel = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst NodeModel_1 = require(\"../node/NodeModel\");\nclass NodeLayerModel extends react_canvas_core_1.LayerModel {\n    constructor() {\n        super({\n            type: 'diagram-nodes',\n            isSvg: false,\n            transformed: true\n        });\n    }\n    addModel(model) {\n        if (!(model instanceof NodeModel_1.NodeModel)) {\n            throw new Error('Can only add nodes to this layer');\n        }\n        model.registerListener({\n            entityRemoved: () => {\n                this.getParent().removeNode(model);\n            }\n        });\n        super.addModel(model);\n    }\n    getChildModelFactoryBank(engine) {\n        return engine.getNodeFactories();\n    }\n    getNodes() {\n        return this.getModels();\n    }\n}\nexports.NodeLayerModel = NodeLayerModel;\n//# sourceMappingURL=NodeLayerModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeLayerWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nconst _ = require(\"lodash\");\nconst NodeWidget_1 = require(\"../node/NodeWidget\");\nvar S;\n(function (S) {\n    S.Container = styled_1.default.div ``;\n})(S || (S = {}));\nclass NodeLayerWidget extends React.Component {\n    render() {\n        return (React.createElement(React.Fragment, null, _.map(this.props.layer.getNodes(), (node) => {\n            return React.createElement(NodeWidget_1.NodeWidget, { key: node.getID(), diagramEngine: this.props.engine, node: node });\n        })));\n    }\n}\nexports.NodeLayerWidget = NodeLayerWidget;\n//# sourceMappingURL=NodeLayerWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeModel = void 0;\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass NodeModel extends react_canvas_core_1.BasePositionModel {\n    constructor(options) {\n        super(options);\n        this.ports = {};\n        this.width = 0;\n        this.height = 0;\n    }\n    getBoundingBox() {\n        return new geometry_1.Rectangle(this.getPosition(), this.width, this.height);\n    }\n    setPosition(x, y) {\n        let old = this.position;\n        super.setPosition(x, y);\n        //also update the port co-ordinates (for make glorious speed)\n        _.forEach(this.ports, (port) => {\n            port.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n        });\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        //deserialize ports\n        _.forEach(event.data.ports, (port) => {\n            let portOb = event.engine.getFactoryForPort(port.type).generateModel({});\n            portOb.deserialize(Object.assign(Object.assign({}, event), { data: port }));\n            // the links need these\n            event.registerModel(portOb);\n            this.addPort(portOb);\n        });\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { ports: _.map(this.ports, (port) => {\n                return port.serialize();\n            }) });\n    }\n    doClone(lookupTable = {}, clone) {\n        // also clone the ports\n        clone.ports = {};\n        _.forEach(this.ports, (port) => {\n            clone.addPort(port.clone(lookupTable));\n        });\n    }\n    remove() {\n        super.remove();\n        _.forEach(this.ports, (port) => {\n            _.forEach(port.getLinks(), (link) => {\n                link.remove();\n            });\n        });\n    }\n    getPortFromID(id) {\n        for (var i in this.ports) {\n            if (this.ports[i].getID() === id) {\n                return this.ports[i];\n            }\n        }\n        return null;\n    }\n    getLink(id) {\n        for (let portID in this.ports) {\n            const links = this.ports[portID].getLinks();\n            if (links[id]) {\n                return links[id];\n            }\n        }\n    }\n    getPort(name) {\n        return this.ports[name];\n    }\n    getPorts() {\n        return this.ports;\n    }\n    removePort(port) {\n        // clear the port from the links\n        for (let link of _.values(port.getLinks())) {\n            link.clearPort(port);\n        }\n        //clear the parent node reference\n        if (this.ports[port.getName()]) {\n            this.ports[port.getName()].setParent(null);\n            delete this.ports[port.getName()];\n        }\n    }\n    addPort(port) {\n        port.setParent(this);\n        this.ports[port.getName()] = port;\n        return port;\n    }\n    updateDimensions({ width, height }) {\n        this.width = width;\n        this.height = height;\n    }\n}\nexports.NodeModel = NodeModel;\n//# sourceMappingURL=NodeModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeWidget = void 0;\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst styled_1 = require(\"@emotion/styled\");\nconst resize_observer_polyfill_1 = require(\"resize-observer-polyfill\");\nvar S;\n(function (S) {\n    S.Node = styled_1.default.div `\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n})(S || (S = {}));\nclass NodeWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n    componentWillUnmount() {\n        var _a;\n        this.ob.disconnect();\n        this.ob = null;\n        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.deregister();\n        this.listener = null;\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.listener && this.props.node !== prevProps.node) {\n            this.listener.deregister();\n            this.installSelectionListener();\n        }\n    }\n    installSelectionListener() {\n        this.listener = this.props.node.registerListener({\n            selectionChanged: (event) => {\n                this.forceUpdate();\n            }\n        });\n    }\n    updateSize(width, height) {\n        this.props.node.updateDimensions({ width, height });\n        //now mark the links as dirty\n        try {\n            _.forEach(this.props.node.getPorts(), (port) => {\n                port.updateCoords(this.props.diagramEngine.getPortCoords(port));\n            });\n        }\n        catch (ex) { }\n    }\n    componentDidMount() {\n        // @ts-ignore\n        this.ob = new resize_observer_polyfill_1.default((entities) => {\n            const bounds = entities[0].contentRect;\n            this.updateSize(bounds.width, bounds.height);\n        });\n        const b = this.ref.current.getBoundingClientRect();\n        this.updateSize(b.width, b.height);\n        this.ob.observe(this.ref.current);\n        this.installSelectionListener();\n    }\n    render() {\n        return (React.createElement(react_canvas_core_1.PeformanceWidget, { model: this.props.node, serialized: this.props.node.serialize() }, () => {\n            return (React.createElement(S.Node, { className: \"node\", ref: this.ref, \"data-nodeid\": this.props.node.getID(), style: {\n                    top: this.props.node.getY(),\n                    left: this.props.node.getX()\n                } }, this.props.diagramEngine.generateWidgetForNode(this.props.node)));\n        }));\n    }\n}\nexports.NodeWidget = NodeWidget;\n//# sourceMappingURL=NodeWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PortModel = exports.PortModelAlignment = void 0;\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nvar PortModelAlignment;\n(function (PortModelAlignment) {\n    PortModelAlignment[\"TOP\"] = \"top\";\n    PortModelAlignment[\"LEFT\"] = \"left\";\n    PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n    PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment = exports.PortModelAlignment || (exports.PortModelAlignment = {}));\nclass PortModel extends react_canvas_core_1.BasePositionModel {\n    constructor(options) {\n        super(options);\n        this.links = {};\n        this.reportedPosition = false;\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.reportedPosition = false;\n        this.options.name = event.data.name;\n        this.options.alignment = event.data.alignment;\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { name: this.options.name, alignment: this.options.alignment, parentNode: this.parent.getID(), links: _.map(this.links, (link) => {\n                return link.getID();\n            }) });\n    }\n    setPosition(x, y) {\n        let old = this.position;\n        super.setPosition(x, y);\n        _.forEach(this.getLinks(), (link) => {\n            let point = link.getPointForPort(this);\n            point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n        });\n    }\n    doClone(lookupTable = {}, clone) {\n        clone.links = {};\n        clone.parent = this.getParent().clone(lookupTable);\n    }\n    getNode() {\n        return this.getParent();\n    }\n    getName() {\n        return this.options.name;\n    }\n    getMaximumLinks() {\n        return this.options.maximumLinks;\n    }\n    setMaximumLinks(maximumLinks) {\n        this.options.maximumLinks = maximumLinks;\n    }\n    removeLink(link) {\n        delete this.links[link.getID()];\n    }\n    addLink(link) {\n        this.links[link.getID()] = link;\n    }\n    getLinks() {\n        return this.links;\n    }\n    createLinkModel() {\n        if (_.isFinite(this.options.maximumLinks)) {\n            var numberOfLinks = _.size(this.links);\n            if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n                return _.values(this.links)[0];\n            }\n            else if (numberOfLinks >= this.options.maximumLinks) {\n                return null;\n            }\n        }\n        return null;\n    }\n    reportPosition() {\n        _.forEach(this.getLinks(), (link) => {\n            link.getPointForPort(this).setPosition(this.getCenter());\n        });\n        this.fireEvent({\n            entity: this\n        }, 'reportInitialPosition');\n    }\n    getCenter() {\n        return new geometry_1.Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n    }\n    getBoundingBox() {\n        return new geometry_1.Rectangle(this.position, this.width, this.height);\n    }\n    updateCoords(coords) {\n        this.width = coords.getWidth();\n        this.height = coords.getHeight();\n        this.setPosition(coords.getTopLeft());\n        this.reportedPosition = true;\n        this.reportPosition();\n    }\n    canLinkToPort(port) {\n        return true;\n    }\n    isLocked() {\n        return super.isLocked() || this.getParent().isLocked();\n    }\n}\nexports.PortModel = PortModel;\n//# sourceMappingURL=PortModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PortWidget = void 0;\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass PortWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n    report() {\n        this.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n    }\n    componentWillUnmount() {\n        this.engineListenerHandle && this.engineListenerHandle.deregister();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.props.port.reportedPosition) {\n            this.report();\n        }\n    }\n    componentDidMount() {\n        this.engineListenerHandle = this.props.engine.registerListener({\n            canvasReady: () => {\n                this.report();\n            }\n        });\n        if (this.props.engine.getCanvas()) {\n            this.report();\n        }\n    }\n    getExtraProps() {\n        if (react_canvas_core_1.Toolkit.TESTING) {\n            const links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n            return {\n                'data-links': links\n            };\n        }\n        return {};\n    }\n    render() {\n        return (React.createElement(\"div\", Object.assign({ style: this.props.style, ref: this.ref, className: `port ${this.props.className || ''}`, \"data-name\": this.props.port.getName(), \"data-nodeid\": this.props.port.getNode().getID() }, this.getExtraProps()), this.props.children));\n    }\n}\nexports.PortWidget = PortWidget;\n//# sourceMappingURL=PortWidget.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./models/DiagramModel\"), exports);\n__exportStar(require(\"./entities/label/LabelModel\"), exports);\n__exportStar(require(\"./entities/link/LinkModel\"), exports);\n__exportStar(require(\"./entities/link/PointModel\"), exports);\n__exportStar(require(\"./entities/link/LinkWidget\"), exports);\n__exportStar(require(\"./entities/link-layer/LinkLayerModel\"), exports);\n__exportStar(require(\"./entities/link-layer/LinkLayerWidget\"), exports);\n__exportStar(require(\"./entities/link-layer/LinkLayerFactory\"), exports);\n__exportStar(require(\"./entities/node-layer/NodeLayerModel\"), exports);\n__exportStar(require(\"./entities/node-layer/NodeLayerWidget\"), exports);\n__exportStar(require(\"./entities/node-layer/NodeLayerFactory\"), exports);\n__exportStar(require(\"./entities/node/NodeModel\"), exports);\n__exportStar(require(\"./entities/node/NodeWidget\"), exports);\n__exportStar(require(\"./entities/port/PortModel\"), exports);\n__exportStar(require(\"./entities/port/PortWidget\"), exports);\n__exportStar(require(\"./states/DefaultDiagramState\"), exports);\n__exportStar(require(\"./states/DragDiagramItemsState\"), exports);\n__exportStar(require(\"./states/DragNewLinkState\"), exports);\n__exportStar(require(\"./DiagramEngine\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagramModel = void 0;\nconst _ = require(\"lodash\");\nconst LinkModel_1 = require(\"../entities/link/LinkModel\");\nconst NodeModel_1 = require(\"../entities/node/NodeModel\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst NodeLayerModel_1 = require(\"../entities/node-layer/NodeLayerModel\");\nconst LinkLayerModel_1 = require(\"../entities/link-layer/LinkLayerModel\");\nclass DiagramModel extends react_canvas_core_1.CanvasModel {\n    constructor(options = {}) {\n        super(options);\n        this.addLayer(new LinkLayerModel_1.LinkLayerModel());\n        this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n    }\n    deserialize(event) {\n        this.layers = [];\n        super.deserialize(event);\n    }\n    addLayer(layer) {\n        super.addLayer(layer);\n        if (layer instanceof NodeLayerModel_1.NodeLayerModel) {\n            this.activeNodeLayer = layer;\n        }\n        if (layer instanceof LinkLayerModel_1.LinkLayerModel) {\n            this.activeLinkLayer = layer;\n        }\n    }\n    getLinkLayers() {\n        return _.filter(this.layers, (layer) => {\n            return layer instanceof LinkLayerModel_1.LinkLayerModel;\n        });\n    }\n    getNodeLayers() {\n        return _.filter(this.layers, (layer) => {\n            return layer instanceof NodeLayerModel_1.NodeLayerModel;\n        });\n    }\n    getActiveNodeLayer() {\n        if (!this.activeNodeLayer) {\n            const layers = this.getNodeLayers();\n            if (layers.length === 0) {\n                this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n            }\n            else {\n                this.activeNodeLayer = layers[0];\n            }\n        }\n        return this.activeNodeLayer;\n    }\n    getActiveLinkLayer() {\n        if (!this.activeLinkLayer) {\n            const layers = this.getLinkLayers();\n            if (layers.length === 0) {\n                this.addLayer(new LinkLayerModel_1.LinkLayerModel());\n            }\n            else {\n                this.activeLinkLayer = layers[0];\n            }\n        }\n        return this.activeLinkLayer;\n    }\n    getNode(node) {\n        for (const layer of this.getNodeLayers()) {\n            const model = layer.getModel(node);\n            if (model) {\n                return model;\n            }\n        }\n    }\n    getLink(link) {\n        for (const layer of this.getLinkLayers()) {\n            const model = layer.getModel(link);\n            if (model) {\n                return model;\n            }\n        }\n    }\n    addAll(...models) {\n        _.forEach(models, (model) => {\n            if (model instanceof LinkModel_1.LinkModel) {\n                this.addLink(model);\n            }\n            else if (model instanceof NodeModel_1.NodeModel) {\n                this.addNode(model);\n            }\n        });\n        return models;\n    }\n    addLink(link) {\n        this.getActiveLinkLayer().addModel(link);\n        this.fireEvent({\n            link,\n            isCreated: true\n        }, 'linksUpdated');\n        return link;\n    }\n    addNode(node) {\n        this.getActiveNodeLayer().addModel(node);\n        this.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n        return node;\n    }\n    removeLink(link) {\n        const removed = _.some(this.getLinkLayers(), (layer) => {\n            return layer.removeModel(link);\n        });\n        if (removed) {\n            this.fireEvent({ link, isCreated: false }, 'linksUpdated');\n        }\n    }\n    removeNode(node) {\n        const removed = _.some(this.getNodeLayers(), (layer) => {\n            return layer.removeModel(node);\n        });\n        if (removed) {\n            this.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n        }\n    }\n    getLinks() {\n        return _.flatMap(this.getLinkLayers(), (layer) => {\n            return _.values(layer.getModels());\n        });\n    }\n    getNodes() {\n        return _.flatMap(this.getNodeLayers(), (layer) => {\n            return _.values(layer.getModels());\n        });\n    }\n}\nexports.DiagramModel = DiagramModel;\n//# sourceMappingURL=DiagramModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultDiagramState = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst PortModel_1 = require(\"../entities/port/PortModel\");\nconst DragNewLinkState_1 = require(\"./DragNewLinkState\");\nconst DragDiagramItemsState_1 = require(\"./DragDiagramItemsState\");\nclass DefaultDiagramState extends react_canvas_core_1.State {\n    constructor() {\n        super({\n            name: 'default-diagrams'\n        });\n        this.childStates = [new react_canvas_core_1.SelectingState()];\n        this.dragCanvas = new react_canvas_core_1.DragCanvasState();\n        this.dragNewLink = new DragNewLinkState_1.DragNewLinkState();\n        this.dragItems = new DragDiagramItemsState_1.DragDiagramItemsState();\n        // determine what was clicked on\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                const element = this.engine.getActionEventBus().getModelForEvent(event);\n                // the canvas was clicked on, transition to the dragging canvas state\n                if (!element) {\n                    this.transitionWithEvent(this.dragCanvas, event);\n                }\n                // initiate dragging a new link\n                else if (element instanceof PortModel_1.PortModel) {\n                    this.transitionWithEvent(this.dragNewLink, event);\n                }\n                // move the items (and potentially link points)\n                else {\n                    this.transitionWithEvent(this.dragItems, event);\n                }\n            }\n        }));\n        // touch drags the canvas\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.TOUCH_START,\n            fire: (event) => {\n                this.transitionWithEvent(this.dragCanvas, event);\n            }\n        }));\n    }\n}\nexports.DefaultDiagramState = DefaultDiagramState;\n//# sourceMappingURL=DefaultDiagramState.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DragDiagramItemsState = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst _ = require(\"lodash\");\nconst PointModel_1 = require(\"../entities/link/PointModel\");\nconst PortModel_1 = require(\"../entities/port/PortModel\");\nclass DragDiagramItemsState extends react_canvas_core_1.MoveItemsState {\n    constructor() {\n        super();\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_UP,\n            fire: (event) => {\n                const item = this.engine.getMouseElement(event.event);\n                if (item instanceof PortModel_1.PortModel) {\n                    _.forEach(this.initialPositions, (position) => {\n                        if (position.item instanceof PointModel_1.PointModel) {\n                            const link = position.item.getParent();\n                            // only care about the last links\n                            if (link.getLastPoint() !== position.item) {\n                                return;\n                            }\n                            if (link.getSourcePort().canLinkToPort(item)) {\n                                link.setTargetPort(item);\n                                item.reportPosition();\n                                this.engine.repaintCanvas();\n                            }\n                        }\n                    });\n                }\n            }\n        }));\n    }\n}\nexports.DragDiagramItemsState = DragDiagramItemsState;\n//# sourceMappingURL=DragDiagramItemsState.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DragNewLinkState = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst PortModel_1 = require(\"../entities/port/PortModel\");\nclass DragNewLinkState extends react_canvas_core_1.AbstractDisplacementState {\n    constructor(options = {}) {\n        super({ name: 'drag-new-link' });\n        this.config = Object.assign({ allowLooseLinks: true, allowLinksFromLockedPorts: false }, options);\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                this.port = this.engine.getMouseElement(event.event);\n                if (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n                    this.eject();\n                    return;\n                }\n                this.link = this.port.createLinkModel();\n                // if no link is given, just eject the state\n                if (!this.link) {\n                    this.eject();\n                    return;\n                }\n                this.link.setSelected(true);\n                this.link.setSourcePort(this.port);\n                this.engine.getModel().addLink(this.link);\n                this.port.reportPosition();\n            }\n        }));\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_UP,\n            fire: (event) => {\n                const model = this.engine.getMouseElement(event.event);\n                // check to see if we connected to a new port\n                if (model instanceof PortModel_1.PortModel) {\n                    if (this.port.canLinkToPort(model)) {\n                        this.link.setTargetPort(model);\n                        model.reportPosition();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                    else {\n                        this.link.remove();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                }\n                if (!this.config.allowLooseLinks) {\n                    this.link.remove();\n                    this.engine.repaintCanvas();\n                }\n            }\n        }));\n    }\n    /**\n     * Calculates the link's far-end point position on mouse move.\n     * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n     * as the possible engine offset\n     */\n    fireMouseMoved(event) {\n        const portPos = this.port.getPosition();\n        const zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n        const engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n        const engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n        const initialXRelative = this.initialXRelative / zoomLevelPercentage;\n        const initialYRelative = this.initialYRelative / zoomLevelPercentage;\n        const linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n        const linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n        this.link.getLastPoint().setPosition(linkNextX, linkNextY);\n        this.engine.repaintCanvas();\n    }\n}\nexports.DragNewLinkState = DragNewLinkState;\n//# sourceMappingURL=DragNewLinkState.js.map","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nexport default index;\n"],"names":[],"sourceRoot":""}